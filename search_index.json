[
["index.html", "The Hitchhiker’s Guide to the tlverse or a Targeted Learning Practitioner’s Handbook Preface About this book Outline What this book is not About the authors Acknowledgements 0.1 Recommended Learning Resources 0.2 Setup instructions", " The Hitchhiker’s Guide to the tlverse or a Targeted Learning Practitioner’s Handbook Jeremy Coyle, Nima Hejazi, Ivana Malenica, Rachael Phillips, Alan Hubbard, Mark van der Laan May 14, 2019 Preface About this book The Hitchhiker’s Guide to the tlverse, or a Targeted Learning Practitioner’s Handbook is an open-source and fully-reproducible electronic handbook for applying the targeted learning methodology in practice using the tlverse software ecosystem. This work is currently in an early draft phase and is available to facilitate input from the community. To view or contribute to the available content, consider visiting the GitHub repository for this site. Outline The contents of this handbook are meant to serve as a reference guide for applied research as well as materials that can be taught in a series of short courses focused on the applications of Targeted Learning. Each section introduces a set of distinct causal questions, motivated by a case study, alongside statistical methodology and software for assessing the causal claim of interest. The (evolving) set of materials includes Motivation: Why we need a statistical revolution The Roadmap and introductory case study: the WASH Beneifits data Introduction to the tlverse software ecosystem Ensemble machine learning with the sl3 package Targeted learning for causal inference with the tmle3 package Optimal treatments regimes and the tmle3mopttx package Stochastic treatment regimes and the tmle3shift package Coda: Why we need a statistical revolution What this book is not The focus of this work is not on providing in-depth technical descriptions of current statistical methodology or recent advancements. Instead, the goal is to convey key details of state-of-the-art techniques in an manner that is both clear and complete, without burdening the reader with extraneous information. We hope that the presentations herein will serve as references for researchers – methodologists and domain specialists alike – that empower them to deploy the central tools of Targeted Learning in an efficient manner. For technical details and in-depth descriptions of both classical theory and recent advances in the field of Targeted Learning, the interested reader is invited to consult van der Laan and Rose (2011) and/or van der Laan and Rose (2018) as appropriate. The primary literature in statistical causal inference, machine learning, and non/semiparametric theory include many of the most recent advances in Targeted Learning and related areas. About the authors Jeremy Coyle Jeremy R. Coyle, Ph.D., is a consulting data scientist and statistical programmer, currently leading the software development effort that has produced the tlverse ecosystem of R packages and related software tools. Jeremy earned his Ph.D. in Biostatistics from UC Berkeley in 2016, primarily under the supervision of Alan Hubbard. Nima Hejazi Nima S. Hejazi is a Ph.D. candidate in biostatistics with a designated emphasis in computational and genomic biology, working jointly with Mark van der Laan and Alan Hubbard. Nima is affiliated with UC Berkeley’s Center for Computational Biology and NIH Biomedical Big Data training program. His research interests span causal inference, nonparametric inference and machine learning, targeted loss-based estimation, survival analysis, statistical computing, reproducible research, and high-dimensional biology. He is also passionate about software development for applied statistics, including software design, automated testing, and reproducible coding practices. For more information, see https://nimahejazi.org. Ivana Malenica Ivana Malenica is a Ph.D. student in biostatistics advised by Mark van der Laan. Ivana is currently a fellow at the Berkeley Institute for Data Science, after serving as a NIH Biomedical Big Data and Freeport-McMoRan Genomic Engine fellow. She earned her Master’s in Biostatistics and Bachelor’s in Mathematics, and spent some time at the Translational Genomics Research Institute. Very broadly, her research interests span non/semi-parametric theory, probability theory, machine learning, causal inference and high-dimensional statistics. Most of her current work involves complex dependent settings (dependence through time and network) and adaptive sequential designs. Rachael Phillips Rachael V. Phillips is a Ph.D. student in biostatistics, advised by Alan Hubbard and Mark van der Laan. She has an M.A. in Biostatistics, B.S. in Biology with a Chemistry minor and a B.A. in Mathematics with a Spanish minor. Rachael is motivated to solve real-world, high-dimensional problems in human health. Her research interests span causal inference, machine learning, nonparametric statistical estimation, and finite sample inference. She is also passionate about online mediated education. Rachael is affiliated with UC Berkeley’s Center for Computational Biology, NIH Biomedical Big Data Training Program, and Superfund Research Program. Alan Hubbard Alan E. Hubbard is Professor of Biostatistics, former head of the Division of Biostatistics at UC Berkeley, and head of data analytics core at UC Berkeley’s SuperFund research program. His current research interests include causal inference, variable importance analysis, statistical machine learning, estimation of and inference for data-adaptive statistical target parameters, and targeted minimum loss-based estimation. Research in his group is generally motivated by applications to problems in computational biology, epidemiology, and precision medicine. Mark van der Laan Mark J. van der Laan, PhD, is Professor of Biostatistics and Statistics at UC Berkeley. His research interests include statistical methods in computational biology, survival analysis, censored data, adaptive designs, targeted maximum likelihood estimation, causal inference, data-adaptive loss-based learning, and multiple testing. His research group developed loss-based super learning in semiparametric models, based on cross-validation, as a generic optimal tool for the estimation of infinite-dimensional parameters, such as nonparametric density estimation and prediction with both censored and uncensored data. Building on this work, his research group developed targeted maximum likelihood estimation for a target parameter of the data-generating distribution in arbitrary semiparametric and nonparametric models, as a generic optimal methodology for statistical and causal inference. Most recently, Mark’s group has focused in part on the development of a centralized, principled set of software tools for targeted learning, the tlverse. For more information, see https://vanderlaan-lab.org. Acknowledgements 0.1 Recommended Learning Resources To effectively utilize this handbook, the reader need not be a fully trained statistician to begin understanding and applying these methods. However, it is highly recommended for the reader to have an understanding of basic statistical concepts such as confounding, probability distributions, confidence intervals, hypothesis tests, and regression. Advanced knowledge of mathematical statistics may be useful but is not necessary. Familiarity with the R programming language will be essential. We also recommend an understanding of introductory causal inference. For learning the R programming language we recommend the following (free) introductory resources: Software Carpentry’s Programming with R Software Carpentry’s R for Reproducible Scientific Analysis Garret Grolemund and Hadley Wickham’s R for Data Science For a general introduction to causal inference, we recommend Miguel A. Hernán and James M. Robins’ Causal Inference, forthcoming 2019 Jason A. Roy’s A Crash Course in Causality: Inferring Causal Effects from Observational Data on Coursera 0.2 Setup instructions 0.2.1 R and RStudio R and RStudio are separate downloads and installations. R is the underlying statistical computing environment. RStudio is a graphical integrated development environment (IDE) that makes using R much easier and more interactive. You need to install R before you install RStudio. 0.2.1.1 Windows 0.2.1.1.1 If you already have R and RStudio installed Open RStudio, and click on “Help” &gt; “Check for updates”. If a new version is available, quit RStudio, and download the latest version for RStudio. To check which version of R you are using, start RStudio and the first thing that appears in the console indicates the version of R you are running. Alternatively, you can type sessionInfo(), which will also display which version of R you are running. Go on the CRAN website and check whether a more recent version is available. If so, please download and install it. You can check here for more information on how to remove old versions from your system if you wish to do so. 0.2.1.1.2 If you don’t have R and RStudio installed Download R from the CRAN website. Run the .exe file that was just downloaded Go to the RStudio download page Under Installers select RStudio x.yy.zzz - Windows XP/Vista/7/8 (where x, y, and z represent version numbers) Double click the file to install it Once it’s installed, open RStudio to make sure it works and you don’t get any error messages. 0.2.1.2 macOS 0.2.1.2.1 If you already have R and RStudio installed Open RStudio, and click on “Help” &gt; “Check for updates”. If a new version is available, quit RStudio, and download the latest version for RStudio. To check the version of R you are using, start RStudio and the first thing that appears on the terminal indicates the version of R you are running. Alternatively, you can type sessionInfo(), which will also display which version of R you are running. Go on the CRAN website and check whether a more recent version is available. If so, please download and install it. 0.2.1.2.2 If you don’t have R and RStudio installed Download R from the CRAN website. Select the .pkg file for the latest R version Double click on the downloaded file to install R It is also a good idea to install XQuartz (needed by some packages) Go to the RStudio download page Under Installers select RStudio x.yy.zzz - Mac OS X 10.6+ (64-bit) (where x, y, and z represent version numbers) Double click the file to install RStudio Once it’s installed, open RStudio to make sure it works and you don’t get any error messages. 0.2.1.3 Linux Follow the instructions for your distribution from CRAN, they provide information to get the most recent version of R for common distributions. For most distributions, you could use your package manager (e.g., for Debian/Ubuntu run sudo apt-get install r-base, and for Fedora sudo yum install R), but we don’t recommend this approach as the versions provided by this are usually out of date. In any case, make sure you have at least R 3.3.1. Go to the RStudio download page Under Installers select the version that matches your distribution, and install it with your preferred method (e.g., with Debian/Ubuntu sudo dpkg -i rstudio-x.yy.zzz-amd64.deb at the terminal). Once it’s installed, open RStudio to make sure it works and you don’t get any error messages. These setup instructions are adapted from those written for Data Carpentry: R for Data Analysis and Visualization of Ecological Data. References "],
["motivation.html", "Motivation", " Motivation “One enemy of robust science is our humanity — our appetite for being right, and our tendency to find patterns in noise, to see supporting evidence for what we already believe is true, and to ignore the facts that do not fit.” — (“Let’s Think About Cognitive Bias” 2015) Scientific research is at a unique point in history. The need to improve rigor and reproducibility in our field is greater than ever; corroboration moves science forward, yet there is a growing alarm about results that cannot be reproduced and that report false discoveries (Baker 2016). Consequences of not meeting this need will result in further decline in the rate of scientific progression, the reputation of the sciences, and the public’s trust in its findings (Munafò et al. 2017; “How Scientists Fool Themselves – and How They Can Stop” 2015). “The key question we want to answer when seeing the results of any scientific study is whether we can trust the data analysis.” — Peng (2015) Unfortunately, at its current state the culture of data analysis and statistics actually enables human bias through improper model selection. All hypothesis tests and estimators are derived from statistical models, so to obtain valid estimates and inference it is critical that the statistical model contains the process that generated the data. Perhaps treatment was randomized or only depended on a small number of baseline covariates; this knowledge should and can be incorporated in the model. Alternatively, maybe the data is observational, and there is no knowledge about the data-generating process (DGP). If this is the case, then the statistical model should contain all data distributions. In practice; however, models are not selected based on knowledge of the DGP, instead models are often selected based on (1) the p-values they yield, (2) their convenience of implementation, and/or (3) an analysts loyalty to a particular model. This practice of “cargo-cult statistics — the ritualistic miming of statistics rather than conscientious practice,” (Stark and Saltelli 2018) is characterized by arbitrary modeling choices, even though these choices often result in different answers to the same research question. That is, “increasingly often, [statistics] is used instead to aid and abet weak science, a role it can perform well when used mechanically or ritually,” as opposed to its original purpose of safeguarding against weak science (Stark and Saltelli 2018). This presents a fundamental drive behind the epidemic of false findings that scientific research is suffering from (???). “We suggest that the weak statistical understanding is probably due to inadequate”statistics lite&quot; education. This approach does not build up appropriate mathematical fundamentals and does not provide scientifically rigorous introduction into statistics. Hence, students’ knowledge may remain imprecise, patchy, and prone to serious misunderstandings. What this approach achieves, however, is providing students with false confidence of being able to use inferential tools whereas they usually only interpret the p-value provided by black box statistical software. While this educational problem remains unaddressed, poor statistical practices will prevail regardless of what procedures and measures may be favored and/or banned by editorials.&quot; — Szucs and Ioannidis (2017) Our team at The University of California, Berkeley, is uniquely positioned to provide such an education. Spearheaded by Professor Mark van der Laan, and spreading rapidly by many of his students and colleagues who have greatly enriched the field, the aptly named “Targeted Learning” methodology targets the scientific question at hand and is counter to the current culture of “convenience statistics” which opens the door to biased estimation, misleading results, and false discoveries. Targeted Learning restores the fundamentals that formalized the field of statistics, such as the that facts that a statistical model represents real knowledge about the experiment that generated the data, and a target parameter represents what we are seeking to learn from the data as a feature of the distribution that generated it (van der Laan and Starmans 2014). In this way, Targeted Learning defines a truth and establishes a principled standard for estimation, thereby inhibiting these all-too-human biases (e.g., hindsight bias, confirmation bias, and outcome bias) from infiltrating analysis. “The key for effective classical [statistical] inference is to have well-defined questions and an analysis plan that tests those questions.” — Nosek et al. (2018) The objective for this handbook is to provide training to students, researchers, industry professionals, faculty in science, public health, statistics, and other fields to empower them with the necessary knowledge and skills to utilize the sound methodology of Targeted Learning — a technique that provides tailored pre-specified machines for answering queries, so that each data analysis is completely reproducible, and estimators are efficient, minimally biased, and provide formal statistical inference. Just as the conscientious use of modern statistical methodology is necessary to ensure that scientific practice thrives, it remains critical to acknowledge the role that robust software plays in allowing practitioners direct access to published results. We recall that “an article…in a scientific publication is not the scholarship itself, it is merely advertising of the scholarship. The actual scholarship is the complete software development environment and the complete set of instructions which generated the figures,” thus making the availability and adoption of robust statistical software key to enhancing the transparency that is an inherent aspect of science (Buckheit and Donoho 1995). For a statistical methodology to be readily accessible in practice, it is crucial that it is accompanied by robust user-friendly software (Pullenayegum et al. 2016; Stromberg and others 2004). The tlverse software ecosystem was developed to fulfill this need for the Targeted Learning methodology. Not only does this software facilitate computationally reproducible and efficient analyses, it is also a tool for Targeted Learning education since its workflow mirrors that of the methodology. In particular, the tlverse paradigm does not focus on implementing a specific estimator or a small set of related estimators. Instead, the focus is on exposing the statistical framework of Targeted Learning itself — all R packages in the tlverse ecosystem directly model the key objects defined in the mathematical and theoretical framework of Targeted Learning. What’s more, the tlverse R packages share a core set of design principles centered on extensibility, allowing for them to be used in conjunction with each other and built upon one other in a cohesive fashion. In this handbook, the reader will embark on a journey through the tlverse ecosystem. Guided by R programming exercises, case studies, and intuitive explanation readers will build a toolbox for applying the Targeted Learning statistical methodology, which will translate to real-world causal inference analyses. Some preliminaries are required prior to this learning endeavor – we have made available a list of recommended learning resources. References "],
["intro.html", "Chapter 1 The Roadmap for Targeted Learning 1.1 Learning Objectives 1.2 Introduction 1.3 The Roadmap 1.4 Summary of the Roadmap 1.5 Causal Target Parameters 1.6 The WASH Benefits Example Dataset", " Chapter 1 The Roadmap for Targeted Learning 1.1 Learning Objectives By the end of this chapter you will be able to: Translate scientific questions to statistical questions. Define a statistical model based on the knowledge of the experiment that generated the data. Identify a causal parameter as a function of the observed data distribution. Explain the following causal and statistical assumptions and their implications: i.i.d., consistency, interference, positivity, SUTVA. 1.2 Introduction The roadmap of statistical learning is concerned with the translation from real-world data applications to a mathematical and statistical formulation of the relevant estimation problem. This involves data as a random variable having a probability distribution, scientific knowledge represented by a statistical model, a statistical target parameter representing an answer to the question of interest, and the notion of an estimator and sampling distribution of the estimator. 1.3 The Roadmap Following the roadmap is a process of five stages. Data as a random variable with a probability distribution, \\(O \\sim P_0\\). The statistical model \\(\\mathcal{M}\\) such that \\(P_0 \\in \\mathcal{M}\\). The statistical target parameter \\(\\Psi\\) and estimand \\(\\Psi(P_0)\\). The estimator \\(\\hat{\\Psi}\\) and estimate \\(\\hat{\\Psi}(P_n)\\). A measure of uncertainty for the estimate \\(\\hat{\\Psi}(P_n)\\). (1) Data as a random variable with a probability distribution, \\(O \\sim P_0\\) The data set we’re confronted with is the result of an experiment and we can view the data as a random variable, \\(O\\), because if we repeat the experiment we would have a different realization of this experiment. In particular, if we repeat the experiment many times we could learn the probability distribution, \\(P_0\\), of our data. So, the observed data \\(O\\) with probability distribution \\(P_0\\) are \\(n\\) independent identically distributed (i.i.d.) observations of the random variable \\(O; O_1, \\ldots, O_n\\). Note that while not all data are i.i.d., there are ways to handle non-i.i.d. data, such as establishing conditional independence, stratifying data to create sets of identically distributed data, etc. It is crucial that researchers be absolutely clear about what they actually know about the data-generating distribution for a given problem of interest. Unfortunately, communication between statisticians and researchers is often fraught with misinterpretation. The roadmap provides a mechanism by which to ensure clear communication between research and statistician – it truly helps with this communication! The empirical probability measure, \\(P_n\\) Once we have \\(n\\) of such i.i.d. observations we have an empirical probability measure, \\(P_n\\). The empirical probability measure is an approximation of the true probability measure \\(P_0\\), allowing us to learn from our data. For example, we can define the empirical probability measure of a set, \\(A\\), to be the proportion of observations which end up in \\(A\\). That is, \\[\\begin{equation*} P_n(A) = \\frac{1}{n}\\sum_{i=1}^{n}I(O_i \\in A) \\end{equation*}\\] In order to start learning something, we need to ask “What do we know about the probability distribution of the data?” This brings us to Step 2. (2) The statistical model \\(\\mathcal{M}\\) such that \\(P_0 \\in \\mathcal{M}\\) The statistical model \\(\\mathcal{M}\\) is defined by the question we asked at the end of . It is defined as the set of possible probability distributions for our observed data. Often \\(\\mathcal{M}\\) is very large (possibly infinite-dimensional), to reflect the fact that statistical knowledge is limited. In the case that \\(\\mathcal{M}\\) is infinite-dimensional, we deem this a nonparametric statistical model. Alternatively, if the probability distribution of the data at hand is described by a finite number of parameters, then the statistical model is parametric. In this case, we prescribe to the belief that the random variable \\(O\\) being observed has, e.g., a normal distribution with mean \\(\\mu\\) and variance \\(\\sigma^2\\). More formally, a parametric model may be defined \\[\\begin{equation*} \\mathcal{M} = \\{P_{\\theta} : \\theta \\in \\mathcal{R}^d \\} \\end{equation*}\\] Sadly, the assumption that the data-generating distribution has a specific, parametric forms is all-too-common, even when such is a leap of faith. This practice of oversimplification in the current culture of data analysis typically derails any attempt at trying to answer the scientific question at hand; alas, such statements as the ever-popular quip of Box that “All models are wrong but some are useful,” encourage the data analyst to make arbitrary choices even when that often force significant differences in answers to the same estimation problem. The Targeted Learning paradigm does not suffer from this bias since it defines the statistical model through a representation of the true data-generating distribution corresponding to the observed data. Now, on to Step 3: ``What are we trying to learn from the data?&quot; (3) The statistical target parameter \\(\\Psi\\) and estimand \\(\\Psi(P_0)\\) The statistical target parameter, \\(\\Psi\\), is defined as a mapping from the statistical model, \\(\\mathcal{M}\\), to the parameter space (i.e., a real number) \\(\\mathcal{R}\\). That is, \\(\\Psi: \\mathcal{M}\\rightarrow\\mathbb{R}\\). The target parameter may be seen as a representation of the quantity that we wish to learn from the data, the answer to a well-specified (often causal) question of interest. In contrast to purely statistical target parameters, causal target parameters require identification from the observed data, based on causal models that include several untestable assumptions, described in more detail in the section on causal target parameters. For a simple example, consider a data set which contains observations of a survival time on every subject, for which our question of interest is “What’s the probability that someone lives longer than five years?” We have, \\[\\begin{equation*} \\Psi(P_0) = P_0(O &gt; 5) \\end{equation*}\\] This answer to this question is the estimand, \\(\\Psi(P_0)\\), which is the quantity we’re trying to learn from the data. Once we have defined \\(O\\), \\(\\mathcal{M}\\) and \\(\\Psi(P_0)\\) we have formally defined the statistical estimation problem. (4) The estimator \\(\\hat{\\Psi}\\) and estimate \\(\\hat{\\Psi}(P_n)\\) To obtain a good approximation of the estimand, we need an estimator, an a priori-specified algorithm defined as a mapping from the set of possible empirical distributions, \\(P_n\\), which live in a non-parametric statistical model, \\(\\mathcal{M}_{NP}\\) (\\(P_n \\in \\mathcal{M}_{NP}\\)), to the parameter space of the parameter of interest. That is, \\(\\hat{\\Psi} : \\mathcal{M}_{NP} \\rightarrow \\mathbb{R}^d\\). The estimator is a function that takes as input the observed data, a realization of \\(P_n\\), and gives as output a value in the parameter space, which is the estimate, \\(\\hat{\\Psi}(P_n)\\). Where the estimator may be seen as an operator that maps the observed data and corresponding empirical distribution to a value in the parameter space, the numerical output that produced such a function is the estimate. Thus, it is an element of the parameter space based on the empirical probability distribution of the observed data. If we plug in a realization of \\(P_n\\) (based on a sample size \\(n\\) of the random variable \\(O\\)), we get back an estimate \\(\\hat{\\Psi}(P_n)\\) of the true parameter value \\(\\Psi(P_0)\\). In order to quantify the uncertainty in our estimate of the target parameter (i.e., to construct statistical inference), an understanding of the sampling distribution of our estimator will be necessary. This brings us to Step 5. (5) A measure of uncertainty for the estimate \\(\\hat{\\Psi}(P_n)\\) Since the estimator \\(\\hat{\\Psi}\\) is a function of the empirical distribution \\(P_n\\), the estimator itself is a random variable with a sampling distribution. So, if we repeat the experiment of drawing \\(n\\) observations we would every time end up with a different realization of our estimate and our estimator has a sampling distribution. The sampling distribution of an estimator can be theoretically validated to be approximately normally distributed by a Central Limit Theorem (CLT). A class of Central Limit Theorems (CLTs) are statements regarding the convergence of the sampling distribution of an estimator to a normal distribution. In general, we will construct estimators whose limit sampling distributions may be shown to be approximately normal distributed as sample size increases. For large enough \\(n\\) we have, \\[\\begin{equation*} \\hat{\\Psi}(P_n) \\sim N \\left(\\Psi(P_0), \\frac{\\sigma^2}{n}\\right), \\end{equation*}\\] permitting statistical inference. Now, we can proceed to quantify the uncertainty of our chosen estimator by construction of hypothesis tests and confidence intervals. For example, we may construct a 95% confidence interval for our estimand, \\(\\Psi(P_0)\\): \\[\\begin{equation*} $$\\hat{\\Psi}(P_n) \\pm 1.96 \\left(\\frac{\\sigma}{\\sqrt{n}}\\right) \\end{equation*}\\] Note: we typically have to estimate the standard error, \\(\\frac{\\sigma}{\\sqrt{n}}\\). A 95% confidence interval means that if we were to take 100 different samples of size \\(n\\) and compute a 95% confidence interval for each sample then approximately 95 of the 100 confidence intervals would contain the estimand, \\(\\Psi(P_0)\\). More practically, this means that there is a 95% probability (or 95% confidence) that the confidence interval procedure will contain the true estimand. However, any single estimated confidence interval either will contain the true estimand or will not. 1.4 Summary of the Roadmap Data, \\(O\\), is viewed as a random variable that has a probability distribution. We often have \\(n\\) units of independent identically distributed units with probability distribution \\(P_0\\) (\\(O_1, \\ldots, O_n \\sim P_0\\)). We have statistical knowledge about the experiment that generated this data. In other words, we make a statement that the true data distribution \\(P_0\\) falls in a certain set called a statistical model, \\(\\mathcal{M}\\). Often these sets are very large because statistical knowledge is very limited so these statistical models are often infinite dimensional models. Our statistical query is, “What are we trying to learn from the data?” denoted by the statistical target parameter, \\(\\Psi\\), which maps the \\(P_0\\) into the estimand, \\(\\Psi(P_0)\\). At this point the statistical estimation problem is formally defined and now we will need statistical theory to guide us in the construction of estimators. There’s a lot of statistical theory we will review in this course that, in particular, relies on the Central Limit Theorem, allowing us to come up with estimators that are approximately normally distributed and also allowing us to come with statistical inference (i.e., confidence intervals and hypothesis tests). 1.5 Causal Target Parameters 1.5.1 The Causal Model The next step in the roadmap is to use a causal framework to formalize the experiment and thereby define the parameter of interest. Causal graphs are one useful tool to express what we know about the causal relations among variables that are relevant to the question under study (Pearl 2009a). While directed acyclic graphs (DAGs) provide a convenient means by which to visualize causal relations between variables, the same causal relations among variables can be represented via a set of structural equations: \\[\\begin{align*} W &amp;= f_W(U_W) \\\\ A &amp;= f_A(W, U_A) \\\\ Y &amp;= f_Y(W, A, U_Y), \\end{align*}\\] where \\(U_W\\), \\(U_A\\), and \\(U_Y\\) represent the unmeasured exogenous background characteristics that influence the value of each variable. In the NPSEM, \\(f_W\\), \\(f_A\\) and \\(f_Y\\) denote that each variable (for \\(W\\), \\(A\\) and \\(Y\\), respectively) is a function of its parents and unmeasured background characteristics, but note that there is no imposition of any particular functional constraints. For this reason, they are called non-parametric structural equation models (NPSEMs). The DAG and set of nonparametric structural equations represent exactly the same information and so may be used interchangeably. The first hypothetical experiment we will consider is assigning exposure to the whole population and observing the outcome, and then assigning no exposure to the whole population and observing the outcome. On the nonparametric structural equations, this corresponds to a comparison of the outcome distribution in the population under two interventions: \\(A\\) is set to \\(1\\) for all individuals, and \\(A\\) is set to \\(0\\) for all individuals. These interventions imply two new nonparametric structural equation models. For the case \\(A = 1\\), we have \\[\\begin{align*} W &amp;= f_W(U_W) \\\\ A &amp;= 1 \\\\ Y(1) &amp;= f_Y(W, 1, U_Y), \\end{align*}\\] and for the case \\(A=0\\), \\[\\begin{align*} W &amp;= f_W(U_W) \\\\ A &amp;= 0 \\\\ Y(1) &amp;= f_Y(W, 0, U_Y). \\end{align*}\\] In these equations, \\(A\\) is no longer a function of \\(W\\) because we have intervened on the system, setting \\(A\\) deterministically to either of the values \\(1\\) or \\(0\\). The new symbols \\(Y(1)\\) and \\(Y(0)\\) indicate the outcome variable in our population if it were generated by the respective NPSEMs above; these are often called counterfactuals (since they run contrary-to-fact). The difference between the means of the outcome under these two interventions defines a parameter that is often called the “average treatment effect” (ATE), denoted \\[\\begin{equation}\\label{eqn:ate} ATE = \\mathbb{E}_X(Y(1)-Y(0)), \\end{equation}\\] where \\(\\mathbb{E}_X\\) is the mean under the theoretical (unobserved) full data \\(X = (W, Y(1), Y(0))\\). 1.5.2 Identifiability Because we can never observe both \\(Y(0)\\) (the counterfactual outcome when \\(A=0\\)) and \\(Y(1)\\), we cannot estimate directly. Instead, we have to make assumptions under which this quantity may be estimated from the observed data \\(O \\sim P_0\\) under the data-generating distribution \\(P_0\\). Fortunately, given the causal model specified in the NPSEM above, we can, with a handful of untestable assumptions, estimate the ATE, even from observational data. These assumptions may be summarized as follows The causal graph implies \\(Y(a) \\perp A\\) for all \\(a \\in \\mathcal{A}\\), which is the randomization assumption. In the case of observational data, the analogous assumption is strong ignorability or no unmeasured confounding \\(Y(a) \\perp A \\mid W\\) for all \\(a \\in \\mathcal{A}\\); Although not represented in the causal graph, also required is the assumption of no interference between units, that is, the outcome for unit \\(i\\) \\(Y_i\\) is not affected by exposure for unit \\(j\\) \\(A_j\\) unless \\(i=j\\); Consistency of the treatment mechanism is also required, i.e., the outcome for unit \\(i\\) is \\(Y_i(a)\\) whenever \\(A_i = a\\), an assumption also known as “no other versions of treatment”; It is also necessary that all observed units, across strata defined by \\(W\\), have a bounded (non-deterministic) probability of receiving treatment – that is, \\(0 &lt; P_0(A = a \\mid W) &lt; 1\\) for all \\(a\\) and \\(W\\)). This assumption is referred to as positivity. Remark: Together, (2) and (3), the assumptions of no interference and consistency, respectively, are jointly referred to as the stable unit treatment value assumption (SUTVA). Given these assumptions, the ATE may be re-written as a function of \\(P_0\\), specifically \\[\\begin{equation}\\label{eqn:estimand} ATE = \\mathbb{E}_0(Y(1) - Y(0)) = \\mathbb{E}_0 \\left(\\mathbb{E}_0[Y \\mid A = 1, W] - \\mathbb{E}_0[Y \\mid A = 0, W]\\right), \\end{equation}\\] or the difference in the predicted outcome values for each subject, under the contrast of treatment conditions (\\(A = 0\\) vs. \\(A = 1\\)), in the population, averaged over all observations. Thus, a parameter of a theoretical “full” data distribution can be represented as an estimand of the observed data distribution. Significantly, there is nothing about the representation in that requires parameteric assumptions; thus, the regressions on the right hand side may be estimated freely with machine learning. With different parameters, there will be potentially different identifiability assumptions and the resulting estimands can be functions of different components of \\(P_0\\). We discuss several more complex estimands in later sections of this workshop. 1.6 The WASH Benefits Example Dataset The data come from a study of the effect of water quality, sanitation, hand washing, and nutritional interventions on child development in rural Bangladesh (WASH Benefits Bangladesh): a cluster-randomised controlled trial (“Temporary,” n.d.). The study enrolled pregnant women in their first or second trimester from the rural villages of Gazipur, Kishoreganj, Mymensingh, and Tangail districts of central Bangladesh, with an average of eight women per cluster. Groups of eight geographically adjacent clusters were block-randomised, using a random number generator, into six intervention groups (all of which received weekly visits from a community health promoter for the first 6 months and every 2 weeks for the next 18 months) and a double-sized control group (no intervention or health promoter visit). The six intervention groups were: chlorinated drinking water; improved sanitation; handwashing with soap; combined water, sanitation, and hand washing; improved nutrition through counseling and provision of lipid-based nutrient supplements; and combined water, sanitation, handwashing, and nutrition. In the workshop, we concentrate on child growth (size for age) as the outcome of interest. For reference, this trial was registered with ClinicalTrials.gov as NCT01590095. library(here) library(tidyverse) # read in data dat &lt;- read_csv(here(&quot;data&quot;, &quot;washb_data.csv&quot;)) dat # A tibble: 4,695 x 28 whz tr fracode month aged sex momage momedu momheight hfiacat Nlt18 &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; 1 0 Cont… N05265 9 268 male 30 Prima… 146. Food S… 3 2 -1.16 Cont… N05265 9 286 male 25 Prima… 149. Modera… 2 3 -1.05 Cont… N08002 9 264 male 25 Prima… 152. Food S… 1 4 -1.26 Cont… N08002 9 252 fema… 28 Prima… 140. Food S… 3 5 -0.59 Cont… N06531 9 336 fema… 19 Secon… 151. Food S… 2 6 -0.51 Cont… N06531 9 304 male 20 Secon… 154. Severe… 0 7 -2.46 Cont… N08002 9 336 fema… 19 Prima… 151. Food S… 2 8 -0.6 Cont… N06528 9 312 fema… 25 No ed… 142. Food S… 2 9 -0.23 Cont… N06528 9 322 male 30 Secon… 153. Food S… 1 10 -0.14 Cont… N06453 9 376 male 30 No ed… 156. Modera… 2 # … with 4,685 more rows, and 17 more variables: Ncomp &lt;dbl&gt;, watmin &lt;dbl&gt;, # elec &lt;dbl&gt;, floor &lt;dbl&gt;, walls &lt;dbl&gt;, roof &lt;dbl&gt;, asset_wardrobe &lt;dbl&gt;, # asset_table &lt;dbl&gt;, asset_chair &lt;dbl&gt;, asset_khat &lt;dbl&gt;, asset_chouki &lt;dbl&gt;, # asset_tv &lt;dbl&gt;, asset_refrig &lt;dbl&gt;, asset_bike &lt;dbl&gt;, asset_moto &lt;dbl&gt;, # asset_sewmach &lt;dbl&gt;, asset_mobile &lt;dbl&gt; For the purposes of this workshop, we we start by treating the data as independent and identically distributed (i.i.d.) random draws from a very large target population. We could, with available options, account for the clustering of the data (within sampled geographic units), but, for simplification, we avoid these details in these workshop presentations, although modifications of our methodology for biased samples, repeated measures, etc., are available. We have 28 variables measured, of which 1 variable is set to be the outcome of interest. This outcome, \\(Y\\), is the weight-for-height Z-score (whz in dat); the treatment of interest, \\(A\\), is the randomized treatment group (tr in dat); and the adjustment set, \\(W\\), consists simply of everything else. This results in our observed data structure being \\(n\\) i.i.d. copies of \\(O_i = (W_i, A_i, Y_i)\\), for \\(i = 1, \\ldots, n\\). Using the skimr package, we can quickly summarize the variables measured in the WASH Benefits data set: library(skimr) skim(dat) Skim summary statistics n obs: 4695 n variables: 28 ── Variable type:character ───────────────────────────────────────────────────── variable missing complete n min max empty n_unique fracode 0 4695 4695 2 6 0 20 hfiacat 0 4695 4695 11 24 0 4 momedu 0 4695 4695 12 15 0 3 sex 0 4695 4695 4 6 0 2 tr 0 4695 4695 3 15 0 7 ── Variable type:numeric ─────────────────────────────────────────────────────── variable missing complete n mean sd p0 p25 p50 p75 aged 0 4695 4695 266.32 52.17 42 230 266 303 asset_bike 0 4695 4695 0.32 0.47 0 0 0 1 asset_chair 0 4695 4695 0.73 0.44 0 0 1 1 asset_chouki 0 4695 4695 0.78 0.41 0 1 1 1 asset_khat 0 4695 4695 0.61 0.49 0 0 1 1 asset_mobile 0 4695 4695 0.86 0.35 0 1 1 1 asset_moto 0 4695 4695 0.066 0.25 0 0 0 0 asset_refrig 0 4695 4695 0.079 0.27 0 0 0 0 asset_sewmach 0 4695 4695 0.065 0.25 0 0 0 0 asset_table 0 4695 4695 0.73 0.44 0 0 1 1 asset_tv 0 4695 4695 0.3 0.46 0 0 0 1 asset_wardrobe 0 4695 4695 0.17 0.37 0 0 0 0 elec 0 4695 4695 0.6 0.49 0 0 1 1 floor 0 4695 4695 0.11 0.31 0 0 0 0 momage 18 4677 4695 23.91 5.24 14 20 23 27 momheight 31 4664 4695 150.5 5.23 120.65 147.05 150.6 154.06 month 0 4695 4695 6.45 3.33 1 4 6 9 Ncomp 0 4695 4695 11.04 6.35 2 6 10 14 Nlt18 0 4695 4695 1.6 1.25 0 1 1 2 roof 0 4695 4695 0.99 0.12 0 1 1 1 walls 0 4695 4695 0.72 0.45 0 0 1 1 watmin 0 4695 4695 0.95 9.48 0 0 0 1 whz 0 4695 4695 -0.59 1.03 -4.67 -1.28 -0.6 0.08 p100 hist 460 ▁▁▂▇▇▅▁▁ 1 ▇▁▁▁▁▁▁▃ 1 ▃▁▁▁▁▁▁▇ 1 ▂▁▁▁▁▁▁▇ 1 ▅▁▁▁▁▁▁▇ 1 ▁▁▁▁▁▁▁▇ 1 ▇▁▁▁▁▁▁▁ 1 ▇▁▁▁▁▁▁▁ 1 ▇▁▁▁▁▁▁▁ 1 ▃▁▁▁▁▁▁▇ 1 ▇▁▁▁▁▁▁▃ 1 ▇▁▁▁▁▁▁▂ 1 ▆▁▁▁▁▁▁▇ 1 ▇▁▁▁▁▁▁▁ 60 ▅▇▅▂▁▁▁▁ 168 ▁▁▁▂▇▇▂▁ 12 ▅▃▇▃▂▇▃▅ 52 ▇▇▃▁▁▁▁▁ 10 ▇▃▂▁▁▁▁▁ 1 ▁▁▁▁▁▁▁▇ 1 ▃▁▁▁▁▁▁▇ 600 ▇▁▁▁▁▁▁▁ 4.97 ▁▁▅▇▃▁▁▁ A convenient summary of the relevant variables is given just above, complete with a small visualization describing the marginal characteristics of each covariate. Note that the asset variables reflect socio-economic status of the study participants. Notice also the uniform distribution of the treatment groups (with twice as many controls); this is, of course, by design. References "],
["tlverse.html", "Chapter 2 Welcome to the tlverse 2.1 Learning Objectives 2.2 What is the tlverse? 2.3 tlverse components 2.4 Installation", " Chapter 2 Welcome to the tlverse 2.1 Learning Objectives Understand the tlverse ecosystem conceptually Identify the core components of the tlverse Install tlverse R packages Understand the Targeted Learning roadmap Learn about the WASH Benefits example data 2.2 What is the tlverse? The tlverse is a new framework for doing Targeted Learning in R, inspired by the tidyverse ecosystem of R packages. By analogy to the tidyverse: The tidyverse is an opinionated collection of R packages designed for data science. All packages share an underlying design philosophy, grammar, and data structures. So, the tlverse is an opinionated collection of R packages for Targeted Learning sharing an underlying philosophy, grammar, and set of data structures 2.3 tlverse components These are the main packages that represent the core of the tlverse: sl3: Modern Super Learning with Pipelines What? A modern object-oriented re-implementation of the Super Learner algorithm, employing recently developed paradigms for R programming. Why? A design that leverages modern tools for fast computation, is forward-looking, and can form one of the cornerstones of the tlverse. tmle3: An Engine for Targeted Learning What? A generalized framework that simplifies Targeted Learning by identifying and implementing a series of common statistical estimation procedures. Why? A common interface and engine that accommodates current algorithmic approaches to Targeted Learning and is still flexible enough to remain the engine even as new techniques are developed. In addition to the engines that drive development in the tlverse, there are some supporting packages – in particular, we have two… origami: A Generalized Framework for Cross-Validation What? A generalized framework for flexible cross-validation Why? Cross-validation is a key part of ensuring error estimates are honest and preventing overfitting. It is an essential part of the both the Super Learner algorithm and Targeted Learning. delayed: Parallelization Framework for Dependent Tasks What? A framework for delayed computations (futures) based on task dependencies. Why? Efficient allocation of compute resources is essential when deploying large-scale, computationally intensive algorithms. A key principle of the tlverse is extensibility. That is, we want to support new Targeted Learning estimators as they are developed. The model for this is new estimators are implemented in additional packages using the core packages above. There are currently two featured examples of this: tmle3mopttx: Optimal Treatments in tlverse What? Learn an optimal rule and estimate the mean outcome under the rule Why? Optimal Treatment is a powerful tool in precision healthcare and other settings where a one-size-fits-all treatment approach is not appropriate. tmle3shift: Shift Interventions in tlverse What? Shift interventions for continuous treatments Why? Not all treatment variables are discrete. Being able to estimate the effects of continuous treatment represents a powerful extension of the Targeted Learning approach. 2.4 Installation The tlverse ecosystem of packages are currently hosted at https://github.com/tlverse, not yet on CRAN. You can use the devtools package to install them: install.packages(&quot;devtools&quot;) devtools::install_github(&quot;tlverse/tlverse&quot;) The tlverse depends on a large number of other packages that are also hosted on GitHub. Because of this, you may see the following error: Error: HTTP error 403. API rate limit exceeded for 71.204.135.82. (But here&#39;s the good news: Authenticated requests get a higher rate limit. Check out the documentation for more details.) Rate limit remaining: 0/60 Rate limit reset at: 2019-03-04 19:39:05 UTC To increase your GitHub API rate limit - Use `usethis::browse_github_pat()` to create a Personal Access Token. - Use `usethis::edit_r_environ()` and add the token as `GITHUB_PAT`. This just means that R tried to install too many packages from GitHub in too short of a window. To fix this, you need to tell R how to use GitHub as your user (you’ll need a GitHub user account). Follow these two steps: Use usethis::browse_github_pat() to create a Personal Access Token. Use usethis::edit_r_environ() and add the token as GITHUB_PAT. "],
["ensemble-machine-learning.html", "Chapter 3 Ensemble Machine Learning 3.1 Learning Objectives 3.2 Introduction 3.3 Basic Implementation 3.4 Extensions 3.5 Variable Importance Analysis with sl3 3.6 Exercise 3.7 Concluding Remarks 3.8 Appendix", " Chapter 3 Ensemble Machine Learning Rachael Phillips Based on the sl3 R package by Jeremy Coyle, Nima Hejazi, Ivana Malenica, and Oleg Sofrygin. Updated: 2019-05-14 3.1 Learning Objectives By the end of this chapter you will be able to: Select a loss function that is appropriate for the functional parameter to be estimated. Assemble an ensemble of learners based on the properties that identify what features they support. Customize learner hyperparameters to incorporate a diversity of different settings. Select a subset of available covariates and pass only those variables to the modeling algorithm. Fit an ensemble with nested cross-validation to obtain an estimate of the performance of the ensemble itself. Obtain sl3 variable importance metrics. Interpret the discrete and continuous super learner fits. Rationalize the need to remove bias from the super learner to make an optimal bias–variance tradeoff for the parameter of interest. 3.2 Introduction In Chapter 1, we introduced the road map for targeted learning as a general template to translate real-world data applications into formal statistical estimation problems. The first steps of this roadmap define the statistical estimation problem, which establish Data as a realization of a random variable, or equivalently, an outcome of a particular experiment. A statistical model, representing the true knowledge about the data-generating experiment. A translation of the scientific question, which is often causal, into a target parameter. Note that if the target parameter is causal, step 3 also requires establishing identifiability of the target quantity from the observed data distribution, under possible non-testable assumptions that may not necessarily be reasonable. Still, the target quantity does have a valid statistical interpretation. See causal target parameters for more detail on causal models and identifiability. Now that we have defined the statistical estimation problem, we are ready to construct the TMLE; an asymptotically linear and efficient substitution estimator of this target quantity. The first step in this estimation procedure is an initial estimate of the data-generating distribution, or the relevant part of this distribution that is needed to evaluate the target parameter. For this initial estimation, we use the Super Learner (Van der Laan, Polley, and Hubbard 2007). The super learner provides an important step in creating a robust estimator. It is a loss-function-based tool that uses cross-validation to obtain the best prediction of our target parameter, based on a weighted average of a library of machine learning algorithms. This library of machine learning algorithms consists of functions (“learners” in the sl3 nomenclature) that we think might be consistent with the true data-generating distribution. The ensembling of algorithms with weights (“metalearning” in the sl3 nomenclature) has been shown to be adaptive and robust, even in small samples (???). The Super Learner has been proven to be asymptotically as accurate as the best possible prediction algorithm in the library (van der Laan and Dudoit 2003; Van der Vaart, Dudoit, and Laan 2006). 3.2.1 Background A loss function \\(L\\) is defined as a function of the observed data and a candidate parameter value \\(\\psi\\), which has unknown true value \\(\\psi_0\\), \\(L(\\psi)(O)\\). We can estimate the loss by substituting the empirical distribution \\(P_n\\) for the true (but unknown) distribution of the observed data \\(P_0\\). A valid loss function will have expectation (risk) that is minimized at the true value of the parameter \\(\\psi_0\\). For example, the conditional mean minimizes the risk of the squared error loss. Thus, it is a valid loss function when estimating the conditional mean. The discrete super learner, or cross-validated selector, is the algorithm in the library that minimizes the cross-validated empirical risk. The cross-validated empirical risk of an algorithm is defined as the empirical mean over a validation sample of the loss of the algorithm fitted on the training sample, averaged across the splits of the data. The continuous/ensemble super learner is a weighted average of the library of algorithms, where the weights are chosen to minimize the cross-validated empirical risk of the library. Restricting the weights (“metalearner” in sl3 nomenclature) to be positive and sum to one (convex combination) has been shown to improve upon the discrete Super Learner (???; Van der Laan, Polley, and Hubbard 2007). This notion of weighted combinations was introduced in Wolpert (1992) for neural networks and adapted for regressions in Breiman (1996). For more detail on super learner we refer the reader to Van der Laan, Polley, and Hubbard (2007) and (???). The optimality results for the cross-validation selector among a family of algorithms were established in van der Laan and Dudoit (2003) and extended in Van der Vaart, Dudoit, and Laan (2006). 3.3 Basic Implementation We begin by illustrating the basic functionality of the Super Learner algorithm as implemented in sl3. The sl3 implementation consists of the following steps: Load the necessary libraries and data Define the machine learning task Make a super learner by creating library of base learners and a metalearner Train the super learner on the machine learning task Obtain predicted values 3.3.1 WASH Benefits Study Example Using the WASH data, we are interested in predicting weight-for-height z-score whz using the available covariate data. Let’s begin! 0. Load the necessary libraries and data First, we will load the relevant R packages, set a seed, and load the data. library(kableExtra) library(here) library(tidyverse) library(data.table) library(sl3) library(SuperLearner) library(origami) library(knitr) set.seed(7194) # load data set and take a peek washb_data &lt;- fread(here(&quot;data&quot;, &quot;washb_data.csv&quot;), stringsAsFactors = TRUE) head(washb_data, 3) %&gt;% kable(digits = 3) %&gt;% kableExtra:::kable_styling(fixed_thead = T) %&gt;% scroll_box(width = &quot;100%&quot;, height = &quot;300px&quot;) whz tr fracode month aged sex momage momedu momheight hfiacat Nlt18 Ncomp watmin elec floor walls roof asset_wardrobe asset_table asset_chair asset_khat asset_chouki asset_tv asset_refrig asset_bike asset_moto asset_sewmach asset_mobile 0.00 Control N05265 9 268 male 30 Primary (1-5y) 146.40 Food Secure 3 11 0 1 0 1 1 0 1 1 1 0 1 0 0 0 0 1 -1.16 Control N05265 9 286 male 25 Primary (1-5y) 148.75 Moderately Food Insecure 2 4 0 1 0 1 1 0 1 0 1 1 0 0 0 0 0 1 -1.05 Control N08002 9 264 male 25 Primary (1-5y) 152.15 Food Secure 1 10 0 0 0 1 1 0 0 1 0 1 0 0 0 0 0 1 1. Define the machine learning task To define the machine learning “task” (predict weight-for-height z-score whz using the available covariate data), we need to create an sl3_Task object. The sl3_Task keeps track of the roles the variables play in the machine learning problem, the data, and any metadata (e.g., observational-level weights, id, offset). # specify the outcome and covariates outcome &lt;- &quot;whz&quot; covars &lt;- colnames(washb_data)[-which(names(washb_data) == outcome)] # create the sl3 task washb_task &lt;- make_sl3_Task( data = washb_data, covariates = covars, outcome = outcome ) Warning in .subset2(public_bind_env, &quot;initialize&quot;)(...): Missing Covariate Data Found. Imputing covariates using sl3_process_missing # examine it washb_task A sl3 Task with 4695 obs and these nodes: $covariates [1] &quot;tr&quot; &quot;fracode&quot; &quot;month&quot; &quot;aged&quot; [5] &quot;sex&quot; &quot;momage&quot; &quot;momedu&quot; &quot;momheight&quot; [9] &quot;hfiacat&quot; &quot;Nlt18&quot; &quot;Ncomp&quot; &quot;watmin&quot; [13] &quot;elec&quot; &quot;floor&quot; &quot;walls&quot; &quot;roof&quot; [17] &quot;asset_wardrobe&quot; &quot;asset_table&quot; &quot;asset_chair&quot; &quot;asset_khat&quot; [21] &quot;asset_chouki&quot; &quot;asset_tv&quot; &quot;asset_refrig&quot; &quot;asset_bike&quot; [25] &quot;asset_moto&quot; &quot;asset_sewmach&quot; &quot;asset_mobile&quot; &quot;delta_momage&quot; [29] &quot;delta_momheight&quot; $outcome [1] &quot;whz&quot; $id NULL $weights NULL $offset NULL This warning is important. The task just imputed missing covariates for us. Specifically, for each covariate column with missing values, sl3 uses the median to impute missing continuous covariates, and the mode to impute binary or categorical covariates. Also, for each covariate column with missing values, sl3 adds an additional column indicating whether or not the value was imputed, which is particularly handy when the missingness in the data might be informative. Also, notice that we did not specify the number of folds, or the loss function in the task. The default cross-validation scheme is V-fold, with the number of folds \\(V=10\\). 2. Make a super learner Now that we have defined our machine learning problem with the task, we are ready to “make” the machine learning algorithms. Learners have properties that indicate what features they support. We may use sl3_list_properties() to get a list of all properties supported by at least one learner. sl3_list_properties() [1] &quot;binomial&quot; &quot;categorical&quot; &quot;continuous&quot; [4] &quot;cv&quot; &quot;density&quot; &quot;ids&quot; [7] &quot;multivariate_outcome&quot; &quot;offset&quot; &quot;preprocessing&quot; [10] &quot;timeseries&quot; &quot;weights&quot; &quot;wrapper&quot; Since we have a continuous outcome, we may identify the learners that support this outcome type with sl3_list_learners(). sl3_list_learners(&quot;continuous&quot;) [1] &quot;Lrnr_arima&quot; &quot;Lrnr_bartMachine&quot; [3] &quot;Lrnr_bilstm&quot; &quot;Lrnr_condensier&quot; [5] &quot;Lrnr_dbarts&quot; &quot;Lrnr_expSmooth&quot; [7] &quot;Lrnr_glm&quot; &quot;Lrnr_glm_fast&quot; [9] &quot;Lrnr_glmnet&quot; &quot;Lrnr_grf&quot; [11] &quot;Lrnr_h2o_glm&quot; &quot;Lrnr_h2o_grid&quot; [13] &quot;Lrnr_hal9001&quot; &quot;Lrnr_HarmonicReg&quot; [15] &quot;Lrnr_lstm&quot; &quot;Lrnr_mean&quot; [17] &quot;Lrnr_nnls&quot; &quot;Lrnr_optim&quot; [19] &quot;Lrnr_pkg_SuperLearner&quot; &quot;Lrnr_pkg_SuperLearner_method&quot; [21] &quot;Lrnr_pkg_SuperLearner_screener&quot; &quot;Lrnr_randomForest&quot; [23] &quot;Lrnr_ranger&quot; &quot;Lrnr_rpart&quot; [25] &quot;Lrnr_rugarch&quot; &quot;Lrnr_solnp&quot; [27] &quot;Lrnr_stratified&quot; &quot;Lrnr_svm&quot; [29] &quot;Lrnr_tsDyn&quot; &quot;Lrnr_xgboost&quot; Now that we have an idea of some learners, we can construct them using the make_learner function. # choose base learners lrnr_glm &lt;- make_learner(Lrnr_glm) lrnr_mean &lt;- make_learner(Lrnr_mean) lrnr_ranger &lt;- make_learner(Lrnr_ranger) lrnr_glmnet &lt;- make_learner(Lrnr_glmnet) In order to assemble the library of learners, we need to “stack” them together. A Stack is a special learner and it has the same interface as all other learners. What makes a stack special is that it combines multiple learners by training them simultaneously, so that their predictions can be either combined or compared. stack &lt;- make_learner( Stack, lrnr_glm, lrnr_mean, lrnr_ranger, lrnr_glmnet ) We’re almost ready to super learn! Just a couple more necessary specifications. We will fit a non-negative least squares metalearner using Lrnr_nnls. Note that any learner can be used as a metalearner. Lrnr_nnls is a solid choice for a metalearner, since it creates a convex combination of the learners when combining them. metalearner &lt;- make_learner(Lrnr_nnls) Now that we have made a library/stack of base learners and a metalearner, we are ready to make the super learner. sl &lt;- make_learner(Lrnr_sl, learners = stack, metalearner = metalearner ) dt &lt;- delayed_learner_train(sl, washb_task) plot(dt, color = FALSE, height = &quot;400px&quot;, width = &quot;100%&quot;) 3. Train the super learner on the machine learning task The super learner algorithm fits a metalearner on the validation-set predictions in a cross-validated manner, thereby avoiding overfitting. This procedure is referred to as the continuous super learner. The cross-validation selector, or discrete super learner, is the base learner with the lowest cross-validated risk. Now we are ready to “train” our super learner on our sl3_task object, washb_task. sl_fit &lt;- sl$train(washb_task) 4. Obtain predicted values Now that we have fit the super learner, we are ready to obtain our predicted values, and we can also obtain a summary of the results. sl_preds &lt;- sl_fit$predict() head(sl_preds) [1] -0.5119413 -0.9092969 -0.7874024 -0.8119499 -0.6441899 -0.7166864 sl_fit$print() %&gt;% kable(digits = 3) %&gt;% kableExtra:::kable_styling(fixed_thead = T) %&gt;% scroll_box(width = &quot;100%&quot;, height = &quot;300px&quot;) [1] &quot;SuperLearner:&quot; List of 4 $ : chr &quot;Lrnr_glm_TRUE&quot; $ : chr &quot;Lrnr_mean&quot; $ : chr &quot;Lrnr_ranger_500_TRUE&quot; $ : chr &quot;Lrnr_glmnet_NULL_deviance_10_1_100_TRUE&quot; [1] &quot;Lrnr_nnls&quot; lrnrs weights 1: Lrnr_glm_TRUE 0.1559616 2: Lrnr_mean 0.0000000 3: Lrnr_ranger_500_TRUE 0.4688045 4: Lrnr_glmnet_NULL_deviance_10_1_100_TRUE 0.3828476 [1] &quot;Cross-validated risk (MSE, squared error loss):&quot; learner coefficients mean_risk SE_risk 1: Lrnr_glm_TRUE NA 1.018612 0.02380402 2: Lrnr_mean NA 1.065282 0.02502664 3: Lrnr_ranger_500_TRUE NA 1.013299 0.02347052 4: Lrnr_glmnet_NULL_deviance_10_1_100_TRUE NA 1.012624 0.02360021 5: SuperLearner NA 1.007224 0.02343379 fold_SD fold_min_risk fold_max_risk 1: 0.07799191 0.8956048 1.134940 2: 0.09191791 0.9264292 1.196647 3: 0.08426969 0.8708997 1.151924 4: 0.07913918 0.8826979 1.130236 5: 0.08118165 0.8718069 1.135255 learner coefficients mean_risk SE_risk fold_SD fold_min_risk fold_max_risk Lrnr_glm_TRUE NA 1.019 0.024 0.078 0.896 1.135 Lrnr_mean NA 1.065 0.025 0.092 0.926 1.197 Lrnr_ranger_500_TRUE NA 1.013 0.023 0.084 0.871 1.152 Lrnr_glmnet_NULL_deviance_10_1_100_TRUE NA 1.013 0.024 0.079 0.883 1.130 SuperLearner NA 1.007 0.023 0.081 0.872 1.135 3.4 Extensions In this section, we will introduce a few extensions of the sl3 framework, including Customizing learner hyperparameters Feature selection Cross-validated super learner Variable importance with sl3. 3.4.1 Customize Learner Hyperparameters We can customize learner hyperparameters to incorporate a diversity of different settings. We can also include learners from the SuperLearner R package. Documentation for the learners and their hyperparameters can be found in the sl3 Learners Reference. lrnr_ranger100 &lt;- make_learner(Lrnr_ranger, num.trees = 100) lrnr_gam &lt;- Lrnr_pkg_SuperLearner$new(&quot;SL.gam&quot;) lrnr_bayesglm &lt;- Lrnr_pkg_SuperLearner$new(&quot;SL.bayesglm&quot;) Let’s create a new stack with these new learners, so we may incorporate them in a new super learner. new_stack &lt;- make_learner( Stack, lrnr_glm, lrnr_mean, lrnr_glmnet, lrnr_ranger100, lrnr_gam, lrnr_bayesglm ) 3.4.2 Screening Covariates Why stop now? We can also select a subset of available covariates and pass only those variables to the modeling algorithm. This screening can be particularly important when there are many variables. Let’s see how this works. Consider screening covariates based on their correlation with the outcome (cor.test p-value \\(\\leq 0.1\\)). screen_cor &lt;- Lrnr_pkg_SuperLearner_screener$new(&quot;screen.corP&quot;) Now we need to “pipe” only those selected covariates to the modeling algorithm. To accomplish this, we need to make a Pipeline, which is a just set of learners to be fit sequentially, where the fit from one learner is used to define the task for the next learner. Note the difference between Pipeline and Stack here- one is necessary in order to define a sequential process, whereas the other one establishes parallel function of learners. cor_pipeline &lt;- make_learner(Pipeline, screen_cor, new_stack) Now, our learners will be preceded by a screening step. Let’s also consider the new_stack, just to compare how the feature selection methods perform in comparison to the methods without feature selection. Analogous to what we have seen before, we have to stack the pipeline and new_stack together, so we may use them as base learners in our super learner. fancy_stack &lt;- make_learner(Stack, cor_pipeline, new_stack) dt_new &lt;- delayed_learner_train(fancy_stack, washb_task) plot(dt_new, color = FALSE, height = &quot;400px&quot;, width = &quot;100%&quot;) Now we can Super Learn with this fancy base learner stack. # run sl and predict on WASH sl_fancy &lt;- Lrnr_sl$new(learners = fancy_stack, metalearner = metalearner) sl_fit_fancy &lt;- sl_fancy$train(washb_task) Warning in private$.train(subsetted_task, trained_sublearners): Lrnr_pkg_SuperLearner_SL.gam failed with message: loading required package (gam) failed. It will be removed from the stack Warning in private$.train(subsetted_task, trained_sublearners): Lrnr_pkg_SuperLearner_SL.bayesglm failed with message: loading required package (arm) failed. It will be removed from the stack Warning in private$.train(subsetted_task, trained_sublearners): Lrnr_pkg_SuperLearner_SL.gam failed with message: loading required package (gam) failed. It will be removed from the stack Warning in private$.train(subsetted_task, trained_sublearners): Lrnr_pkg_SuperLearner_SL.bayesglm failed with message: loading required package (arm) failed. It will be removed from the stack Warning in private$.train(subsetted_task, trained_sublearners): Lrnr_pkg_SuperLearner_SL.gam failed with message: loading required package (gam) failed. It will be removed from the stack Warning in private$.train(subsetted_task, trained_sublearners): Lrnr_pkg_SuperLearner_SL.bayesglm failed with message: loading required package (arm) failed. It will be removed from the stack Warning in private$.train(subsetted_task, trained_sublearners): Lrnr_pkg_SuperLearner_SL.gam failed with message: loading required package (gam) failed. It will be removed from the stack Warning in private$.train(subsetted_task, trained_sublearners): Lrnr_pkg_SuperLearner_SL.bayesglm failed with message: loading required package (arm) failed. It will be removed from the stack Warning in private$.train(subsetted_task, trained_sublearners): Lrnr_pkg_SuperLearner_SL.gam failed with message: loading required package (gam) failed. It will be removed from the stack Warning in private$.train(subsetted_task, trained_sublearners): Lrnr_pkg_SuperLearner_SL.bayesglm failed with message: loading required package (arm) failed. It will be removed from the stack Warning in private$.train(subsetted_task, trained_sublearners): Lrnr_pkg_SuperLearner_SL.gam failed with message: loading required package (gam) failed. It will be removed from the stack Warning in private$.train(subsetted_task, trained_sublearners): Lrnr_pkg_SuperLearner_SL.bayesglm failed with message: loading required package (arm) failed. It will be removed from the stack Warning in private$.train(subsetted_task, trained_sublearners): Lrnr_pkg_SuperLearner_SL.gam failed with message: loading required package (gam) failed. It will be removed from the stack Warning in private$.train(subsetted_task, trained_sublearners): Lrnr_pkg_SuperLearner_SL.bayesglm failed with message: loading required package (arm) failed. It will be removed from the stack Warning in private$.train(subsetted_task, trained_sublearners): Lrnr_pkg_SuperLearner_SL.gam failed with message: loading required package (gam) failed. It will be removed from the stack Warning in private$.train(subsetted_task, trained_sublearners): Lrnr_pkg_SuperLearner_SL.bayesglm failed with message: loading required package (arm) failed. It will be removed from the stack Warning in private$.train(subsetted_task, trained_sublearners): Lrnr_pkg_SuperLearner_SL.gam failed with message: loading required package (gam) failed. It will be removed from the stack Warning in private$.train(subsetted_task, trained_sublearners): Lrnr_pkg_SuperLearner_SL.bayesglm failed with message: loading required package (arm) failed. It will be removed from the stack Warning in private$.train(subsetted_task, trained_sublearners): Lrnr_pkg_SuperLearner_SL.gam failed with message: loading required package (gam) failed. It will be removed from the stack Warning in private$.train(subsetted_task, trained_sublearners): Lrnr_pkg_SuperLearner_SL.bayesglm failed with message: loading required package (arm) failed. It will be removed from the stack Warning in private$.train(subsetted_task, trained_sublearners): Lrnr_pkg_SuperLearner_SL.gam failed with message: loading required package (gam) failed. It will be removed from the stack Warning in private$.train(subsetted_task, trained_sublearners): Lrnr_pkg_SuperLearner_SL.bayesglm failed with message: loading required package (arm) failed. It will be removed from the stack Warning in private$.train(subsetted_task, trained_sublearners): Lrnr_pkg_SuperLearner_SL.gam failed with message: loading required package (gam) failed. It will be removed from the stack Warning in private$.train(subsetted_task, trained_sublearners): Lrnr_pkg_SuperLearner_SL.bayesglm failed with message: loading required package (arm) failed. It will be removed from the stack Warning in private$.train(subsetted_task, trained_sublearners): Lrnr_pkg_SuperLearner_SL.gam failed with message: loading required package (gam) failed. It will be removed from the stack Warning in private$.train(subsetted_task, trained_sublearners): Lrnr_pkg_SuperLearner_SL.bayesglm failed with message: loading required package (arm) failed. It will be removed from the stack Warning in private$.train(subsetted_task, trained_sublearners): Lrnr_pkg_SuperLearner_SL.gam failed with message: loading required package (gam) failed. It will be removed from the stack Warning in private$.train(subsetted_task, trained_sublearners): Lrnr_pkg_SuperLearner_SL.bayesglm failed with message: loading required package (arm) failed. It will be removed from the stack Warning in private$.train(subsetted_task, trained_sublearners): Lrnr_pkg_SuperLearner_SL.gam failed with message: loading required package (gam) failed. It will be removed from the stack Warning in private$.train(subsetted_task, trained_sublearners): Lrnr_pkg_SuperLearner_SL.bayesglm failed with message: loading required package (arm) failed. It will be removed from the stack Warning in private$.train(subsetted_task, trained_sublearners): Lrnr_pkg_SuperLearner_SL.gam failed with message: loading required package (gam) failed. It will be removed from the stack Warning in private$.train(subsetted_task, trained_sublearners): Lrnr_pkg_SuperLearner_SL.bayesglm failed with message: loading required package (arm) failed. It will be removed from the stack Warning in private$.train(subsetted_task, trained_sublearners): Lrnr_pkg_SuperLearner_SL.gam failed with message: loading required package (gam) failed. It will be removed from the stack Warning in private$.train(subsetted_task, trained_sublearners): Lrnr_pkg_SuperLearner_SL.bayesglm failed with message: loading required package (arm) failed. It will be removed from the stack Warning in private$.train(subsetted_task, trained_sublearners): Lrnr_pkg_SuperLearner_SL.gam failed with message: loading required package (gam) failed. It will be removed from the stack Warning in private$.train(subsetted_task, trained_sublearners): Lrnr_pkg_SuperLearner_SL.bayesglm failed with message: loading required package (arm) failed. It will be removed from the stack Warning in private$.train(subsetted_task, trained_sublearners): Lrnr_pkg_SuperLearner_SL.gam failed with message: loading required package (gam) failed. It will be removed from the stack Warning in private$.train(subsetted_task, trained_sublearners): Lrnr_pkg_SuperLearner_SL.bayesglm failed with message: loading required package (arm) failed. It will be removed from the stack Warning in private$.train(subsetted_task, trained_sublearners): Lrnr_pkg_SuperLearner_SL.gam failed with message: loading required package (gam) failed. It will be removed from the stack Warning in private$.train(subsetted_task, trained_sublearners): Lrnr_pkg_SuperLearner_SL.bayesglm failed with message: loading required package (arm) failed. It will be removed from the stack Warning in private$.train(subsetted_task, trained_sublearners): Lrnr_pkg_SuperLearner_SL.gam failed with message: loading required package (gam) failed. It will be removed from the stack Warning in private$.train(subsetted_task, trained_sublearners): Lrnr_pkg_SuperLearner_SL.bayesglm failed with message: loading required package (arm) failed. It will be removed from the stack Warning in private$.train(subsetted_task, trained_sublearners): Lrnr_pkg_SuperLearner_SL.gam failed with message: loading required package (gam) failed. It will be removed from the stack Warning in private$.train(subsetted_task, trained_sublearners): Lrnr_pkg_SuperLearner_SL.bayesglm failed with message: loading required package (arm) failed. It will be removed from the stack sl_fit_fancy$print() %&gt;% kable(digits = 3) %&gt;% kableExtra:::kable_styling(fixed_thead = T) %&gt;% scroll_box(width = &quot;100%&quot;, height = &quot;300px&quot;) [1] &quot;SuperLearner:&quot; List of 2 $ : chr &quot;Pipeline(Lrnr_pkg_SuperLearner_screener_screen.corP-&gt;Stack)&quot; $ : chr &quot;Stack&quot; [1] &quot;Lrnr_nnls&quot; lrnrs 1: Pipeline(Lrnr_pkg_SuperLearner_screener_screen.corP-&gt;Stack)_Lrnr_glm_TRUE 2: Pipeline(Lrnr_pkg_SuperLearner_screener_screen.corP-&gt;Stack)_Lrnr_mean 3: Pipeline(Lrnr_pkg_SuperLearner_screener_screen.corP-&gt;Stack)_Lrnr_glmnet_NULL_deviance_10_1_100_TRUE 4: Pipeline(Lrnr_pkg_SuperLearner_screener_screen.corP-&gt;Stack)_Lrnr_ranger_100_TRUE 5: Stack_Lrnr_glm_TRUE 6: Stack_Lrnr_mean 7: Stack_Lrnr_glmnet_NULL_deviance_10_1_100_TRUE 8: Stack_Lrnr_ranger_100_TRUE weights 1: 0.13014649 2: 0.00000000 3: 0.37473552 4: 0.09107638 5: 0.03562427 6: 0.00000000 7: 0.00000000 8: 0.37272169 [1] &quot;Cross-validated risk (MSE, squared error loss):&quot; learner 1: Pipeline(Lrnr_pkg_SuperLearner_screener_screen.corP-&gt;Stack)_Lrnr_glm_TRUE 2: Pipeline(Lrnr_pkg_SuperLearner_screener_screen.corP-&gt;Stack)_Lrnr_mean 3: Pipeline(Lrnr_pkg_SuperLearner_screener_screen.corP-&gt;Stack)_Lrnr_glmnet_NULL_deviance_10_1_100_TRUE 4: Pipeline(Lrnr_pkg_SuperLearner_screener_screen.corP-&gt;Stack)_Lrnr_ranger_100_TRUE 5: Stack_Lrnr_glm_TRUE 6: Stack_Lrnr_mean 7: Stack_Lrnr_glmnet_NULL_deviance_10_1_100_TRUE 8: Stack_Lrnr_ranger_100_TRUE 9: SuperLearner coefficients mean_risk SE_risk fold_SD fold_min_risk fold_max_risk 1: NA 1.015128 0.02363317 0.07629401 0.8927540 1.131594 2: NA 1.065282 0.02502664 0.09191791 0.9264292 1.196647 3: NA 1.011983 0.02358522 0.07875459 0.8822292 1.130815 4: NA 1.023987 0.02363897 0.08375648 0.8784260 1.146881 5: NA 1.018612 0.02380402 0.07799191 0.8956048 1.134940 6: NA 1.065282 0.02502664 0.09191791 0.9264292 1.196647 7: NA 1.012529 0.02359436 0.08010393 0.8825757 1.130066 8: NA 1.015605 0.02362124 0.08309781 0.8885222 1.156559 9: NA 1.006139 0.02344053 0.08037150 0.8763700 1.133361 learner coefficients mean_risk SE_risk fold_SD fold_min_risk fold_max_risk Pipeline(Lrnr_pkg_SuperLearner_screener_screen.corP-&gt;Stack)_Lrnr_glm_TRUE NA 1.015 0.024 0.076 0.893 1.132 Pipeline(Lrnr_pkg_SuperLearner_screener_screen.corP-&gt;Stack)_Lrnr_mean NA 1.065 0.025 0.092 0.926 1.197 Pipeline(Lrnr_pkg_SuperLearner_screener_screen.corP-&gt;Stack)_Lrnr_glmnet_NULL_deviance_10_1_100_TRUE NA 1.012 0.024 0.079 0.882 1.131 Pipeline(Lrnr_pkg_SuperLearner_screener_screen.corP-&gt;Stack)_Lrnr_ranger_100_TRUE NA 1.024 0.024 0.084 0.878 1.147 Stack_Lrnr_glm_TRUE NA 1.019 0.024 0.078 0.896 1.135 Stack_Lrnr_mean NA 1.065 0.025 0.092 0.926 1.197 Stack_Lrnr_glmnet_NULL_deviance_10_1_100_TRUE NA 1.013 0.024 0.080 0.883 1.130 Stack_Lrnr_ranger_100_TRUE NA 1.016 0.024 0.083 0.889 1.157 SuperLearner NA 1.006 0.023 0.080 0.876 1.133 3.4.3 Cross-validated Super Learner We can cross-validate the super learner to see how well the super learner performs on unseen data. This requires an “external” layer of cross-validation, also called nested cross-validation, which involves setting aside a separate holdout sample that we don’t use to fit the super learner. This external cross-validation procedure may also incorporate 10 folds, which is the default in sl3. However, we will incorporate 2 outer folds of cross-validation, for computational efficiency. washb_task_new &lt;- make_sl3_Task( data = washb_data, covariates = covars, outcome = outcome, folds = make_folds(washb_data, fold_fun = folds_vfold, V = 2) ) Warning in .subset2(public_bind_env, &quot;initialize&quot;)(...): Missing Covariate Data Found. Imputing covariates using sl3_process_missing CVsl_fancy &lt;- CV_lrnr_sl(sl_fit, washb_task_new, loss_squared_error) CVsl_fancy %&gt;% kable(digits = 3) %&gt;% kableExtra:::kable_styling(fixed_thead = T) %&gt;% scroll_box(width = &quot;100%&quot;, height = &quot;300px&quot;) learner coefficients mean_risk SE_risk fold_SD fold_min_risk fold_max_risk Lrnr_glm_TRUE NA 1.054 0.029 0.021 1.039 1.069 Lrnr_mean NA 1.066 0.025 0.026 1.047 1.084 Lrnr_ranger_500_TRUE NA 1.018 0.024 0.008 1.013 1.024 Lrnr_glmnet_NULL_deviance_10_1_100_TRUE NA 1.026 0.024 0.009 1.019 1.033 SuperLearner NA 1.018 0.024 0.010 1.011 1.025 3.5 Variable Importance Analysis with sl3 Variable importance can be interesting and informative. The sl3 varimp function returns a table with variables listed in decreasing order of importance, in which the measure of importance is based on a risk difference between the learner fit with a permuted covariate and the learner fit with the true covariate, across all covariates. In this manner, the larger the risk difference, the more important the variable is in the prediction. Let’s explore the sl3 variable importance measurements for the washb data. washb_varimp &lt;- varimp(sl_fit_fancy, loss_squared_error) washb_varimp %&gt;% kable(digits = 3) %&gt;% kableExtra:::kable_styling(fixed_thead = T) %&gt;% scroll_box(width = &quot;100%&quot;, height = &quot;300px&quot;) X risk_diff aged 0.026 momedu 0.013 month 0.006 tr 0.005 momheight 0.005 asset_refrig 0.004 asset_chouki 0.003 Nlt18 0.003 asset_table 0.002 elec 0.001 asset_moto 0.001 asset_chair 0.001 asset_tv 0.001 asset_khat 0.001 asset_wardrobe 0.001 momage 0.000 asset_sewmach 0.000 sex 0.000 floor 0.000 delta_momage 0.000 hfiacat 0.000 roof 0.000 walls 0.000 fracode 0.000 watmin 0.000 delta_momheight -0.001 asset_bike -0.001 asset_mobile -0.001 Ncomp -0.002 3.6 Exercise 3.6.1 Predicting Myocardial Infarction with sl3 Answer the questions below to predict myocardial infarction (mi) using the available covariate data. Special thanks to David Benkeser at Emory for making the chspred data (loaded below) accessible. # load the data set db_data &lt;- url(&quot;https://raw.githubusercontent.com/benkeser/sllecture/master/chspred.csv&quot;) chspred &lt;- read_csv(file = db_data, col_names = TRUE) Parsed with column specification: cols( .default = col_double() ) See spec(...) for full column specifications. # take a quick peek head(chspred, 3) %&gt;% kable(digits = 3) %&gt;% kableExtra:::kable_styling(fixed_thead = T) %&gt;% scroll_box(width = &quot;100%&quot;, height = &quot;300px&quot;) waist alcoh hdl beta smoke ace ldl bmi aspirin gend age estrgn glu ins cysgfr dm fetuina whr hsed race logcystat logtrig logcrp logcre health logkcal sysbp mi 110.164 0.000 66.497 0 0 1 114.216 27.997 0 0 73.518 0 159.931 70.334 75.008 1 0.175 1.169 1 1 -0.342 5.406 2.013 -0.674 0 4.393 177.135 0 89.976 0.000 50.065 0 0 0 103.777 20.893 0 0 61.772 0 153.389 33.969 82.743 1 0.572 0.901 0 0 -0.085 4.859 3.293 -0.555 1 6.207 136.374 0 106.194 8.417 40.506 0 0 0 165.716 28.455 1 1 72.931 0 121.715 -17.302 74.699 0 0.352 1.180 0 1 -0.445 4.509 0.301 -0.012 0 6.732 135.199 0 Create an sl3 task, setting myocardial infarction mi as the outcome and using all available covariate data. Make a library of 10 base learning algorithms. Customize hyperparameters for at least two of your learners. Feel free to use learners from sl3 or SuperLearner. Incorporate feature selection. Choose an appropriate learner to fit the metalearning step. Justify your selection of metalearner and base learners. With the metalearner and base learners, make the super learner and train it on the task. Print your super learner fit by calling print() with $. Which learner is the discrete super learner, and what is its cross-validated risk? What is the cross-validated risk of the continuous super learner? 3.7 Concluding Remarks The general ensemble learning approach of super learner can be applied to a diversity of estimation and prediction problems that can be defined by a loss function. We just discussed conditional mean estimation, and in the appendix we delve into prediction of a conditional density, and the optimal individualized treatment rule. Plug-in estimators of the estimand are desirable because a plug-in estimator respects both the local and global constraints of the statistical model. We could just plug-in the estimator returned by Super Learner; however, this is problematic because the Super Learner estimators are trading off bias and variance in an optimal way and as a result their bias is essentially the rate of convergence of these algorithms, which is always slower than \\(1/\\sqrt{n}\\). Therefore, if we plug-in the estimator returned by super learner into the target parameter mapping, we would end up with an estimator which has the same bias as what we plugged in, which is greater than \\(1/\\sqrt{n}\\). Thus, we end up with an estimator which is not asymptotically normal, since it does not converge to the estimand at \\(1/\\sqrt{n}\\) rate. An asymptotically linear estimator has no meaningful bias ($ &lt; 1/$), and can be written as an empirical mean in first order of a function of the data, the influence curve, plus some negligible remainder term. Once an estimator is asymptotically linear with an influence curve it’s normally distributed, so the standardized estimator converges to a normal distribution with mean 0 and variance is the variance of the influence curve. Thus, it is advantageous to construct asymptotically linear estimators since they permit formal statistical inference. Among the class of regular asymptotically linear estimators, there is an optimal estimator which is an efficient estimator, and that’s the one with influence curve equal to the canonical gradient of the path-wise derivative of the target parameter. The canonical gradient is the direction of the path through the data distribution where the parameter is steepest. An estimator is efficient if and only if is asymptotically linear with influence curve equal to the canonical gradient. One can calculate the canonical gradient with the statistical model and the statistical target parameter. Techniques for calculating the canonical gradient entail projecting an initial gradient on the tangent space of the model at the particular distribution in the model in which you want to calculate the canonical gradient. Now we know what it takes to construct an efficient estimator. Namely, we need to construct an estimator which is asymptotically linear with influence curve the canonical gradient. There are three general classes of estimators which succeed in constructing asymptotically linear estimators: (1) the one-step estimator, but it is not a plug-in estimator; (2) the targeted maximum likelihood estimator, which is a super learner targeted towards the target parameter and it is a plug-in estimator; and (3) estimating equation based estimators, which use the canonical gradient but as an estimating function in the target parameter. In the chapters that follow, we focus on the targeted maximum likelihood estimator and the targeted minimum loss-based estimator, both referred to as TMLE. 3.8 Appendix 3.8.1 Exercise solution Here’s a potential solution to the exercise above. chspred_task &lt;- make_sl3_Task( data = chspred, covariates = head(colnames(chspred), -1), outcome = &quot;mi&quot; ) glm_learner &lt;- Lrnr_glm$new() lasso_learner &lt;- Lrnr_glmnet$new(alpha = 1) ridge_learner &lt;- Lrnr_glmnet$new(alpha = 0) enet_learner &lt;- Lrnr_glmnet$new(alpha = 0.5) curated_glm_learner &lt;- Lrnr_glm_fast$new(formula = &quot;mi ~ smoke + beta + waist&quot;) mean_learner &lt;- Lrnr_mean$new() # That is one mean learner! glm_fast_learner &lt;- Lrnr_glm_fast$new() ranger_learner &lt;- Lrnr_ranger$new() svm_learner &lt;- Lrnr_svm$new() xgb_learner &lt;- Lrnr_xgboost$new() screen_cor &lt;- Lrnr_pkg_SuperLearner_screener$new(&quot;screen.corP&quot;) glm_pipeline &lt;- make_learner(Pipeline, screen_cor, glm_learner) ranger_pipeline &lt;- make_learner(Pipeline, screen_cor, ranger_learner) stack &lt;- make_learner( Stack, glm_pipeline, ranger_pipeline, glm_learner, lasso_learner, ridge_learner, enet_learner, curated_glm_learner, mean_learner, glm_fast_learner, ranger_learner, svm_learner, xgb_learner ) metalearner &lt;- make_learner(Lrnr_nnls) sl &lt;- Lrnr_sl$new( learners = stack, metalearner = metalearner ) sl_fit &lt;- sl$train(task) sl_fit$print() %&gt;% kable(digits = 3) %&gt;% kableExtra:::kable_styling(fixed_thead = T) %&gt;% scroll_box(width = &quot;100%&quot;, height = &quot;300px&quot;) References "],
["the-tmle-framework.html", "Chapter 4 The TMLE Framework 4.1 Learning Objectives 4.2 Example: tmle3 for ATE 4.3 tmle3 Components 4.4 Fitting tmle3 with multiple parameters 4.5 Exercise 4.6 Summary", " Chapter 4 The TMLE Framework Jeremy Coyle Based on the tmle3 R package. 4.1 Learning Objectives Use tmle3 to estimate an Average Treatment Effect (ATE) Understand tmle3 “Specs” Fit tmle3 for a custom set of parameters Use the delta method to estimate transformations of parameters 4.2 Example: tmle3 for ATE We’ll illustrate the most basic use of TMLE using the WASH Benefits data introduced earlier and estimating an Average Treatment Effect (ATE). As a reminder, the ATE is identified with the following statistical parameter (under assumptions): \\(ATE = \\mathbb{E}_0(Y(1)-Y(0)) = \\mathbb{E}_0 \\left(\\mathbb{E}_0[Y \\mid A=1,W] - \\mathbb{E}_0[Y \\mid A=0,W] \\right),\\) 4.2.1 Load the Data We’ll use the same WASH Benefits data as the earlier chapters: library(here) library(data.table) library(tmle3) library(sl3) washb_data &lt;- fread(here(&quot;data&quot;, &quot;washb_data.csv&quot;), stringsAsFactors = TRUE) 4.2.2 Define the variable roles We’ll use the common W (covariates), A (treatment/intervention), Y (outcome) data structure. tmle3 needs to know what variables in the dataset correspond to each of these roles. We use a list of character vectors to tell it. We call this a “Node List” as it corresponds to the nodes in a Directed Acyclic Graph (DAG), a way of displaying causal relationships between variables. node_list &lt;- list( W = c( &quot;month&quot;, &quot;aged&quot;, &quot;sex&quot;, &quot;momage&quot;, &quot;momedu&quot;, &quot;momheight&quot;, &quot;hfiacat&quot;, &quot;Nlt18&quot;, &quot;Ncomp&quot;, &quot;watmin&quot;, &quot;elec&quot;, &quot;floor&quot;, &quot;walls&quot;, &quot;roof&quot;, &quot;asset_wardrobe&quot;, &quot;asset_table&quot;, &quot;asset_chair&quot;, &quot;asset_khat&quot;, &quot;asset_chouki&quot;, &quot;asset_tv&quot;, &quot;asset_refrig&quot;, &quot;asset_bike&quot;, &quot;asset_moto&quot;, &quot;asset_sewmach&quot;, &quot;asset_mobile&quot; ), A = &quot;tr&quot;, Y = &quot;whz&quot; ) 4.2.3 Handle Missingness Currently, missingness in tmle3 is handled in a fairly simple way: Missing covariates are median (for continuous) or mode (for discrete) imputed, and additional covariates indicating imputation are generated Observations missing either treatment or outcome variables are excluded. We plan to implement IPCW-TMLE to more efficiently handle missingness in the treatment and outcome variables. These steps are implemented in the process_missing function in tmle3: processed &lt;- process_missing(washb_data, node_list) washb_data &lt;- processed$data node_list &lt;- processed$node_list 4.2.4 Create a “Spec” Object tmle3 is general, and allows most components of the TMLE procedure to be specified in a modular way. However, most end-users will not be interested in manually specifying all of these components. Therefore, tmle3 implements a tmle3_Spec object that bundles a set ofcomponents into a specification that, with minimal additional detail, can be run by an end-user. We’ll start with using one of the specs, and then work our way down into the internals of tmle3. ate_spec &lt;- tmle_ATE( treatment_level = &quot;Nutrition + WSH&quot;, control_level = &quot;Control&quot; ) 4.2.5 Define the learners Currently, the only other thing a user must define are the sl3 learners used to estimate the relevant factors of the likelihood: Q and g. This takes the form of a list of sl3 learners, one for each likelihood factor to be estimated with sl3: # choose base learners lrnr_mean &lt;- make_learner(Lrnr_mean) lrnr_xgboost &lt;- make_learner(Lrnr_xgboost) # define metalearners appropriate to data types ls_metalearner &lt;- make_learner(Lrnr_nnls) mn_metalearner &lt;- make_learner(Lrnr_solnp, metalearner_linear_multinomial, loss_loglik_multinomial) sl_Y &lt;- Lrnr_sl$new(learners = list(lrnr_mean, lrnr_xgboost), metalearner = ls_metalearner) sl_A &lt;- Lrnr_sl$new(learners = list(lrnr_mean, lrnr_xgboost), metalearner = mn_metalearner) learner_list &lt;- list(A = sl_A, Y = sl_Y) Here, we use a Super Learner as defined in the previous chapter. In the future, we plan to include reasonable defaults learners. 4.2.6 Fit the TMLE We now have everything we need to fit the tmle using tmle3: tmle_fit &lt;- tmle3(ate_spec, washb_data, node_list, learner_list) 4.2.7 Evaluate the Estimates We can see the summary results by printing the fit object. Alternatively, we can extra results from the summary by indexing into it: print(tmle_fit) A tmle3_Fit that took 1 step(s) type param init_est tmle_est 1: ATE ATE[Y_{A=Nutrition + WSH}-Y_{A=Control}] 0.00245121 -0.002106507 se lower upper psi_transformed lower_transformed 1: 0.05046828 -0.1010225 0.0968095 -0.002106507 -0.1010225 upper_transformed 1: 0.0968095 estimates &lt;- tmle_fit$summary$psi_transformed print(estimates) [1] -0.002106507 4.3 tmle3 Components Now that we’ve successfully used a spec to obtain a TML estimate, let’s look under the hood at the components. The spec has a number of functions that generate the objects necessary to define and fit a TMLE. 4.3.1 tmle3_task First is, a tmle3_Task, analogous to an sl3_Task, containing the data we’re fitting the TMLE to, as well as an NP-SEM generated from the node_list defined above, describing the variables and their relationships. tmle_task &lt;- ate_spec$make_tmle_task(washb_data, node_list) tmle_task$npsem $W tmle3_Node: W Variables: month, aged, sex, momedu, hfiacat, Nlt18, Ncomp, watmin, elec, floor, walls, roof, asset_wardrobe, asset_table, asset_chair, asset_khat, asset_chouki, asset_tv, asset_refrig, asset_bike, asset_moto, asset_sewmach, asset_mobile, momage, momheight, delta_momage, delta_momheight Parents: $A tmle3_Node: A Variables: tr Parents: W $Y tmle3_Node: Y Variables: whz Parents: A, W 4.3.2 Initial Likelihood Next, is an object representing the likelihood, factorized according to the NPSEM described above: initial_likelihood &lt;- ate_spec$make_initial_likelihood( tmle_task, learner_list ) print(initial_likelihood) W: Lf_emp A: LF_fit Y: LF_fit These components of the likelihood indicate how the factors were estimated: the marginal distribution of \\(W\\) was estimated using NP-MLE, and the conditional distributions of \\(A\\) and \\(Y\\) were estimated using sl3 fits (as defined with the learner_list) above. We can use this in tandem with the tmle_task object to obtain likelihood estimates for each observation: initial_likelihood$get_likelihoods(tmle_task) W A Y 1: 0.0002129925 0.2472163 -0.6554496 2: 0.0002129925 0.2554077 -0.6294726 3: 0.0002129925 0.2607521 -0.6177330 4: 0.0002129925 0.2859331 -0.5982576 5: 0.0002129925 0.2541593 -0.5438878 --- 4691: 0.0002129925 0.1363791 -0.4670929 4692: 0.0002129925 0.1259461 -0.4851799 4693: 0.0002129925 0.1262377 -0.5664199 4694: 0.0002129925 0.1845629 -0.8055595 4695: 0.0002129925 0.1304244 -0.5410904 4.3.3 Targeted Likelihood (updater) We also need to define a “Targeted Likelihood” object. This is a special type of likelihood that is able to be updated using an tmle3_Update object. This object defines the update strategy (e.g. submodel, loss function, CV-TMLE or not, etc). targeted_likelihood &lt;- Targeted_Likelihood$new(initial_likelihood) When constructing the targeted likelihood, you can specify different update options. See the documentation for tmle3_Update for details of the different options. For example, you can disable CV-TMLE (the default in tmle3) as follows: targeted_likelihood_no_cv &lt;- Targeted_Likelihood$new(initial_likelihood, updater = list(cvtmle = FALSE) ) 4.3.4 Parameter Mapping Finally, we need to define the parameters of interest. Here, the spec defines a single parameter, the ATE. In the next section, we’ll see how to add additional parameters. tmle_params &lt;- ate_spec$make_params(tmle_task, targeted_likelihood) print(tmle_params) [[1]] Param_ATE: ATE[Y_{A=Nutrition + WSH}-Y_{A=Control}] 4.3.5 Putting it all together Having used the spec to manually generate all these components, we can now manually fit a tmle3: tmle_fit_manual &lt;- fit_tmle3( tmle_task, targeted_likelihood, tmle_params, targeted_likelihood$updater ) print(tmle_fit_manual) A tmle3_Fit that took 1 step(s) type param init_est tmle_est 1: ATE ATE[Y_{A=Nutrition + WSH}-Y_{A=Control}] 0.002323895 0.002362477 se lower upper psi_transformed lower_transformed 1: 0.05083292 -0.09726821 0.1019932 0.002362477 -0.09726821 upper_transformed 1: 0.1019932 The result is equivalent to fitting using the tmle3 function as above. 4.4 Fitting tmle3 with multiple parameters Above, we fit a tmle3 with just one parameter. tmle3 also supports fitting multiple parameters simultaneously. To illustrate this, we’ll use the tmle_TSM_all spec: tsm_spec &lt;- tmle_TSM_all() targeted_likelihood &lt;- Targeted_Likelihood$new(initial_likelihood) all_tsm_params &lt;- tsm_spec$make_params(tmle_task, targeted_likelihood) print(all_tsm_params) [[1]] Param_TSM: E[Y_{A=Control}] [[2]] Param_TSM: E[Y_{A=Handwashing}] [[3]] Param_TSM: E[Y_{A=Nutrition}] [[4]] Param_TSM: E[Y_{A=Nutrition + WSH}] [[5]] Param_TSM: E[Y_{A=Sanitation}] [[6]] Param_TSM: E[Y_{A=WSH}] [[7]] Param_TSM: E[Y_{A=Water}] This spec generates a Treatment Specific Mean (TSM) for each level of the exposure variable. Note that we must first generate a new targeted likelihood, as the old one was targeted to the ATE. However, we can recycle the initial likelihood we fit above, saving us a super learner step. 4.4.1 Delta Method We can also define parameters based on Delta Method Transformations of other parameters. For instance, we can estimate a ATE using the delta method and two of the above TSM parameters: ate_param &lt;- define_param( Param_delta, targeted_likelihood, delta_param_ATE, list(all_tsm_params[[1]], all_tsm_params[[4]]) ) print(ate_param) Param_delta: E[Y_{A=Nutrition + WSH}] - E[Y_{A=Control}] This can similarly be used to estimate other derived parameters like Relative Risks, and Population Attributable Risks 4.4.2 Fit We can now fit a TMLE simultaneously for all TSM parameters, as well as the above defined ATE parameter all_params &lt;- c(all_tsm_params, ate_param) tmle_fit_multiparam &lt;- fit_tmle3( tmle_task, targeted_likelihood, all_params, targeted_likelihood$updater ) print(tmle_fit_multiparam) A tmle3_Fit that took 1 step(s) type param init_est tmle_est 1: TSM E[Y_{A=Control}] -0.592508351 -0.621637413 2: TSM E[Y_{A=Handwashing}] -0.604458770 -0.642992315 3: TSM E[Y_{A=Nutrition}] -0.600190624 -0.617130590 4: TSM E[Y_{A=Nutrition + WSH}] -0.590184456 -0.619129538 5: TSM E[Y_{A=Sanitation}] -0.586207322 -0.589480520 6: TSM E[Y_{A=WSH}] -0.530188953 -0.447598512 7: TSM E[Y_{A=Water}] -0.575086050 -0.527907686 8: ATE E[Y_{A=Nutrition + WSH}] - E[Y_{A=Control}] 0.002323895 0.002507875 se lower upper psi_transformed lower_transformed 1: 0.02992143 -0.68028233 -0.5629925 -0.621637413 -0.68028233 2: 0.04205216 -0.72541304 -0.5605716 -0.642992315 -0.72541304 3: 0.04301902 -0.70144632 -0.5328149 -0.617130590 -0.70144632 4: 0.04119816 -0.69987645 -0.5383826 -0.619129538 -0.69987645 5: 0.04224105 -0.67227147 -0.5066896 -0.589480520 -0.67227147 6: 0.04525533 -0.53629732 -0.3588997 -0.447598512 -0.53629732 7: 0.03898959 -0.60432587 -0.4514895 -0.527907686 -0.60432587 8: 0.05082000 -0.09709749 0.1021132 0.002507875 -0.09709749 upper_transformed 1: -0.5629925 2: -0.5605716 3: -0.5328149 4: -0.5383826 5: -0.5066896 6: -0.3588997 7: -0.4514895 8: 0.1021132 4.5 Exercise We’ll use data from the Collaborative Perinatal Project (CPP), available in the sl3 package. To simplify this example, we define a binary intervention variable, parity01 – an indicator of having one or more children before the current child and a binary outcome, haz01 – an indicator of having an above average height for age. # load the data set data(cpp) cpp &lt;- cpp[!is.na(cpp[, &quot;haz&quot;]), ] cpp$parity01 &lt;- as.numeric(cpp$parity &gt; 0) cpp[is.na(cpp)] &lt;- 0 cpp$haz01 &lt;- as.numeric(cpp$haz &gt; 0) We’re interested in using this simplified data to estimate an Average Treatment Effect (ATE): \\[\\Psi(P_0) = E_0(E_0[Y|A=1,W]-E_0[Y|A=0,W])\\] Define the variable roles \\((W,A,Y)\\) by creating a list of these nodes. Include the following baseline covariates in \\(W\\): apgar1, apgar5, gagebrth, mage, meducyrs, sexn. Both \\(A\\) and \\(Y\\) are specified above. Implement a tmle3_Spec object that bundles a set of components into a specification. We are interested in specifying the ATE, for which we use tmle_ATE(). Define sl3 base learners to estimate \\(Q = E(Y \\mid A,Y)\\) and \\(g=P(A \\mid W)\\). Define metalearners appropriate for data types. Define a Super Learner for estimating \\(Q\\) and another for estimating \\(g\\). Create a list of the two Super Learners defined in Step 5 and call this object. The list names should be A (defining the Super Learner for estimating \\(g\\)) and Y (defining the Super Learner for estimating \\(Q\\)). Fit the tmle with the tmle3 function. At a minimum, this function will requires specification of (1) the tmle3_Spec, which we defined in Step 2; the data; (3) the list of nodes, which defined the varible roles in Step 1; and (4) the list of Super Learners for estimating \\(g\\) and \\(Q\\), which we defined in Step 6. Note: Like before, you will need to make a data copy to deal with data.table weirdness (cpp2 &lt;- data.table::copy(cpp)) and use cpp2 to fit the tmle. Interpret the tmle3 fit both causally and statistically. 4.6 Summary tmle3 is a general purpose framework for generating TML estimates. The easiest way to use it is to use a predefined spec, allowing you to just fill in the blanks for the data, variable roles, and sl3 learners. However, digging under the hood allows users to specify a wide range of TMLEs. In the next sections, we’ll see how this framework can be used to estimate advanced parameters such as optimal treatments and shift interventions. "],
["optimal-individualized-treatment-regimes.html", "Chapter 5 Optimal Individualized Treatment Regimes 5.1 Learning Objectives 5.2 Introduction to Optimal Individualized Interventions 5.3 Data Structure and Notation 5.4 Defining the Causal Effect of an Optimal Individualized Intervention 5.5 Interpreting the Causal Effect of an Optimal Individualized Intervention 5.6 Evaluating the Causal Effect of an OIT with Binary Treatment 5.7 Evaluating the Causal Effect of an optimal ITR with Categorical Treatment 5.8 Extensions to Causal Effect of an OIT 5.9 Variable Importance Analysis with OIT 5.10 Real World Data and tmle3mopttx 5.11 Exercises 5.12 Appendix", " Chapter 5 Optimal Individualized Treatment Regimes Ivana Malenica Based on the tmle3mopttx R package by Ivana Malenica, Jeremy Coyle, and Mark van der Laan. Updated: 2019-05-14 5.1 Learning Objectives Differentiate dynamic and optimal dynamic treatment regimes from static interventions. Understand the benefits and challenges associated with using optimal individualized treatment regimes in practice. Contrast the impact of implementing an optimal individualized treatment in the population with static and dynamic regimes. Estimate causal effects under optimal individualized treatment regimes with the tmle3mopttx R package. Contrast the population impact of implementing optimal individualized treatment based on sub-optimal rules. Construct realistic optimal individualized treatments that respect real data and subject-matter knowledge limitations on interventions. Understand and implement variable importance analysis defined in terms of optimal individualized treatment interventions. 5.2 Introduction to Optimal Individualized Interventions Identifying which intervention will be effective for which patient based on lifestyle, genetic and environmental factors is a common goal in precision medicine. To put it in context, Abacavir and Tenofovir are commonly prescribed as part of the antiretroviral therapy to Human Immunodeficiency Virus (HIV) patients. However, not all individuals benefit from the two medications equally. In particular, patients with renal dysfunction might further deteriorate if prescribed Tenofovir, due to the high nephrotoxicity caused by the medication. While Tenofovir is still highly effective treatment option for HIV patients, in order to maximize the patient’s well-being, it would be beneficial to prescribe Tenofovir only to individuals with healthy kidney function. Along the same lines, one might seek to improve retention in HIV care. In a randomized clinical trial, several interventions show efficacy- including appointment reminders through text messages, small cash incentives for on time clinic visits, and peer health workers. Ideally, we want to improve effectiveness by assigning each patient the intervention they are most likely to benefit from, as well as improve efficiency by not allocating resources to individuals that do not need them, or would not benefit from it. Figure 5.1: Illustration of a Dynamic Treatment Regime in a Clinical Setting One opts to administer the intervention to individuals who will profit from it, instead of assigning treatment on a population level. But how do we know which intervention works for which patient? This aim motivates a different type of intervention, as opposed to the static exposures we might be used to. In particular, in this chapter we learn about dynamic or individualized interventions that tailor the treatment decision based on the collected covariates. Formally, dynamic treatments represent interventions that at each treatment-decision stage are allowed to respond to the currently available treatment and covariate history. In the statistics community such a treatment strategy is termed an individualized treatment regime (ITR), and the (counterfactual) population mean outcome under an ITR is the value of the ITR (“On the Application of Probability Theory to Agricultural Experiments. Essay on Principles. Section 9.” 1990, @robins1986, @pearl2009). Even more, suppose one wishes to maximize the population mean of an outcome, where for each individual we have access to some set of measured covariates. This means, for example, that we can learn for which individual characteristics assigning treatment increases the probability of a beneficial outcome for each individual. An ITR with the maximal value is referred to as an optimal ITR or the optimal individualized treatment. Consequently, the value of an optimal ITR is termed the optimal value, or the mean under the optimal individualized treatment. The problem of estimating the optimal individualized treatment has received much attention in the statistics literature over the years, especially with the advancement of precision medicine; see Murphy (2003), Robins (2004), Zhang et al. (2016), Zhao et al. (2012), Chakraborty and Moodie (2013) and Robins and Rotnitzky (2014) to name a few. However, much of the early work depends on parametric assumptions. As such, even in a randomized trial, the statistical inference for the optimal individualized treatment relies on assumptions that are generally believed to be false, and can lead to biased results. In this chapter, we consider estimation of the mean outcome under the optimal individualized treatment where the candidate rules are restricted to depend only on user-supplied subset of the baseline covariates. The estimation problem is addressed in a statistical model for the data distribution that is nonparametric, and at most places restrictions on the probability of a patient receiving treatment given covariates (as in a randomized trial). As such, we don’t need to make any assumptions about the relationship of the outcome with the treatment and covariates, or the relationship between the treatment and covariates. Further, we provide a Targeted Maximum Likelihood Estimator for the mean under the optimal individualized treatment that allows us to generate valid inference for our parameter, without having any parametric assumptions. For a technical presentation of the algorithm, the interested reader is invited to further consult van der Laan and Luedtke (2015) and Luedtke and van der Laan (2016). 5.3 Data Structure and Notation Suppose we observe \\(n\\) independent and identically distributed observations of the form \\(O=(W,A,Y) \\sim P_0\\). We denote \\(A\\) as categorical treatment, and \\(Y\\) as the final outcome. In particular, we define \\(A \\in \\mathcal{A}\\) where \\(\\mathcal{A} \\equiv \\{a_1, \\cdots, a_{n_A} \\}\\) and \\(n_A = |\\mathcal{A}|\\), with \\(n_A\\) denoting the number of categories (possibly only two, for a binary setup). Note that we treat \\(W\\) as vector-valued, representing all of our collected baseline covariates. Therefore, for a single random individual \\(i\\), we have that their observed data is \\(O_i\\): with corresponding baseline covariates \\(W_i\\), treatment \\(A_i\\), and final outcome \\(Y_i\\). We say that \\(O \\sim P_0\\), or that all data was drawn from some probability distribution \\(P_0\\). We emphasize that we make no assumptions about the distribution of \\(P_0\\), so that \\(P_0 \\in \\mathcal{M}\\), where \\(\\mathcal{M}\\) is the fully nonparametric model. As previously mentioned, this means that we make no assumptions on the relationship between \\(Y\\) and \\(A\\) and \\(W\\), but might be able to say something about the relationship of \\(A\\) and \\(W\\), as is the case of a randomized trial. We can assume a nonparametric structural equation model (NPSEM) to describe generation of \\(O\\), as described by Pearl (2009a). Specifically, we have that: \\[\\begin{align*}\\label{eqn:npsem} W &amp;= f_W(U_W) \\\\ A &amp;= f_A(W, U_A) \\\\ Y &amp;= f_Y(A, W, U_Y), \\end{align*}\\] where the collection \\(f=(f_W,f_A,f_Y)\\) denotes unspecified or partially specified functions. In particular, NPSEM parameterizes \\(P_0\\) in terms of the distribution of random variables \\(O\\) and \\(U\\), where \\(U=(U_W,U_A,U_Y)\\) are the exogenous random variables. We can define counterfactuals \\(Y_{d(W)}\\) defined by a modified system in which the equation for \\(A\\) is replaced by the rule \\(d(W)\\), dependent on covariates \\(W\\). The likelihood of the data admits a factorization, implied by the time ordering of \\(O\\). We denote the density of \\(O\\) as \\(p_0\\), corresponding to the distribution \\(P_0\\) and dominating measure \\(\\mu\\). \\[\\begin{equation*}\\label{eqn:likelihood_factorization} p_0(O) = p_{Y,0}(Y|A,W) p_{A,0}(A|W) p_{W,0}(W) = q_{Y,0}(Y|A,W) q_{A,0}(A|W) q_{W,0}(W), \\end{equation*}\\] where \\(p_{Y,0}(Y|A,W)\\) is the conditional density of \\(Y\\) given \\((A, W)\\) with respect to some dominating measure \\(\\mu_Y\\), \\(p_{A,0}\\) is the conditional density of \\(A\\) given \\(W\\) with respect to dominating measure \\(\\mu_A\\), and \\(p_{W,0}\\) is the density of \\(W\\) with respect to dominating measure \\(\\mu_W\\). Consequently, we define \\(P_{Y,0}(Y|A,W)=Q_{Y,0}(Y|A,W)\\), \\(P_{A,0}(A|W)=g_0(A|W)\\) and \\(P_{W,0}(W)=Q_{W,0}(W)\\) as the corresponding conditional distributions of \\(Y\\), \\(A\\) and \\(W\\). For notational simplicity, we define \\(\\bar{Q}_{Y,0}(A,W) \\equiv E_0[Y|A,W]\\) as the conditional expectation of \\(Y\\) given \\((A,W)\\). In addition, we denote \\(V\\) as \\(V \\in W\\), defining a subset of the baseline covariates the optimal individualized rule depends on. Note that \\(V\\) could be all of \\(W\\), or an empty set, depending on the subject matter knowledge. In particular, a researcher might want to consider known effect modifiers available at the time of treatment decision as possible \\(V\\) covariates. Defining \\(V\\) allows us to consider possibly sub-optimal rules that are easier to estimate, and thereby allows for statistical inference for the counterfactual mean outcome under the sub-optimal rule. 5.4 Defining the Causal Effect of an Optimal Individualized Intervention Consider dynamic treatment rules \\(V \\rightarrow d(V) \\in \\{a_1, \\cdots, a_{n_A} \\} \\times \\{1\\}\\), for assigning treatment \\(A\\) based on \\(V \\in W\\). As mentioned in the previous section, causal effects are defined in terms of hypothetical interventions on the NPSEM (). Our modified system then takes the following form: \\[\\begin{align*}\\label{eqn:npsem_causal} W &amp;= f_W(U_W) \\\\ A &amp;= d(V) \\\\ Y_{d(V)} &amp;= f_Y(d(V), W, U_Y), \\end{align*}\\] where the dynamic treatment regime may be viewed as an intervention in which \\(A\\) is set equal to a value based on a hypothetical regime \\(d(V)\\), and \\(Y_{d(V)}\\) is the corresponding outcome under \\(d(V)\\). We denote the distribution of the counterfactual quantities as \\(P_{0,d(V)}\\). The goal of any causal analysis motivated by such dynamic, or optimal individualized intervention, is to estimate a parameter defined as the counterfactual mean of the outcome with respect to the modified intervention distribution (either dynamic or optimal dynamic). We are primarily interested in the value of an individualized rule, \\(E_0[Y_{d(V)}]\\). The optimal rule is the rule with the maximal value: \\[d_{opt}(V) \\equiv \\text{argmax}_{d(V) \\in \\mathcal{D}} E_0[Y_{d(V)}]\\] where \\(\\mathcal{D}\\) represents the set of possible rules, \\(d\\), implied by \\(V\\). We note that, in case the problem at hand requires minimizing the mean of an outcome, our optimal individualized rule will be the rule with the minimal value instead. Finally, our target parameter can be expressed as \\[\\psi_0 := E_0[Y_{d_{opt}(V)}].\\] The optimal individualized rule, as well as the value of a rule, are causal parameters based on the unobserved counterfactuals. In order for the causal quantities to be estimated from the observed data, they need to be identified with statistical parameters. This step of the roadmap requires me make few assumptions: Consistency: \\(Y^{d(v_i)}_i = Y_i\\) in the event \\(A_i = d(v_i)\\), for \\(i = 1, \\ldots, n\\). Stable unit value treatment assumption (SUTVA): \\(Y^{d(v_i)}_i\\) does not depend on \\(d(v_j)\\) for \\(i = 1, \\ldots, n\\) and \\(j \\neq i\\), or lack of interference. Strong ignorability: \\(A \\perp \\!\\!\\! \\perp Y^{d(v)} \\mid W\\), for all \\(a \\in \\mathcal{A}\\). Positivity (or overlap): \\(P_0(\\min_{a \\in \\mathcal{A}} g_0(a|W) &gt; 0)=1\\) Under the above causal assumptions, we can identify \\(P_{0,d}\\) with observed data using the G-computation formula: \\[P_{0,d_{opt}}(O) = Q_{Y,0}(Y|A=d_{opt}(V),W)g_0(A=d_{opt}(V)|W)Q_{W,0}(W).\\] The value of an individualized rule can now be expressed as \\[E_0[Y_{d(V)}] = E_{0,W}[\\bar{Q}_{Y,0}(A=d(V),W)],\\] which, under causal assumptions, can is interpreted as the mean outcome if (possibly contrary to fact), treatment was assigned according to the rule. Finally, the statistical counterpart to the causal parameter of interest is defined as \\[\\psi_0 = E_{0,W}[\\bar{Q}_{Y,0}(A=d_{opt}(V),W)].\\] Inference for the optimal value has been shown to be difficult at exceptional laws, defined as probability distributions for which treatment is neither beneficial nor harmful. Inference is similarly difficult in finite samples if the treatment effect is very small in all strata, even though valid asymptotic estimators exist in this setting. With that in mind, we address the estimation problem under the assumption of non-exceptional laws in effect. Many methods for learning the optimal rule from data have been developed (Murphy 2003, @robins2004, @laber2012, @kosorok2012, @moodie2013). In this chapter, we focus on the methods discussed in Luedtke and van der Laan (2016) and van der Laan and Luedtke (2015). Note however, that tmle3mopttx also supports the widely used Q-learning approach, where the optimal individualized rule is based on the initial estimate of \\(\\bar{Q}_{Y,0}(A,W)\\) (Sutton, Barto, and others 1998). We follow the methodology outlined in Luedtke and van der Laan (2016) and van der Laan and Luedtke (2015), where we learn the optimal ITR using Super Learner (van der Laan, Polley, and Hubbard 2007), and estimate its value with cross-validated Targeted Minimum Loss-based Estimation (CV-TMLE) (Zheng and van der Laan 2010). In great generality, we first need to estimate the true individual treatment regime, \\(d_0(V)\\), which corresponds to dynamic treatment rule (\\(d(V)\\)) that takes a subset of covariates \\(V \\in W\\) and assigns treatment to each individual based on their observed covariates \\(v\\). With the estimate of the true optimal ITR in hand, we can estimate its corresponding value. 5.4.1 Binary treatment How do we estimate the optimal individualized treatment regime? In the case of a binary treatment, a key quantity for optimal ITR is the blip function. One can show that any optimal ITR assigns treatment to individuals falling in strata in which the stratum specific average treatment effect, the blip function, is positive and does not assign treatment to individuals for which this quantity is negative. Therefore for a binary treatment, under causal assumptions, we define the blip function as: \\[\\bar{Q}_0(V) \\equiv E_0[Y_1-Y_0|V] \\equiv E_0[\\bar{Q}_{Y,0}(1,W) - \\bar{Q}_{Y,0}(0,W) | V],\\] or the average treatment effect within a stratum of \\(V\\). The note that the optimal individualized rule can now be derived as \\(d_{opt}(V) = I(\\bar{Q}_{0}(V) &gt; 0)\\). The package tmle3mopttx relies on using the Super Learner to estimate the blip function, as it easily extends to more general categorical treatment. With that in mind, the loss function utilized for learning the optimal individualized rule corresponds to conditional mean type losses. It is however worth mentioning that Luedtke and van der Laan (2016) present three different approaches for learning the optimal rule. Namely, they focus on: Super Learning the Blip Function, Super Learning the Weighted Classification Problem, Joint Super Learner of the Blip and Weighted Classification Problem. We refer the interested reader to Luedtke and van der Laan (2016) for further reference on advantages of each approach. Relying on the Targeted Maximum Likelihood (TML) estimator and the Super Learner estimate of the blip function, we follow the below steps in order to obtain value of the ITR: Estimate \\(\\bar{Q}_{Y,0}(A,W)\\) and \\(g_0(A|W)\\) using sl3. We denote such estimates as \\(\\bar{Q}_{Y,n}(A,W)\\) and \\(g_n(A|W)\\). Apply the doubly robust Augmented-Inverse Probability Weighted (A-IPW) transform to our outcome, where we define: \\[D_{\\bar{Q}_Y,g,a}(O) \\equiv \\frac{I(A=a)}{g(A|W)} (Y-\\bar{Q}_Y(A,W)) + \\bar{Q}_Y(A=a,W)\\] Note that under the randomization and positivity assumptions we have that \\(E[D_{\\bar{Q}_Y,g,a}(O) | V] = E[Y_a |V]\\). We emphasize the double robust nature of the A-IPW transform- consistency of \\(E[Y_a |V]\\) will depend on correct estimation of either \\(\\bar{Q}_{Y,0}(A,W)\\) or \\(g_0(A|W)\\). As such, in a randomized trial, we are guaranteed a consistent estimate of \\(E[Y_a |V]\\) even if we get \\(\\bar{Q}_{Y,0}(A,W)\\) wrong! Using this transform, we can define the following contrast: \\(D_{\\bar{Q}_Y,g}(O) = D_{\\bar{Q}_Y,g,a=1}(O) - D_{\\bar{Q}_Y,g,a=0}(O)\\) We estimate the blip function, \\(\\bar{Q}_{0,a}(V)\\), by regressing \\(D_{\\bar{Q}_Y,g}(O)\\) on \\(V\\) using the specified sl3 library of learners and an appropriate loss function. Our estimated rule is \\(d(V) = \\text{argmax}_{a \\in \\mathcal{A}} \\bar{Q}_{0,a}(V)\\). We obtain inference for the mean outcome under the estimated optimal rule using CV-TMLE. 5.4.2 Categorical treatment In line with the approach considered for binary treatment, we extend the blip function to allow for categorical treatment. We denote such blip function extensions as pseudo-blips, which are our new estimation targets in a categorical setting. We define pseudo-blips as vector-valued entities where the output for a given \\(V\\) is a vector of length equal to the number of treatment categories, \\(n_A\\). As such, we define it as: \\[\\bar{Q}_0^{pblip}(V) = \\{\\bar{Q}_{0,a}^{pblip}(V): a \\in \\mathcal{A} \\}\\] We implement three different pseudo-blips in tmle3mopttx. Blip1 corresponds to choosing a reference category of treatment, and defining the blip for all other categories relative to the specified reference. Hence we have that: \\[\\bar{Q}_{0,a}^{pblip-ref}(V) \\equiv E_0(Y_a-Y_0|V)\\] where \\(Y_0\\) is the specified reference category with \\(A=0\\). Note that, for the case of binary treatment, this strategy reduces to the approach described for the binary setup. Blip2 approach corresponds to defining the blip relative to the average of all categories. As such, we can define \\(\\bar{Q}_{0,a}^{pblip-avg}(V)\\) as: \\[\\bar{Q}_{0,a}^{pblip-avg}(V) \\equiv E_0(Y_a- \\frac{1}{n_A} \\sum_{a \\in \\mathcal{A}} Y_a|V)\\] In the case where subject-matter knowledge regarding which reference category to use is not available, blip2 might be a viable option. Blip3 reflects an extension of Blip2, where the average is now a weighted average: \\[\\bar{Q}_{0,a}^{pblip-wavg}(V) \\equiv E_0(Y_a- \\frac{1}{n_A} \\sum_{a \\in \\mathcal{A}} Y_{a} P(A=a|V) |V)\\] Just like in the binary case, pseudo-blips are estimated by regressing contrasts composed using the A-IPW transform on \\(V\\). 5.4.3 Note on Inference In a randomized trial, statistical inference relies on the second-order difference between the estimator of the optimal individualized treatment and the optimal individualized treatment itself to be asymptotically negligible. This is a reasonable condition if we consider rules that depend on small number of covariates, or if we are willing to make smoothness assumptions. Alternatively, we can consider TMLEs and statistical inference for data-adaptive target parameters defined in terms of an estimate of the optimal individualized treatment. In particular, instead of trying to estimate the mean under the true optimal individualized treatment, we aim to estimate the mean under the estimated optimal individualized treatment. As such, we develop cross-validated TMLE approach that provides asymptotic inference under minimal conditions for the mean under the estimate of the optimal individualized treatment. In particular, considering the data adaptive parameter allows us to avoid consistency and rate condition for the fitted optimal rule, as required for asymptotic linearity of the TMLE of the mean under the actual, true optimal rule. Practically, the estimated (data-adaptive) rule should be preferred, as this possibly sub-optimal rule is the one implemented in the population. 5.4.4 Why CV-TMLE? As discussed in van der Laan and Luedtke (2015), CV-TMLE is necessary as the non-cross-validated TMLE is biased upward for the mean outcome under the rule, and therefore overly optimistic. More generally however, using CV-TMLE allows us more freedom in estimation and therefore greater data adaptivity, without sacrificing inference. 5.5 Interpreting the Causal Effect of an Optimal Individualized Intervention In summary, the mean outcome under the optimal individualized treatment is a counterfactual quantity of interest representing what the mean outcome would have been if everybody, contrary to the fact, received treatment that optimized their outcome. The optimal individualized treatment regime is a rule that optimizes the mean outcome under the dynamic treatment, where the candidate rules are restricted to only respond to a user-supplied subset of the baseline and intermediate covariates. In essence, our target parameter answers the key aim of precision medicine: allocating the available treatment by tailoring it to the individual characteristics of the patient, with the goal of optimizing the final outcome. 5.6 Evaluating the Causal Effect of an OIT with Binary Treatment Finally, we demonstrate how to evaluate the mean outcome under the optimal individualized treatment using tmle3mopptx. To start, let’s load the packages we’ll use and set a seed: library(here) library(data.table) library(sl3) library(tmle3) library(tmle3mopttx) library(devtools) set.seed(111) 5.6.1 Simulated Data First, we load the simulated data. We will start with the more general setup where the treatment is a binary variable; later in the chapter we will consider another data-generating distribution where \\(A\\) is categorical. In this example, our data generating distribution is of the following form: \\[\\begin{align*} W &amp;\\sim \\mathcal{N}(\\bf{0},I_{3 \\times 3})\\\\ P(A=1|W) &amp;= \\frac{1}{1+\\exp^{(-0.8*W_1)}}\\\\ P(Y=1|A,W) &amp;= 0.5\\text{logit}^{-1}[-5I(A=1)(W_1-0.5)+5I(A=0)(W_1-0.5)] + 0.5\\text{logit}^{-1}(W_2W_3) \\end{align*}\\] data(&quot;data_bin&quot;) The above composes our observed data structure \\(O = (W, A, Y)\\). Note that the mean under the true optimal rule is \\(\\psi=0.578\\) for this data generating distribution. To formally express this fact using the tlverse grammar introduced by the tmle3 package, we create a single data object and specify the functional relationships between the nodes in the directed acyclic graph (DAG) via nonparametric structural equation models (NPSEMs), reflected in the node list that we set up: # organize data and nodes for tmle3 data &lt;- data_bin node_list &lt;- list( W = c(&quot;W1&quot;, &quot;W2&quot;, &quot;W3&quot;), A = &quot;A&quot;, Y = &quot;Y&quot; ) We now have an observed data structure (data) and a specification of the role that each variable in the data set plays as the nodes in a DAG. 5.6.2 Constructing Optimal Stacked Regressions with sl3 To easily incorporate ensemble machine learning into the estimation procedure, we rely on the facilities provided in the sl3 R package. Using the framework provided by the sl3 package, the nuisance parameters of the TML estimator may be fit with ensemble learning, using the cross-validation framework of the Super Learner algorithm of van der Laan, Polley, and Hubbard (2007). # Define sl3 library and metalearners: lrn_xgboost_50 &lt;- Lrnr_xgboost$new(nrounds = 50) lrn_xgboost_100 &lt;- Lrnr_xgboost$new(nrounds = 100) lrn_xgboost_500 &lt;- Lrnr_xgboost$new(nrounds = 500) lrn_mean &lt;- Lrnr_mean$new() lrn_glm &lt;- Lrnr_glm_fast$new() ## Define the Q learner: Q_learner &lt;- Lrnr_sl$new( learners = list(lrn_xgboost_50, lrn_xgboost_100, lrn_xgboost_500, lrn_mean, lrn_glm), metalearner = Lrnr_nnls$new() ) ## Define the g learner: g_learner &lt;- Lrnr_sl$new( learners = list(lrn_xgboost_100, lrn_glm), metalearner = Lrnr_nnls$new() ) ## Define the B learner: b_learner &lt;- Lrnr_sl$new( learners = list(lrn_xgboost_50, lrn_xgboost_100, lrn_xgboost_500,lrn_mean, lrn_glm), metalearner = Lrnr_nnls$new() ) As seen above, we generate three different ensemble learners that must be fit, corresponding to the learners for the outcome regression (Q), propensity score (g), and the blip function (B). We make the above explicit with respect to standard notation by bundling the ensemble learners into a list object below: # specify outcome and treatment regressions and create learner list learner_list &lt;- list(Y = Q_learner, A = g_learner, B = b_learner) The learner_list object above specifies the role that each of the ensemble learners we’ve generated is to play in computing initial estimators. Recall that we need initial estimators of relevant parts of the likelihood in order to building a TMLE for the parameter of interest. In particular, learner_list makes explicit the fact that our Y is used in fitting the outcome regression, while A is used in fitting the treatment mechanism regression, and finally B is used in fitting the blip function. 5.6.3 Targeted Estimation of the Mean under the Optimal Individualized Interventions Effects To start, we will initialize a specification for the TMLE of our parameter of interest simply by calling tmle3_mopttx_blip_revere. We specify the argument V = c(&quot;W1&quot;, &quot;W2&quot;, &quot;W3&quot;) when initializing the tmle3_Spec object in order to communicate that we’re interested in learning a rule dependent on V covariates. Note that we don’t have to specify V- this will result in a rule that is not based on any collected covariates. We also need to specify the type of pseudo-blip we will use in this estimation problem, the list of learners used to estimate the blip function, whether we want to maximize or minimize the final outcome, and few other more advanced features including searching for a less complex rule and realistic interventions. # initialize a tmle specification tmle_spec &lt;- tmle3_mopttx_blip_revere( V = c(&quot;W1&quot;, &quot;W2&quot;, &quot;W3&quot;), type = &quot;blip1&quot;, learners = learner_list, maximize = TRUE, complex = TRUE, realistic = FALSE ) As seen above, the tmle3_mopttx_blip_revere specification object (like all tmle3_Spec objects) does not store the data for our specific analysis of interest. Later, we’ll see that passing a data object directly to the tmle3 wrapper function, alongside the instantiated tmle_spec, will serve to construct a tmle3_Task object internally. We elaborate more on the initialization specifications. In initializing the specification for the TMLE of our parameter of interest, we have specified the set of covariates the rule depends on (V), the type of pseudo-blip to use (type), and the learners used for estimating the relevant parts of the likelihood and the blip function. In addition, we need to specify whether we want to maximize the mean outcome under the rule (maximize), and whether we want to estimate the rule under all the covariates \\(V\\) provided by the user (complex). If FALSE, tmle3mopttx will instead consider all the possible rules under a smaller set of covariates including the static rules, and optimize the mean outcome over all the subsets of \\(V\\). As such, while the user might have provided a full set of collected covariates as input for \\(V\\), it is possible that the true rule only depends on a subset of the set provided by the user. In that case, our returned mean under the optimal individualized rule will be based on the smaller subset. In addition, we provide an option to search for realistic optimal individualized interventions via the realistic specification. If TRUE, only treatments supported by the data will be considered, therefore alleviating concerns regarding practical positivity issues. We explore all the important extensions of tmle3mopttx in later sections. # fit the TML estimator fit &lt;- tmle3(tmle_spec, data, node_list, learner_list) fit A tmle3_Fit that took 1 step(s) type param init_est tmle_est se lower upper 1: TSM E[Y_{A=NULL}] 0.4289592 0.5701264 0.02749039 0.5162462 0.6240065 psi_transformed lower_transformed upper_transformed 1: 0.5701264 0.5162462 0.6240065 We can see that the estimate of \\(psi_0\\) is \\(0.56\\), and that the confidence interval covers our true mean under the true optimal individualized treatment. 5.7 Evaluating the Causal Effect of an optimal ITR with Categorical Treatment In this section, we consider how to evaluate the mean outcome under the optimal individualized treatment when \\(A\\) has more than two categories. While the procedure is analogous to the previously described binary treatment, we now need to pay attention to the type of blip we define in the estimation stage, as well as how we construct our learners. 5.7.1 Simulated Data First, we load the simulated data. Here, our data generating distribution was of the following form: \\[\\begin{align*} W &amp;\\sim \\mathcal{N}(\\bf{0},I_{4 \\times 4})\\\\ P(A=a|W) &amp;= \\frac{1}{1+\\exp^{(-0.8*W_1)}}\\\\ P(Y=1|A,W) = 0.5\\text{logit}^{-1}[15I(A=1)(W_1-0.5) - 3I(A=2)(2W_1+0.5) + 3I(A=3)(3W_1-0.5)] +\\text{logit}^{-1}(W_2W_1) \\end{align*}\\] We can just load the data available as part of the package as follows: data(&quot;data_cat_realistic&quot;) The above composes our observed data structure \\(O = (W, A, Y)\\). Note that the mean under the true optimal rule is \\(\\psi=0.658\\), which is the quantity we aim to estimate. # organize data and nodes for tmle3 data &lt;- data_cat_realistic node_list &lt;- list( W = c(&quot;W1&quot;, &quot;W2&quot;, &quot;W3&quot;, &quot;W4&quot;), A = &quot;A&quot;, Y = &quot;Y&quot; ) 5.7.2 Constructing Optimal Stacked Regressions with sl3 # Initialize few of the learners: lrn_xgboost_50 &lt;- Lrnr_xgboost$new(nrounds = 50) lrn_xgboost_100 &lt;- Lrnr_xgboost$new(nrounds = 100) lrn_xgboost_500 &lt;- Lrnr_xgboost$new(nrounds = 500) lrn_mean &lt;- Lrnr_mean$new() lrn_glm &lt;- Lrnr_glm_fast$new() ## Define the Q learner, which is just a regular learner: Q_learner &lt;- Lrnr_sl$new( learners = list(lrn_xgboost_50, lrn_xgboost_100, lrn_xgboost_500, lrn_mean, lrn_glm), metalearner = Lrnr_nnls$new() ) # Define the g learner, which is a multinomial learner: #specify the appropriate loss of the multinomial learner: mn_metalearner &lt;- make_learner(Lrnr_solnp, loss_function = loss_loglik_multinomial, learner_function = metalearner_linear_multinomial) g_learner &lt;- make_learner(Lrnr_sl, list(lrn_xgboost_100, lrn_xgboost_500, lrn_mean), mn_metalearner) # Define the Blip learner, which is a multivariate learner: learners &lt;- list(lrn_xgboost_50, lrn_xgboost_100, lrn_xgboost_500, lrn_mean, lrn_glm) b_learner &lt;- create_mv_learners(learners = learners) As seen above, we generate three different ensemble learners that must be fit, corresponding to the learners for the outcome regression, propensity score, and the blip function. Note that we need to estimate \\(g_0(A|W)\\) for a categorical \\(A\\) – therefore, we use the multinomial Super Learner option available within the sl3 package with learners that can address multi-class classification problems. In order to see which learners can be used to estimate \\(g_0(A|W)\\) in sl3, we run the following: # See which learners support multi-class classification: sl3_list_learners(c(&quot;categorical&quot;)) [1] &quot;Lrnr_bartMachine&quot; &quot;Lrnr_dbarts&quot; [3] &quot;Lrnr_glmnet&quot; &quot;Lrnr_grf&quot; [5] &quot;Lrnr_h2o_glm&quot; &quot;Lrnr_h2o_grid&quot; [7] &quot;Lrnr_independent_binomial&quot; &quot;Lrnr_mean&quot; [9] &quot;Lrnr_multivariate&quot; &quot;Lrnr_optim&quot; [11] &quot;Lrnr_randomForest&quot; &quot;Lrnr_ranger&quot; [13] &quot;Lrnr_rpart&quot; &quot;Lrnr_solnp&quot; [15] &quot;Lrnr_svm&quot; &quot;Lrnr_xgboost&quot; Note that since the corresponding blip will be vector valued, we will have a column for each additional level of treatment. As such, we need to create multivariate learners with the helper function create_mv_learners that takes a list of initialized learners as input. We make the above explicit with respect to standard notation by bundling the ensemble learners into a list object below: # specify outcome and treatment regressions and create learner list learner_list &lt;- list(Y = Q_learner, A = g_learner, B = b_learner) 5.7.3 Targeted Estimation of the Mean under the Optimal Individualized Interventions Effects # initialize a tmle specification tmle_spec &lt;- tmle3_mopttx_blip_revere( V = c(&quot;W1&quot;, &quot;W2&quot;, &quot;W3&quot;, &quot;W4&quot;), type = &quot;blip2&quot;, learners = learner_list, maximize = TRUE, complex = TRUE, realistic = FALSE ) # fit the TML estimator fit &lt;- tmle3(tmle_spec, data, node_list, learner_list) fit A tmle3_Fit that took 1 step(s) type param init_est tmle_est se lower upper 1: TSM E[Y_{A=NULL}] 0.5287431 0.4973104 0.0759547 0.3484419 0.6461789 psi_transformed lower_transformed upper_transformed 1: 0.4973104 0.3484419 0.6461789 We can see that the estimate of \\(psi_0\\) is \\(0.60\\), and that the confidence interval covers our true mean under the true optimal individualized treatment. 5.8 Extensions to Causal Effect of an OIT In this section, we consider two extensions to the procedure described for estimating the value of the OIT. First one considers a setting where the user might be interested in a grid of possible sub-optimal rules, corresponding to potentially limited knowledge of potential effect modifiers. The second extension concerns implementation of a realistic optimal individual interventions where certain regimes might be preferred, but due to practical or global positivity restraints are not realistic to implement. 5.8.1 Simpler Rules In order to not only consider the most ambitious fully \\(V\\)-optimal rule, we define \\(S\\)-optimal rules as the optimal rule that considers all possible subsets of \\(V\\) covariates, with card(\\(S\\)) \\(\\leq\\) card(\\(V\\)) and \\(\\emptyset \\in S\\). This allows us to consider sub-optimal rules that are easier to estimate and potentially provide more realistic rules- as such, we allow for statistical inference for the counterfactual mean outcome under the sub-optimal rule. Within the tmle3mopttx paradigm, we just need to change the complex parameter to FALSE: # initialize a tmle specification tmle_spec &lt;- tmle3_mopttx_blip_revere( V = c(&quot;W4&quot;, &quot;W3&quot;, &quot;W2&quot;, &quot;W1&quot;), type = &quot;blip2&quot;, learners = learner_list, maximize = TRUE, complex = FALSE, realistic = FALSE ) # fit the TML estimator fit &lt;- tmle3(tmle_spec, data, node_list, learner_list) fit A tmle3_Fit that took 1 step(s) type param init_est tmle_est se lower upper 1: TSM E[Y_{A=W3,W2,W1}] 0.5381361 0.6205396 0.07185096 0.4797144 0.7613649 psi_transformed lower_transformed upper_transformed 1: 0.6205396 0.4797144 0.7613649 Therefore even though the user specified all baseline covariates as the basis for rule estimation, a simpler rule based on only \\(W_2\\) and \\(W_1\\) is sufficient to maximize the mean under the optimal individualized treatment. 5.8.2 Realistic Optimal Individual Regimes In addition to considering less complex rules, tmle3mopttx also provides an option to estimate the mean under the realistic, or implementable, optimal individualized treatment. It is often the case that assigning particular regime might have the ability to fully maximize (or minimize) the desired outcome, but due to global or practical positivity constrains, such treatment can never be implemented in real life (or is highly unlikely). As such, specifying realistic to TRUE, we consider possibly suboptimal treatments that optimize the outcome in question while being supported by the data. # initialize a tmle specification tmle_spec &lt;- tmle3_mopttx_blip_revere( V = c(&quot;W4&quot;, &quot;W3&quot;, &quot;W2&quot;, &quot;W1&quot;), type = &quot;blip2&quot;, learners = learner_list, maximize = TRUE, complex = TRUE, realistic = TRUE ) # fit the TML estimator fit &lt;- tmle3(tmle_spec, data, node_list, learner_list) fit A tmle3_Fit that took 1 step(s) type param init_est tmle_est se lower upper 1: TSM E[Y_{A=NULL}] 0.539845 0.6530767 0.02134495 0.6112413 0.694912 psi_transformed lower_transformed upper_transformed 1: 0.6530767 0.6112413 0.694912 # How many individuals got assigned each treatment? table(tmle_spec$return_rule) 2 3 510 490 5.8.3 Q-learning Alternatively, we could estimate the mean under the optimal individualized treatment using Q-learning. The optimal rule can be learned through fitting the likelihood, and consequently estimating the optimal rule under this fit of the likelihood (Sutton, Barto, and others 1998, @murphy2003). Below we outline how to use tmle3mopttx package in order to estimate the mean under the ITR using Q-learning. As demonstrated in the previous sections, we first need to initialize a specification for the TMLE of our parameter of interest. As opposed to the previous section however, we will now use tmle3_mopttx_Q instead of tmle3_mopttx_blip_revere in order to indicate that we want to use Q-learning instead of TMLE. # initialize a tmle specification tmle_spec_Q &lt;- tmle3_mopttx_Q(maximize = TRUE) # Define data: tmle_task &lt;- tmle_spec_Q$make_tmle_task(data, node_list) # Define likelihood: initial_likelihood &lt;- tmle_spec_Q$make_initial_likelihood(tmle_task, learner_list) # Estimate the parameter: Q_learning(tmle_spec_Q, initial_likelihood, tmle_task)[1] [1] 0.4743143 5.9 Variable Importance Analysis with OIT Suppose one wishes to assess the importance of each observed covariate, in terms of maximizing (or minimizing) the population mean of an outcome under an optimal individualized treatment regime. In particular, a covariate that maximizes (or minimizes) the population mean outcome the most under an optimal individualized treatment out of all other considered covariates under optimal assignment might be considered more important for the outcome. To put it in context, perhaps optimal allocation of treatment 1, denoted \\(A_1\\), results in a larger mean outcome than optimal allocation of another treatment (\\(A_2\\)). Therefore, we would label \\(A_1\\) as having a higher variable importance with regard to maximizing (minimizing) the mean outcome under the optimal individualized treatment. 5.9.1 Simulated Data In order to run tmle3mopttx variable importance measure, we need to consider covariates to be categorical variables. For illustration purpose, we bin baseline covariates corresponding to the data-generating distribution described in section 5.7.1: # bin baseline covariates to 3 categories: data$W1 &lt;- ifelse(data$W1 &lt; quantile(data$W1)[2], 1, ifelse(data$W1 &lt; quantile(data$W1)[3], 2, 3)) node_list &lt;- list( W = c(&quot;W3&quot;, &quot;W4&quot;, &quot;W2&quot;), A = c(&quot;W1&quot;, &quot;A&quot;), Y = &quot;Y&quot; ) Note that our node list now includes \\(W_1\\) as treatments as well! Don’t worry, we will still properly adjust for all baseline covariates. 5.9.2 Variable Importance using Targeted Estimation of the value of the ITR In the previous sections we have seen how to obtain a contrast between the mean under the optimal individualized rule and the mean under the observed outcome for a single covariate- we are now ready to run the variable importance analysis for all of our specified covariates. In order to run the variable importance analysis, we first need to initialize a specification for the TMLE of our parameter of interest as we have done before. In addition, we need to specify the data and the corresponding list of nodes, as well as the appropriate learners for the outcome regression, propensity score, and the blip function. Finally, we need to specify whether we should adjust for all the other covariates we are assessing variable importance for. We will adjust for all \\(W\\)s in our analysis, and if adjust_for_other_A=TRUE, also for all \\(A\\) covariates that are not treated as exposure in the variable importance loop. To start, we will initialize a specification for the TMLE of our parameter of interest (called a tmle3_Spec in the tlverse nomenclature) simply by calling tmle3_mopttx_vim. First, we indicate the method used for learning the optimal individualized treatment by specifying the method argument of tmle3_mopttx_vim. If method=&quot;Q&quot;, then we will be using Q-learning for rule estimation, and we do not need to specify V, type and learners arguments in the spec, since they are not important for Q-learning. However, if method=&quot;SL&quot;, which corresponds to learning the optimal individualized treatment using the above outlined methodology, then we need to specify the type of pseudo-blip we will use in this estimation problem, whether we want to maximize or minimize the outcome, complex and realistic rules. Finally, for method=&quot;SL&quot; we also need to communicate that we’re interested in learning a rule dependent on V covariates by specifying the V argument. For both method=&quot;Q&quot; and method=&quot;SL&quot;, we need to indicate whether we want to maximize or minimize the mean under the optimal individualized rule. Finally, we also need to specify whether the final comparison of the mean under the optimal individualized rule and the mean under the observed outcome should be on the multiplicative scale (risk ratio) or linear (similar to average treatment effect). # initialize a tmle specification tmle_spec &lt;- tmle3_mopttx_vim( V=c(&quot;W2&quot;), type = &quot;blip2&quot;, learners = learner_list, contrast = &quot;multiplicative&quot;, maximize = FALSE, method = &quot;SL&quot;, complex = TRUE, realistic = FALSE ) # fit the TML estimator vim_results &lt;- tmle3_vim(tmle_spec, data, node_list, learner_list, adjust_for_other_A = TRUE ) print(vim_results) type param init_est tmle_est se lower 1: RR RR(E[Y_{A=NULL}]/E[Y]) 0.000520453 0.06985547 0.03356719 0.004064993 2: RR RR(E[Y_{A=NULL}]/E[Y]) -0.028080213 -0.07002053 0.05086679 -0.169717600 upper psi_transformed lower_transformed upper_transformed A 1: 0.13564596 1.0723532 1.0040733 1.145276 A 2: 0.02967654 0.9323747 0.8439031 1.030121 W1 W Z_stat p_nz p_nz_corrected 1: W3,W4,W2,W1 2.081064 0.01871402 0.03742803 2: W3,W4,W2,A -1.376547 0.08432615 0.08432615 The final result of tmle3_vim with the tmle3mopttx spec is an ordered list of mean outcomes under the optimal individualized treatment for all categorical covariates in our dataset. 5.10 Real World Data and tmle3mopttx Finally, we cement everything we learned so far with a real data application. As in the previous sections, we will be using the WASH Benefits data, corresponding to the Effect of water quality, sanitation, hand washing, and nutritional interventions on child development in rural Bangladesh trial. The main aim of the cluster-randomized controlled trial was to assess the impact of six intervention groups, including: chlorinated drinking water improved sanitation handwashing with soap combined water, sanitation, and handwashing improved nutrition through counselling and provision of lipid-based nutrient supplements combined water, sanitation, handwashing, and nutrition. We aim to estimate the optimal ITR and the corresponding value under the optimal ITR for the main intervention in WASH Benefits data. To start, let’s load the data, convert all columns to be of class numeric, and take a quick look at it: washb_data &lt;- fread(here(&quot;data&quot;, &quot;washb_data.csv&quot;), stringsAsFactors = TRUE) washb_data &lt;- washb_data[!is.na(momage), lapply(.SD, as.numeric)] head(washb_data, 3) whz tr fracode month aged sex momage momedu momheight hfiacat Nlt18 Ncomp 1: 0.00 1 4 9 268 2 30 2 146.40 1 3 11 2: -1.16 1 4 9 286 2 25 2 148.75 3 2 4 3: -1.05 1 20 9 264 2 25 2 152.15 1 1 10 watmin elec floor walls roof asset_wardrobe asset_table asset_chair 1: 0 1 0 1 1 0 1 1 2: 0 1 0 1 1 0 1 0 3: 0 0 0 1 1 0 0 1 asset_khat asset_chouki asset_tv asset_refrig asset_bike asset_moto 1: 1 0 1 0 0 0 2: 1 1 0 0 0 0 3: 0 1 0 0 0 0 asset_sewmach asset_mobile 1: 0 1 2: 0 1 3: 0 1 As before, we specify the NPSEM via the node_list object. Our outcome of interest is the weight-for-height Z-score which we seek to maximize, whereas our treatment is the six intervention groups aimed at improving living conditions. All the other collected baseline covariates correspond to \\(W\\). node_list &lt;- list(W = names(washb_data)[!(names(washb_data) %in% c(&quot;whz&quot;, &quot;tr&quot;))], A = &quot;tr&quot;, Y = &quot;whz&quot;) We pick few potential effect modifiers, including mother’s education, current living conditions (floor), and possession of material items including the refrigerator. We concentrate of these covariates as they might be indicative of the socio-economic status of individuals involved in the trial. table(washb_data$momedu) 1 2 3 733 1441 2503 table(washb_data$floor) 0 1 4177 500 table(washb_data$asset_refrig) 0 1 4305 372 summary(washb_data$whz) Min. 1st Qu. Median Mean 3rd Qu. Max. -4.6700 -1.2800 -0.6000 -0.5859 0.0800 4.9700 # Initialize few of the learners: lrn_xgboost_50 &lt;- Lrnr_xgboost$new(nrounds = 50) lrn_xgboost_100 &lt;- Lrnr_xgboost$new(nrounds = 100) lrn_mean &lt;- Lrnr_mean$new() ## Define the Q learner, which is just a regular learner: Q_learner &lt;- Lrnr_sl$new( learners = list(lrn_xgboost_50, lrn_xgboost_100, lrn_mean), metalearner = Lrnr_nnls$new() ) # Define the g learner, which is a multinomial learner: #specify the appropriate loss of the multinomial learner: mn_metalearner &lt;- make_learner(Lrnr_solnp, loss_function = loss_loglik_multinomial, learner_function = metalearner_linear_multinomial) g_learner &lt;- make_learner(Lrnr_sl, list(lrn_xgboost_100, lrn_mean), mn_metalearner) # Define the Blip learner, which is a multivariate learner: learners &lt;- list(lrn_xgboost_50, lrn_xgboost_100, lrn_mean) b_learner &lt;- create_mv_learners(learners = learners) learner_list &lt;- list(Y = Q_learner, A = g_learner, B = b_learner) # initialize a tmle specification tmle_spec &lt;- tmle3_mopttx_blip_revere( V = c(&quot;momedu&quot;, &quot;floor&quot;, &quot;asset_refrig&quot;), type = &quot;blip2&quot;, learners = learner_list, maximize = TRUE, complex = TRUE, realistic = FALSE ) # fit the TML estimator fit &lt;- tmle3(tmle_spec, data=washb_data, node_list, learner_list) fit A tmle3_Fit that took 1 step(s) type param init_est tmle_est se lower upper 1: TSM E[Y_{A=NULL}] -0.5527165 -0.4627136 0.04342082 -0.5478169 -0.3776104 psi_transformed lower_transformed upper_transformed 1: -0.4627136 -0.5478169 -0.3776104 5.11 Exercises 5.11.1 Review of Key Concepts What is the difference between dynamic and optimal individualized regimes? What’s the intuition behind using different blip types? Why did we switch from blip1 to blip2 when considering categorical treatment? What are some of the advantages of each? Look back at the results generated in section 5.7.1, and compare then to the mean under the optimal individualized treatment in section 5.6. Why do you think the estimate if higher under the less complex rule? How does the set of covariates picked by tmle3mopttx compare to the baseline covariates the true rule depends on? Compare the distribution of treatments assigned under the true optimal individualized treatment (section 5.6) and realistic optimal individualized treatment (section 5.7.2). Referring back to the data-generating distribution, why do you think the distribution of allocated treatment changed? Using the same simulation, perform a variable importance analysis using Q-learning. How do the results change and why? 5.11.2 The Ideas in Action Using the WASH benefits data, extract the optimal ITR for exact individual. Which intervention is the most dominant? Why do you think that is? Consider simpler rules for the WASH benefits data example. What set of rules are picked? Using the WASH benefits data, estimate the realistic optimal ITR and the corresponding value of the realistic ITR. Did the results change? Change the treatment to Mother’s education (momedu), and estimate the value under the ITR in this setting. What do the results indicate? Can we intervene on such a variable? 5.11.3 Advanced Topics How can we extend the current approach to include exceptional laws? How can we extend the current approach to incorporate resource constraints? How can we extend the current approach to continuous interventions? 5.12 Appendix 5.12.1 Exercise solutions References "],
["stochastic-treatment-regimes.html", "Chapter 6 Stochastic Treatment Regimes 6.1 Learning Objectives 6.2 Introduction to Stochastic Interventions 6.3 Data Structure and Notation 6.4 Defining the Causal Effect of a Stochastic Intervention 6.5 Interpreting the Causal Effect of a Stochastic Intervention 6.6 Evaluating the Causal Effect of a Stochastic Intervention 6.7 Extensions: Variable Importance Analysis with Stochastic Interventions 6.8 Exercises", " Chapter 6 Stochastic Treatment Regimes Nima Hejazi Based on the tmle3shift R package by Nima Hejazi, Jeremy Coyle, and Mark van der Laan. Updated: 2019-05-14 6.1 Learning Objectives Differentiate stochastic treatment regimes from static, dynamic, and optimal treatment regimes. Describe how estimating causal effects of stochastic interventions informs a real-world data analysis. Contrast a population level stochastic intervention policy from a modified treatment policy. Estimate causal effects under stochastic treatment regimes with the tmle3shift R package. Specify a grid of counterfactual shift interventions to be used for defining a set of stochastic intervention policies. Interpret a set of effect estimates from a grid of counterfactual shift interventions. Construct marginal structural models to measure variable importance in terms of stochastic interventions, using a grid of shift interventions. Implement a shift intervention at the individual level, to facilitate shifting each individual to a value that’s supported by the data. Define novel shift intervention functions to extend the tmle3shift R package. 6.2 Introduction to Stochastic Interventions Stochastic treatment regimes present a relatively simple, yet extremely flexible manner by which realistic causal effects (and contrasts thereof) may be defined. Importantly, stochastic treatment regimes may be applied to nearly any manner of treatment variable – continuous, ordinal, categorical, binary – allowing for a rich set of causal effects to be defined through this formalism. In this chapter, we examine a simple example of stochastic treatment regimes in the context of a continuous treatment variable of interest, defining an intuitive causal effect through which to examine stochastic interventions more generally. In later sections, we introduce numerous extensions based on this broad class of interventions – from stochastic interventions on binary treatment variables to stochastic mediation effects and data-adaptive inference for stochastic intervention effects. As a first step to using stochastic treatment regimes in practice, we present the tmle3shift R package, which features an implementation of a recently developed algorithm for computing targeted minimum loss-based estimates of a causal effect based on a stochastic treatment regime that shifts the natural value of the treatment based on a shifting function \\(d(A,W)\\). For a comprehensive technical presentation of some of the material in this chapter, the interested reader is invited to consult Díaz and van der Laan (2018). Additional background on the field of Targeted Learning, as well as prior work on stochastic treatment regimes, is available in van der Laan and Rose (2011), van der Laan and Rose (2018), and Díaz and van der Laan (2012). While stochastic treatment regimes are arguably the most general of the classes of interventions through which causal effects may be defined, such interventions are conceptually simple. 6.3 Data Structure and Notation Consider \\(n\\) observed units \\(O_1, \\ldots, O_n\\), where each random variable \\(O = (W, A, Y)\\) corresponds to a single observational unit. Let \\(W\\) denote baseline covariates (e.g., age, sex, education level), \\(A\\) an intervention variable of interest (e.g., nutritional supplements), and \\(Y\\) an outcome of interest (e.g., disease status). Though it need not be the case, let \\(A\\) be continuous-valued, i.e. \\(A \\in \\mathbb{R}\\). Let \\(O_i \\sim \\mathcal{P} \\in \\mathcal{M}\\), where \\(\\mathcal{M}\\) is the nonparametric statistical model defined as the set of continuous densities on \\(O\\) with respect to some dominating measure. To formalize the definition of stochastic interventions and their corresponding causal effects, we introduce a nonparametric structural equation model (NPSEM), based on Pearl (2009a), to define how the system changes under posited interventions: \\[\\begin{align*}\\label{eqn:npsem} W &amp;= f_W(U_W) \\\\ A &amp;= f_A(W, U_A) \\\\ Y &amp;= f_Y(A, W, U_Y), \\end{align*}\\] where the set of structural equations provide a mechanistic model by which the observed data \\(O\\) is assumed to have been generated. There are several standard assumptions embedded in the NPSEM – specifically, a temporal ordering that supposes that \\(Y\\) occurs after \\(A\\), which occurs after \\(W\\); each variable (i.e., \\(\\{W, A, Y\\}\\)) is assumed to have been generated from its corresponding deterministic function (i.e., \\(\\{f_W, f_A, f_Y\\}\\)) of the observed variables that precede it temporally, as well as an exogenous variable, denoted by \\(U\\); lastly, each exogenous variable is assumed to contain all unobserved causes of the corresponding observed variable. The likelihood of the data \\(O\\) admits a factorization, wherein, for \\(p_0^O\\), the density of \\(O\\) with respect to the product measure, the density evaluated on a particular observation \\(o\\) may be a written \\[\\begin{equation*}\\label{eqn:likelihood_factorization} p_0^O(x) = q^O_{0,Y}(y \\mid A = a, W = w) q^O_{0,A}(a \\mid W = w) q^O_{0,W}(w), \\end{equation*}\\] where \\(q_{0, Y}\\) is the conditional density of \\(Y\\) given \\((A, W)\\) with respect to some dominating measure, \\(q_{0, A}\\) is the conditional density of \\(A\\) given \\(W\\) with respect to dominating measure \\(\\mu\\), and \\(q_{0, W}\\) is the density of \\(W\\) with respect to dominating measure \\(\\nu\\). Further, for ease of notation, let \\(Q(A, W) = \\mathbb{E}[Y \\mid A, W]\\), \\(g(A \\mid W) = \\mathbb{P}(A \\mid W)\\), and \\(q_W\\) the marginal distribution of \\(W\\). These components of the likelihood will be essential in developing an understanding of the manner in which stochastic treatment regimes pertrub a system and how a corresponding causal effect may be evaluated. Importantly, the NPSEM parameterizes \\(p_0^O\\) in terms of the distribution of random variables \\((O, U)\\) modeled by the system of equations. In turn, this implies a model for the distribution of counterfactual random variables generated by interventions on the data-generating process. 6.4 Defining the Causal Effect of a Stochastic Intervention As causal effects are defined in terms of hypothetical interventions on the NPSEM (), we may consider stochastic interventions in two equivalent ways: (1) where the equation \\(f_A\\), giving rise to \\(A\\), is replaced by a probabilistic mechanism \\(g_{\\delta}(A \\mid W)\\) that differs from the original \\(g(A \\mid W)\\), or (2) where the observed value \\(A\\) is replaced by a new value \\(A_{d(A,W)}\\) based on applying a user-defined function \\(d(A,W)\\) to \\(A\\). In the former case, the stochastically modified value of the treatment \\(A_{\\delta}\\) is drawn from a user-specified distribution \\(g_\\delta(A \\mid W)\\), which may depend on the original distribution \\(g(A \\mid W)\\) and is indexed by a user-specified parameter \\(\\delta\\). In this case, the stochastically modified value of the treatment \\(A_{\\delta} \\sim g_{\\delta}(\\cdot \\mid W)\\). Alternatively, in the latter case, the stochastic treatment regime may be viewed as an intervention in which \\(A\\) is set equal to a value based on a hypothetical regime \\(d(A, W)\\), where regime \\(d\\) depends on the treatment level \\(A\\) that would be assigned in the absence of the regime as well as the covariates \\(W\\). In either case, one may view the stochastic intervention as generating a counterfactual random variable \\(Y_{d(A,W)} := f_Y(d(A,W), W, U_Y) \\equiv Y_{g_{\\delta}} := f_Y(A_{\\delta}, W, U_Y)\\), where the counterfactual outcome \\(Y_{d(A,W)} \\sim \\mathcal{P}_0^{\\delta}\\). Stochastic interventions of this second variety may be referred to as depending on the natural value of treatment or as modified treatment policies. Haneuse and Rotnitzky (2013) and Young, Hernán, and Robins (2014) provide a discussion of the critical differences and similarities in the identification and interpretation of these two classes of stochastic intervention. In the sequel, we will restrict our attention to a simple stochastic treatment regime that has been characterized as a modified treatment policy (MTP). Letting \\(A\\) denote a continuous-valued treatment, such as the taking of nutritional supplements (e.g., number of vitamin pills) and assume that the distribution of \\(A\\) conditional on \\(W = w\\) has support in the interval \\((l(w), u(w))\\). That is, the minimum observed number of pills taken \\(A\\) for an individual with covariates \\(W = w\\) is \\(l(w)\\); similarly, the maximum is \\(u(w)\\). Then, a simple stochastic intervention, based on a shift \\(\\delta\\), may be defined \\[\\begin{equation}\\label{eqn:shift} d(a, w) = \\begin{cases} a - \\delta &amp; \\text{if } a &gt; l(w) + \\delta \\\\ a &amp; \\text{if } a \\leq l(w) + \\delta, \\end{cases} \\end{equation}\\] where \\(0 \\leq \\delta \\leq u(w)\\) is an arbitrary pre-specified value that defines the degree to which the observed value \\(A\\) is to be shifted, where possible. Such a stochastic treatment regime may be interpreted as the result of a clinic policy that encourages individuals to consume \\(\\delta\\) more vitamin pills than they would normally, i.e., based on their baseline characteristics. The interpretation of this stochastic intervention may be made more interesting by allowing the modification \\(\\delta\\) that it engenders to be a function of the baseline covariates \\(W\\), thereby allowing for the number of vitamin pills taken to be a function of covariates such as age, sex, comorbidities, etc. This class of stochastic interventions was first introduced by Díaz and van der Laan (2012) and has been further discussed in Haneuse and Rotnitzky (2013), Díaz and van der Laan (2018), and Hejazi et al. (n.d.). Note that this intervention may be written in a manner consistent with the first class of stochastic treatment regimes discussed as well – that is, as per Díaz and van der Laan (2012), \\(\\mathbb{P}_{\\delta}(g_0)(A = a \\mid W) = g_0(a - \\delta(W) \\mid W)\\). The goal of any causal analysis motivated by such a stochastic intervention is to estimate a parameter defined as the counterfactual mean of the outcome with respect to the stochastically modified intervention distribution. In particular, the target causal estimand of our analysis is \\(\\psi_{0, \\delta} := \\mathbb{E}_{P_0^{\\delta}}\\{Y_{d(A,W)}\\}\\), the mean of the counterfactual outcome variable \\(Y_{d(A, W)}\\). In prior work, Díaz and van der Laan (2012) showed that the causal quantity of interest \\(\\mathbb{E}_0 \\{Y_{d(A, W)}\\}\\) is identified by a functional of the distribution of \\(O\\): \\[\\begin{align*}\\label{eqn:identification2012} \\psi_{0,d} = \\int_{\\mathcal{W}} \\int_{\\mathcal{A}} &amp; \\mathbb{E}_{P_0} \\{Y \\mid A = d(a, w), W = w\\} \\cdot \\\\ &amp;q_{0, A}^O(a \\mid W = w) \\cdot q_{0, W}^O(w) d\\mu(a)d\\nu(w). \\end{align*}\\] If the identification conditions may be assumed to hold, then the statistical parameter in matches exactly the counterfactual outcome \\(\\psi_{0, \\delta}\\) under such an intervention, allowing for the causal effect to be learned from the observed data \\(O\\). Díaz and van der Laan (2012) provide a derivation based on the efficient influence function (EIF) in the nonparametric model \\(\\mathcal{M}\\) and develop several estimators of this quantity, including substitution, inverse probability weighted (IPW), augmented inverse probability weighted (AIPW), and targeted maximum likelihood (TML) estimators, allowing for semiparametric-efficient estimation and inference on the quantity of interest. As per Díaz and van der Laan (2018), the statistical target parameter may also be denoted \\(\\Psi(P_0) = \\mathbb{E}_{P_0}{\\overline{Q}(d(A, W), W)}\\), where \\(\\overline{Q}(d(A, W), W)\\) is the counterfactual outcome value of a given individual under the stochastic intervention distribution. Although the focus of this work is neither the establishment of identification results nor the development of theoretical details, we review the necessary identification details for the counterfactual mean under a stochastic intervention here, in the interest of completeness. Paraphrasing from Díaz and van der Laan (2012) and Díaz and van der Laan (2018), four standard assumptions are necessary in order to establish identifiability of the causal parameter from the observed data via the statistical functional – these are Consistency: \\(Y^{d(a_i, w_i)}_i = Y_i\\) in the event \\(A_i = d(a_i, w_i)\\), for \\(i = 1, \\ldots, n\\) Stable unit value treatment assumption (SUTVA): \\(Y^{d(a_i, w_i)}_i\\) does not depend on \\(d(a_j, w_j)\\) for \\(i = 1, \\ldots, n\\) and \\(j \\neq i\\), or lack of interference (Rubin 1978, 1980). Strong ignorability: \\(A_i \\indep Y^{d(a_i, w_i)}_i \\mid W_i\\), for \\(i = 1, \\ldots, n\\). Positivity (or overlap)_: \\(a_i \\in \\mathcal{A} \\implies d(a_i, w_i) \\in \\mathcal{A}\\) for all \\(w \\in \\mathcal{W}\\), where \\(\\mathcal{A}\\) denotes the support of \\(A \\mid W = w_i \\quad \\forall i = 1, \\ldots n\\). With the identification assumptions satisfied, Díaz and van der Laan (2012) and Díaz and van der Laan (2018) provide an efficient influence function with respect to the nonparametric model \\(\\mathcal{M}\\) as \\[\\begin{equation*}\\label{eqn:eif} D(P_0)(x) = H(a, w)({y - \\overline{Q}(a, w)}) + \\overline{Q}(d(a, w), w) - \\Psi(P_0), \\end{equation*}\\] where the auxiliary covariate \\(H(a,w)\\) may be expressed \\[\\begin{equation*}\\label{eqn:aux_covar_full} H(a,w) = \\mathbb{I}(a + \\delta &lt; u(w)) \\frac{g_0(a - \\delta \\mid w)} {g_0(a \\mid w)} + \\mathbb{I}(a + \\delta \\geq u(w)), \\end{equation*}\\] which may be reduced to \\[\\begin{equation*}\\label{eqn:aux_covar_simple} H(a,w) = \\frac{g_0(a - \\delta \\mid w)}{g_0(a \\mid w)} + 1 \\end{equation*}\\] in the case that the treatment is within the limits that arise from conditioning on \\(W\\), i.e., for \\(A_i \\in (u(w) - \\delta, u(w))\\). The efficient influence function allows the construction of a semiparametric-efficient estimators may be constructed. In the sequel, we focus on a targeted maximum likelihood (TML) estimator, for which Díaz and van der Laan (2018) give a recipe: Construct initial estimators \\(g_n\\) of \\(g_0(A, W)\\) and \\(Q_n\\) of \\(\\overline{Q}_0(A, W)\\), perhaps using data-adaptive regression techniques. For each observation \\(i\\), compute an estimate \\(H_n(a_i, w_i)\\) of the auxiliary covariate \\(H(a_i,w_i)\\). Estimate the parameter \\(\\epsilon\\) in the logistic regression model \\[ \\text{logit}\\overline{Q}_{\\epsilon, n}(a, w) = \\text{logit}\\overline{Q}_n(a, w) + \\epsilon H_n(a, w),\\] or an alternative regression model incorporating weights. Compute TML estimator \\(\\Psi_n\\) of the target parameter, defining update \\(\\overline{Q}_n^{\\star}\\) of the initial estimate \\(\\overline{Q}_{n, \\epsilon_n}\\): \\[\\begin{equation*}\\label{eqn:tmle} \\Psi_n = \\Psi(P_n^{\\star}) = \\frac{1}{n} \\sum_{i = 1}^n \\overline{Q}_n^{\\star}(d(A_i, W_i), W_i). \\end{equation*}\\] 6.5 Interpreting the Causal Effect of a Stochastic Intervention Figure 6.1: Animation of how a counterfactual outcome changes as the natural treatment distribution is subjected to a simple stochastic intervention 6.6 Evaluating the Causal Effect of a Stochastic Intervention To start, let us load the packages we will use and set a seed for simulation: library(here) library(tidyverse) library(data.table) library(sl3) library(tmle3) library(tmle3shift) set.seed(429153) We need to estimate two components of the likelihood in order to construct a TML estimator. The first of these components is the outcome regression, \\(\\hat{Q}_n\\), which is a simple regression of the form \\(\\mathbb{E}[Y \\mid A,W]\\). An estimate for such a quantity may be constructed using the Super Learner algorithm. We construct the components of an sl3-style Super Learner for a regression below, using a small variety of parametric and nonparametric regression techniques: # learners used for conditional expectation regression lrn_mean &lt;- Lrnr_mean$new() lrn_fglm &lt;- Lrnr_glm_fast$new() lrn_xgb &lt;- Lrnr_xgboost$new(nrounds = 200) sl_lrn &lt;- Lrnr_sl$new( learners = list(lrn_mean, lrn_fglm, lrn_xgb), metalearner = Lrnr_nnls$new() ) The second of these is an estimate of the treatment mechanism, \\(\\hat{g}_n\\), i.e., the propensity score. In the case of a continuous intervention node \\(A\\), such a quantity takes the form \\(p(A \\mid W)\\), which is a conditional density. Generally speaking, conditional density estimation is a challenging problem that has received much attention in the literature. To estimate the treatment mechanism, we must make use of learning algorithms specifically suited to conditional density estimation; a list of such learners may be extracted from sl3 by using sl3_list_learners(): sl3_list_learners(&quot;density&quot;) [1] &quot;Lrnr_condensier&quot; &quot;Lrnr_haldensify&quot; &quot;Lrnr_rfcde&quot; [4] &quot;Lrnr_solnp_density&quot; To proceed, we’ll select two of the above learners, Lrnr_haldensify for using the highly adaptive lasso for conditional density estimation, based on an algorithm given by Díaz and van der Laan (2011) and implemented in Hejazi (2019), and Lrnr_rfcde, an approach for using random forests for conditional density estimation (Pospisil and Lee 2018). A Super Learner may be constructed by pooling estimates from each of these modified conditional density regression techniques. # learners used for conditional density regression (i.e., propensity score) lrn_haldensify &lt;- Lrnr_haldensify$new( n_bins = 5, grid_type = &quot;equal_mass&quot;, lambda_seq = exp(seq(-1, -13, length = 500)) ) lrn_rfcde &lt;- Lrnr_rfcde$new( n_trees = 1000, node_size = 5, n_basis = 31, output_type = &quot;observed&quot; ) sl_lrn_dens &lt;- Lrnr_sl$new( learners = list(lrn_haldensify, lrn_rfcde), metalearner = Lrnr_solnp_density$new() ) Finally, we construct a learner_list object for use in constructing a TML estimator of our target parameter of interest: learner_list &lt;- list(Y = sl_lrn, A = sl_lrn_dens) The learner_list object above specifies the role that each of the ensemble learners we have generated is to play in computing initial estimators to be used in building a TMLE for the parameter of interest here. In particular, it makes explicit the fact that our Q_learner is used in fitting the outcome regression while our g_learner is used in estimating the treatment mechanism. 6.6.1 Example with Simulated Data # simulate simple data for tmle-shift sketch n_obs &lt;- 500 # number of observations tx_mult &lt;- 2 # multiplier for the effect of W = 1 on the treatment ## baseline covariates -- simple, binary W &lt;- replicate(2, rbinom(n_obs, 1, 0.5)) ## create treatment based on baseline W A &lt;- rnorm(n_obs, mean = tx_mult * W, sd = 1) ## create outcome as a linear function of A, W + white noise Y &lt;- rbinom(n_obs, 1, prob = plogis(A + W)) # organize data and nodes for tmle3 data &lt;- data.table(W, A, Y) setnames(data, c(&quot;W1&quot;, &quot;W2&quot;, &quot;A&quot;, &quot;Y&quot;)) node_list &lt;- list(W = c(&quot;W1&quot;, &quot;W2&quot;), A = &quot;A&quot;, Y = &quot;Y&quot;) head(data) W1 W2 A Y 1: 1 1 2.4031607 1 2: 1 0 4.4973744 1 3: 1 0 2.0330871 1 4: 0 0 -0.8089023 0 5: 1 0 1.8432067 1 6: 1 1 1.3555863 1 The above composes our observed data structure \\(O = (W, A, Y)\\). To formally express this fact using the tlverse grammar introduced by the tmle3 package, we create a single data object and specify the functional relationships between the nodes in the directed acyclic graph (DAG) via nonparametric structural equation models (NPSEMs), reflected in the node list that we set up: We now have an observed data structure (data) and a specification of the role that each variable in the data set plays as the nodes in a DAG. To start, we will initialize a specification for the TMLE of our parameter of interest (called a tmle3_Spec in the tlverse nomenclature) simply by calling tmle_shift. We specify the argument shift_val = 0.5 when initializing the tmle3_Spec object to communicate that we’re interested in a shift of \\(0.5\\) on the scale of the treatment \\(A\\) – that is, we specify \\(\\delta = 0.5\\) (note that this is an arbitrarily chosen value for this example). # initialize a tmle specification tmle_spec &lt;- tmle_shift( shift_val = 0.5, shift_fxn = shift_additive_bounded, shift_fxn_inv = shift_additive_bounded_inv ) As seen above, the tmle_shift specification object (like all tmle3_Spec objects) does not store the data for our specific analysis of interest. Later, we’ll see that passing a data object directly to the tmle3 wrapper function, alongside the instantiated tmle_spec, will serve to construct a tmle3_Task object internally (see the tmle3 documentation for details). 6.6.2 Targeted Estimation of Stochastic Interventions Effects tmle_fit &lt;- tmle3(tmle_spec, data, node_list, learner_list) Iter: 1 fn: 696.7759 Pars: 0.87912 0.12088 Iter: 2 fn: 696.7759 Pars: 0.87912 0.12088 solnp--&gt; Completed in 2 iterations tmle_fit A tmle3_Fit that took 1 step(s) type param init_est tmle_est se lower upper 1: TSM E[Y_{A=NULL}] 0.7692472 0.7685133 0.02075147 0.7278412 0.8091855 psi_transformed lower_transformed upper_transformed 1: 0.7685133 0.7278412 0.8091855 The print method of the resultant tmle_fit object conveniently displays the results from computing our TML estimator. 6.6.3 Statistical Inference for Targeted Maximum Likelihood Estimates Recall that the asymptotic distribution of TML estimators has been studied thoroughly: \\[\\psi_n - \\psi_0 = (P_n - P_0) \\cdot D(\\bar{Q}_n^*, g_n) + R(\\hat{P}^*, P_0),\\] which, provided the following two conditions: If \\(D(\\bar{Q}_n^*, g_n)\\) converges to \\(D(P_0)\\) in \\(L_2(P_0)\\) norm, and the size of the class of functions considered for estimation of \\(\\bar{Q}_n^*\\) and \\(g_n\\) is bounded (technically, \\(\\exists \\mathcal{F}\\) st \\(D(\\bar{Q}_n^*, g_n) \\in \\mathcal{F}\\) whp, where \\(\\mathcal{F}\\) is a Donsker class), readily admits the conclusion that \\(\\psi_n - \\psi_0 = (P_n - P_0) \\cdot D(P_0) + R(\\hat{P}^*, P_0)\\). Under the additional condition that the remainder term \\(R(\\hat{P}^*, P_0)\\) decays as \\(o_P \\left( \\frac{1}{\\sqrt{n}} \\right),\\) we have that \\[\\psi_n - \\psi_0 = (P_n - P_0) \\cdot D(P_0) + o_P \\left( \\frac{1}{\\sqrt{n}} \\right),\\] which, by a central limit theorem, establishes a Gaussian limiting distribution for the estimator: \\[\\sqrt{n}(\\psi_n - \\psi) \\to N(0, V(D(P_0))),\\] where \\(V(D(P_0))\\) is the variance of the efficient influence curve (canonical gradient) when \\(\\psi\\) admits an asymptotically linear representation. The above implies that \\(\\psi_n\\) is a \\(\\sqrt{n}\\)-consistent estimator of \\(\\psi\\), that it is asymptotically normal (as given above), and that it is locally efficient. This allows us to build Wald-type confidence intervals in a straightforward manner: \\[\\psi_n \\pm z_{\\alpha} \\cdot \\frac{\\sigma_n}{\\sqrt{n}},\\] where \\(\\sigma_n^2\\) is an estimator of \\(V(D(P_0))\\). The estimator \\(\\sigma_n^2\\) may be obtained using the bootstrap or computed directly via the following \\[\\sigma_n^2 = \\frac{1}{n} \\sum_{i = 1}^{n} D^2(\\bar{Q}_n^*, g_n)(O_i)\\] Having now re-examined these facts, let’s simply examine the results of computing our TML estimator: 6.7 Extensions: Variable Importance Analysis with Stochastic Interventions 6.7.1 Defining a grid of counterfactual interventions In order to specify a grid of shifts \\(\\delta\\) to be used in defining a set of stochastic intervention policies in an a priori manner, let us consider an arbitrary scalar \\(\\delta\\) that defines a counterfactual outcome \\(\\psi_n = Q_n(d(A, W), W)\\), where, for simplicity, let \\(d(A, W) = A + \\delta\\). A simplified expression of the auxiliary covariate for the TMLE of \\(\\psi\\) is \\(H_n = \\frac{g^{\\star}(a \\mid w)}{g(a \\mid w)}\\), where \\(g^{\\star}(a \\mid w)\\) defines the treatment mechanism with the stochastic intervention implemented. Then, to ascertain whether a given choice of the shift \\(\\delta\\) is admissable (in the sense of avoiding violations of the positivity assumption), let there be a bound \\(C(\\delta) = \\frac{g^{\\star}(a \\mid w)}{g(a \\mid w)} &lt; M\\), where \\(g^{\\star}(a \\mid w)\\) is a function of \\(\\delta\\) in part, and \\(M\\) is a potentially user-specified upper bound of \\(C(\\delta)\\). Then, \\(C(\\delta)\\) is a measure of the influence of a given observation, thereby providing a way to limit the maximum influence of a given observation (by way of the bound \\(M\\) placed on \\(C(\\delta)\\)) through a choice of the shift \\(\\delta\\). We formalize and extend the procedure to determine an acceptable set of values for the shift \\(\\delta\\) in the sequel. Specifically, let there be a shift \\(d(A, W) = A + \\delta(A, W)\\), where the shift \\(\\delta(A, W)\\) is defined as \\[\\begin{equation} \\delta(a, w) = \\begin{cases} \\delta, &amp; \\delta_{\\text{min}}(a,w) \\leq \\delta \\leq \\delta_{\\text{max}}(a,w) \\\\ \\delta_{\\text{max}}(a,w), &amp; \\delta \\geq \\delta_{\\text{max}}(a,w) \\\\ \\delta_{\\text{min}}(a,w), &amp; \\delta \\leq \\delta_{\\text{min}}(a,w) \\\\ \\end{cases}, \\end{equation}\\] where \\[\\delta_{\\text{max}}(a, w) = \\text{argmax}_{\\left\\{\\delta \\geq 0, \\frac{g(a - \\delta \\mid w)}{g(a \\mid w)} \\leq M \\right\\}} \\frac{g(a - \\delta \\mid w)}{g(a \\mid w)}\\] and \\[\\delta_{\\text{min}}(a, w) = \\text{argmin}_{\\left\\{\\delta \\leq 0, \\frac{g(a - \\delta \\mid w)}{g(a \\mid w)} \\leq M \\right\\}} \\frac{g(a - \\delta \\mid w)}{g(a \\mid w)}.\\] The above provides a strategy for implementing a shift at the level of a given observation \\((a_i, w_i)\\), thereby allowing for all observations to be shifted to an appropriate value – whether \\(\\delta_{\\text{min}}\\), \\(\\delta\\), or \\(\\delta_{\\text{max}}\\). For the purpose of using such a shift in practice, the present software provides the functions shift_additive_bounded and shift_additive_bounded_inv, which define a variation of this shift: \\[\\begin{equation} \\delta(a, w) = \\begin{cases} \\delta, &amp; C(\\delta) \\leq M \\\\ 0, \\text{otherwise} \\\\ \\end{cases}, \\end{equation}\\] which corresponds to an intervention in which the natural value of treatment of a given observational unit is shifted by a value \\(\\delta\\) in the case that the ratio of the intervened density \\(g^{\\star}(a \\mid w)\\) to the natural density \\(g(a \\mid w)\\) (that is, \\(C(\\delta)\\)) does not exceed a bound \\(M\\). In the case that the ratio \\(C(\\delta)\\) exceeds the bound \\(M\\), the stochastic intervention policy does not apply to the given unit and they remain at their natural value of treatment \\(a\\). 6.7.2 Initializing vimshift through its tmle3_Spec To start, we will initialize a specification for the TMLE of our parameter of interest (called a tmle3_Spec in the tlverse nomenclature) simply by calling tmle_shift. We specify the argument shift_grid = seq(-1, 1, by = 1) when initializing the tmle3_Spec object to communicate that we’re interested in assessing the mean counterfactual outcome over a grid of shifts -1, 0, 1 on the scale of the treatment \\(A\\) (note that the numerical choice of shift is an arbitrarily chosen set of values for this example). # what&#39;s the grid of shifts we wish to consider? delta_grid &lt;- seq(-1, 1, 1) # initialize a tmle specification tmle_spec &lt;- tmle_vimshift_delta( shift_grid = delta_grid, max_shifted_ratio = 2 ) As seen above, the tmle_vimshift specification object (like all tmle3_Spec objects) does not store the data for our specific analysis of interest. Later, we’ll see that passing a data object directly to the tmle3 wrapper function, alongside the instantiated tmle_spec, will serve to construct a tmle3_Task object internally (see the tmle3 documentation for details). 6.7.3 Targeted Estimation of Stochastic Interventions Effects One may walk through the step-by-step procedure for fitting the TML estimator of the mean counterfactual outcome under each shift in the grid, using the machinery exposed by the tmle3 R package. One may invoke the tmle3 wrapper function (a user-facing convenience utility) to fit the series of TML estimators (one for each parameter defined by the grid delta) in a single function call: tmle_fit &lt;- tmle3(tmle_spec, data, node_list, learner_list) Iter: 1 fn: 693.2120 Pars: 0.89467 0.10533 Iter: 2 fn: 693.2120 Pars: 0.89467 0.10533 solnp--&gt; Completed in 2 iterations tmle_fit A tmle3_Fit that took 1 step(s) type param init_est tmle_est se lower 1: TSM E[Y_{A=NULL}] 0.6155937 0.6093765 0.021320162 0.56758978 2: TSM E[Y_{A=NULL}] 0.7146892 0.7150551 0.020930229 0.67403259 3: TSM E[Y_{A=NULL}] 0.8116881 0.8142651 0.016132073 0.78264678 4: MSM_linear MSM(intercept) 0.7139312 0.7127579 0.018632512 0.67623882 5: MSM_linear MSM(slope) 0.0979647 0.1021895 0.005858794 0.09070651 upper psi_transformed lower_transformed upper_transformed 1: 0.6511633 0.6093765 0.56758978 0.6511633 2: 0.7560776 0.7150551 0.67403259 0.7560776 3: 0.8458833 0.8142651 0.78264678 0.8458833 4: 0.7492769 0.7127579 0.67623882 0.7492769 5: 0.1136726 0.1021895 0.09070651 0.1136726 Remark: The print method of the resultant tmle_fit object conveniently displays the results from computing our TML estimator. 6.7.4 Inference with Marginal Structural Models Since we consider estimating the mean counterfactual outcome \\(\\psi_n\\) under several values of the intervention \\(\\delta\\), taken from the aforementioned \\(\\delta\\)-grid, one approach for obtaining inference on a single summary measure of these estimated quantities involves leveraging working marginal structural models (MSMs). Summarizing the estimates \\(\\psi_n\\) through a working MSM allows for inference on the trend imposed by a \\(\\delta\\)-grid to be evaluated via a simple hypothesis test on a parameter of this working MSM. Letting \\(\\psi_{\\delta}(P_0)\\) be the mean outcome under a shift \\(\\delta\\) of the treatment, we have \\(\\vec{\\psi}_{\\delta} = (\\psi_{\\delta}: \\delta)\\) with corresponding estimators \\(\\vec{\\psi}_{n, \\delta} = (\\psi_{n, \\delta}: \\delta)\\). Further, let \\(\\beta(\\vec{\\psi}_{\\delta}) = \\phi((\\psi_{\\delta}: \\delta))\\). For a given MSM \\(m_{\\beta}(\\delta)\\), we have that \\[\\beta_0 = \\text{argmin}_{\\beta} \\sum_{\\delta}(\\psi_{\\delta}(P_0) - m_{\\beta}(\\delta))^2 h(\\delta),\\] which is the solution to \\[u(\\beta, (\\psi_{\\delta}: \\delta)) = \\sum_{\\delta}h(\\delta) \\left(\\psi_{\\delta}(P_0) - m_{\\beta}(\\delta) \\right) \\frac{d}{d\\beta} m_{\\beta}(\\delta) = 0.\\] This then leads to the following expansion \\[\\beta(\\vec{\\psi}_n) - \\beta(\\vec{\\psi}_0) \\approx -\\frac{d}{d\\beta} u(\\beta_0, \\vec{\\psi}_0)^{-1} \\frac{d}{d\\psi} u(\\beta_0, \\psi_0)(\\vec{\\psi}_n - \\vec{\\psi}_0),\\] where we have \\[\\frac{d}{d\\beta} u(\\beta, \\psi) = -\\sum_{\\delta} h(\\delta) \\frac{d}{d\\beta} m_{\\beta}(\\delta)^t \\frac{d}{d\\beta} m_{\\beta}(\\delta) -\\sum_{\\delta} h(\\delta) m_{\\beta}(\\delta) \\frac{d^2}{d\\beta^2} m_{\\beta}(\\delta),\\] which, in the case of an MSM that is a linear model (since \\(\\frac{d^2}{d\\beta^2} m_{\\beta}(\\delta) = 0\\)), reduces simply to \\[\\frac{d}{d\\beta} u(\\beta, \\psi) = -\\sum_{\\delta} h(\\delta) \\frac{d}{d\\beta} m_{\\beta}(\\delta)^t \\frac{d}{d\\beta} m_{\\beta}(\\delta),\\] and \\[\\frac{d}{d\\psi}u(\\beta, \\psi)(\\psi_n - \\psi_0) = \\sum_{\\delta} h(\\delta) \\frac{d}{d\\beta} m_{\\beta}(\\delta) (\\psi_n - \\psi_0)(\\delta),\\] which we may write in terms of the efficient influence function (EIF) of \\(\\psi\\) by using the first order approximation \\((\\psi_n - \\psi_0)(\\delta) = \\frac{1}{n}\\sum_{i = 1}^n \\text{EIF}_{\\psi_{\\delta}}(O_i)\\), where \\(\\text{EIF}_{\\psi_{\\delta}}\\) is the efficient influence function (EIF) of \\(\\vec{\\psi}\\). Now, say, \\(\\vec{\\psi} = (\\psi(\\delta): \\delta)\\) is d-dimensional, then we may write the efficient influence function of the MSM parameter \\(\\beta\\) as follows \\[\\text{EIF}_{\\beta}(O) = \\left(\\sum_{\\delta} h(\\delta) \\frac{d}{d\\beta} m_{\\beta}(\\delta) \\frac{d}{d\\beta} m_{\\beta}(\\delta)^t \\right)^{-1} \\cdot \\sum_{\\delta} h(\\delta) \\frac{d}{d\\beta} m_{\\beta}(\\delta) \\text{EIF}_{\\psi_{\\delta}}(O),\\] where the first term is of dimension \\(d \\times d\\) and the second term is of dimension \\(d \\times 1\\). In the above, we assume a linear working MSM; however, an analogous procedure may be applied for working MSMs based on GLMs. Inference for a parameter of an MSM may be obtained by straightforward application of the delta method (discussed previously) – that is, we may write the efficient influence function of the MSM parameter \\(\\beta\\) in terms of the EIFs of each of the corresponding point estimates. Based on this, inference from a working MSM is rather straightforward. To wit, the limiting distribution for \\(m_{\\beta}(\\delta)\\) may be expressed \\[\\sqrt{n}(\\beta_n - \\beta_0) \\to N(0, \\Sigma),\\] where \\(\\Sigma\\) is the empirical covariance matrix of \\(\\text{EIF}_{\\beta}(O)\\). tmle_fit$summary[4:5, ] type param init_est tmle_est se lower 1: MSM_linear MSM(intercept) 0.7139312 0.7127579 0.018632512 0.67623882 2: MSM_linear MSM(slope) 0.0979647 0.1021895 0.005858794 0.09070651 upper psi_transformed lower_transformed upper_transformed 1: 0.7492769 0.7127579 0.67623882 0.7492769 2: 0.1136726 0.1021895 0.09070651 0.1136726 6.7.4.1 Directly Targeting the MSM Parameter \\(\\beta\\) Note that in the above, a working MSM is fit to the individual TML estimates of the mean counterfactual outcome under a given value of the shift \\(\\delta\\) in the supplied grid. The parameter of interest \\(\\beta\\) of the MSM is asymptotically linear (and, in fact, a TML estimator) as a consequence of its construction from individual TML estimators. In smaller samples, it may be prudent to perform a TML estimation procedure that targets the parameter \\(\\beta\\) directly, as opposed to constructing it from several independently targeted TML estimates. An approach for constructing such an estimator is proposed in the sequel. Suppose a simple working MSM \\(\\mathbb{E}Y_{g^0_{\\delta}} = \\beta_0 + \\beta_1 \\delta\\), then a TML estimator targeting \\(\\beta_0\\) and \\(\\beta_1\\) may be constructed as \\[\\overline{Q}_{n, \\epsilon}(A,W) = \\overline{Q}_n(A,W) + \\epsilon (H_1(g), H_2(g),\\] for all \\(\\delta\\), where \\(H_1(g)\\) is the auxiliary covariate for \\(\\beta_0\\) and \\(H_2(g)\\) is the auxiliary covariate for \\(\\beta_1\\). To construct a targeted maximum likelihood estimator that directly targets the parameters of the working marginal structural model, we may use the tmle_vimshift_msm Spec (instead of the tmle_vimshift_delta Spec that appears above): # initialize a tmle specification tmle_msm_spec &lt;- tmle_vimshift_msm( shift_grid = delta_grid, max_shifted_ratio = 2 ) # fit the TML estimator and examine the results tmle_msm_fit &lt;- tmle3(tmle_msm_spec, data, node_list, learner_list) Iter: 1 fn: 682.4151 Pars: 0.93517 0.06483 Iter: 2 fn: 682.4151 Pars: 0.93517 0.06483 solnp--&gt; Completed in 2 iterations tmle_msm_fit A tmle3_Fit that took 100 step(s) type param init_est tmle_est se lower 1: MSM_linear MSM(intercept) 0.71390563 0.71410481 0.02260499 0.66979986 2: MSM_linear MSM(slope) 0.09748732 0.09738706 0.01190934 0.07404518 upper psi_transformed lower_transformed upper_transformed 1: 0.7584098 0.71410481 0.66979986 0.7584098 2: 0.1207289 0.09738706 0.07404518 0.1207289 6.7.5 Example with the WASH Benefits Data To complete our walk through, let’s turn to using stochastic interventions to investigate the data from the WASH Benefits trial. To start, let’s load the data, convert all columns to be of class numeric, and take a quick look at it washb_data &lt;- fread(here(&quot;data&quot;, &quot;washb_data.csv&quot;), stringsAsFactors = TRUE) washb_data &lt;- washb_data[!is.na(momage), lapply(.SD, as.numeric)] head(washb_data, 3) whz tr fracode month aged sex momage momedu momheight hfiacat Nlt18 Ncomp 1: 0.00 1 4 9 268 2 30 2 146.40 1 3 11 2: -1.16 1 4 9 286 2 25 2 148.75 3 2 4 3: -1.05 1 20 9 264 2 25 2 152.15 1 1 10 watmin elec floor walls roof asset_wardrobe asset_table asset_chair 1: 0 1 0 1 1 0 1 1 2: 0 1 0 1 1 0 1 0 3: 0 0 0 1 1 0 0 1 asset_khat asset_chouki asset_tv asset_refrig asset_bike asset_moto 1: 1 0 1 0 0 0 2: 1 1 0 0 0 0 3: 0 1 0 0 0 0 asset_sewmach asset_mobile 1: 0 1 2: 0 1 3: 0 1 Next, we specify our NPSEM via the node_list object. For our example analysis, we’ll consider the outcome to be the weight-for-height Z-score (as in previous chapters), the intervention of interest to be the mother’s age at time of child’s birth, and take all other covariates to be potential confounders. node_list &lt;- list( W = names(washb_data)[!(names(washb_data) %in% c(&quot;whz&quot;, &quot;momage&quot;))], A = &quot;momage&quot;, Y = &quot;whz&quot; ) Were we to consider the counterfactual weight-for-height Z-score under shifts in the age of the mother at child’s birth, how would we interpret estimates of our parameter? To simplify our interpretation, consider a shift of just a year in the mother’s age (i.e., \\(\\delta = 1\\)); in this setting, a stochastic intervention would correspond to a policy advocating that potential mothers defer having a child for a single calendar year, possibly implemented through an encouragement design deployed in a clinical setting. For this example, we’ll use the variable importance strategy of considering a grid of stochastic interventions to evaluate the weight-for-height Z-score under a shift in the mother’s age down by two years (\\(\\delta = -2\\)) or up by two years (\\(\\delta = 2\\)). To do this, we simply initialize a Spec tmle_vimshift_delta just as we did in a previous example: # initialize a tmle specification for the variable importance parameter washb_vim_spec &lt;- tmle_vimshift_delta( shift_grid = c(-2, 2), max_shifted_ratio = 2 ) Prior to running our analysis, we’ll modify the learner_list object we had created such that the density estimation procedure we rely on will be only the random forest conditional density estimation procedure of Pospisil and Lee (2018), as the nonparametric conditional density approach based on the highly adaptive lasso (Díaz and van der Laan 2011; Benkeser and van der Laan 2016; Coyle and Hejazi 2018; Hejazi 2019) is currently unable to accommodate large datasets. # learners used for conditional density regression (i.e., propensity score) lrn_rfcde &lt;- Lrnr_rfcde$new( n_trees = 500, node_size = 3, n_basis = 20, output_type = &quot;observed&quot; ) # modify learner list, using existing SL for Q fit learner_list &lt;- list(Y = sl_lrn, A = lrn_rfcde) Having made the above preparations, we’re now ready to estimate the counterfactual mean of the weight-for-height Z-score under a small grid of shifts in the mother’s age at child’s birth. Just as before, we do this through a simple call to our tmle3 wrapper function: washb_tmle_fit &lt;- tmle3(washb_vim_spec, washb_data, node_list, learner_list) washb_tmle_fit 6.8 Exercises 6.8.1 The Ideas in Action Set the sl3 library of algorithms for the Super Learner to a simple, interpretable library and use this new library to estimate the counterfactual mean of mother’s age at child’s birth (momage) under a shift \\(\\delta = 0\\). What does this counterfactual mean equate to in terms of the observed data? Using a grid of values of the shift parameter \\(\\delta\\) (e.g., \\(\\{-1, 0, +1\\}\\)), repeat the analysis on the variable chosen in the preceding question, summarizing the trend for this sequence of shifts using a marginal structural model. Repeat the preceding analysis, using the same grid of shifts, but instead directly targeting the parameters of the marginal structural model. Interpret the results – that is, what does the slope of the marginal structural model tell us about the trend across the chosen sequence of shifts? 6.8.2 Review of Key Concepts Describe two (equivalent) ways in which the causal effects of stochastic interventions may be interpreted. How does the marginal structural model we used to summarize the trend along the sequence of shifts previously help to contextualize the estimated effect for a single shift? That is, how does access to estimates across several shifts and the marginal structural model parameters allow us to more richly interpret our findings? What advantages, if any, are there to targeting directly the parameters of a marginal structural model? References "],
["r6.html", "Chapter 7 A Primer on the R6 Class System 7.1 Classes, Fields, and Methods 7.2 Object Oriented Programming: Python and R", " Chapter 7 A Primer on the R6 Class System A central goal of the Targeted Learning statistical paradigm is to estimate scientifically relevant parameters in realistic (usually nonparametric) models. The tlverse is designed using basic OOP principles and the R6 OOP framework. While we’ve tried to make it easy to use the tlverse packages without worrying much about OOP, it is helpful to have some intuition about how the tlverse is structured. Here, we briefly outline some key concepts from OOP. Readers familiar with OOP basics are invited to skip this section. 7.1 Classes, Fields, and Methods The key concept of OOP is that of an object, a collection of data and functions that corresponds to some conceptual unit. Objects have two main types of elements: fields, which can be thought of as nouns, are information about an object, and methods, which can be thought of as verbs, are actions an object can perform. Objects are members of classes, which define what those specific fields and methods are. Classes can inherit elements from other classes (sometimes called base classes) – accordingly, classes that are similar, but not exactly the same, can share some parts of their definitions. Many different implementations of OOP exist, with variations in how these concepts are implemented and used. R has several different implementations, including S3, S4, reference classes, and R6. The tlverse uses the R6 implementation. In R6, methods and fields of a class object are accessed using the $ operator. For a more thorough introduction to R’s various OOP systems, see http://adv-r.had.co.nz/OO-essentials.html, from Hadley Wickham’s Advanced R (???). 7.2 Object Oriented Programming: Python and R OO concepts (classes with inherentence) were baked into Python from the first published version (version 0.9 in 1991). In contrast, R gets its OO “approach” from its predecessor, S, first released in 1976. For the first 15 years, S had no support for classes, then, suddenly, S got two OO frameworks bolted on in rapid succession: informal classes with S3 in 1991, and formal classes with S4 in 1998. This process continues, with new OO frameworks being periodically released, to try to improve the lackluster OO support in R, with reference classes (R5, 2010) and R6 (2014). Of these, R6 behaves most like Python classes (and also most like OOP focused languages like C++ and Java), including having method definitions be part of class definitions, and allowing objects to be modified by reference. "],
["references.html", "References", " References "]
]
