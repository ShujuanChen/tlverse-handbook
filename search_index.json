[
["index.html", "The Hitchhiker’s Guide to the tlverse or a Targeted Learning Practitioner’s Handbook Preface About this book Outline What this book is not About the authors Acknowledgements 0.1 Recommended Learning Resources 0.2 Setup instructions", " The Hitchhiker’s Guide to the tlverse or a Targeted Learning Practitioner’s Handbook Jeremy Coyle, Nima Hejazi, Ivana Malenica, Rachael Phillips, Alan Hubbard, Mark van der Laan February 07, 2020 Preface About this book The Hitchhiker’s Guide to the tlverse, or a Targeted Learning Practitioner’s Handbook is an open-source and fully-reproducible electronic handbook for applying the targeted learning methodology in practice using the tlverse software ecosystem. This work is currently in an early draft phase and is available to facilitate input from the community. To view or contribute to the available content, consider visiting the GitHub repository for this site. Outline The contents of this handbook are meant to serve as a reference guide for applied research as well as materials that can be taught in a series of short courses focused on the applications of Targeted Learning. Each section introduces a set of distinct causal questions, motivated by a case study, alongside statistical methodology and software for assessing the causal claim of interest. The (evolving) set of materials includes Motivation: Why we need a statistical revolution The Roadmap and introductory case study: the WASH Beneifits data Introduction to the tlverse software ecosystem Ensemble machine learning with the sl3 package Targeted learning for causal inference with the tmle3 package Optimal treatments regimes and the tmle3mopttx package Stochastic treatment regimes and the tmle3shift package Coda: Why we need a statistical revolution What this book is not The focus of this work is not on providing in-depth technical descriptions of current statistical methodology or recent advancements. Instead, the goal is to convey key details of state-of-the-art techniques in an manner that is both clear and complete, without burdening the reader with extraneous information. We hope that the presentations herein will serve as references for researchers – methodologists and domain specialists alike – that empower them to deploy the central tools of Targeted Learning in an efficient manner. For technical details and in-depth descriptions of both classical theory and recent advances in the field of Targeted Learning, the interested reader is invited to consult van der Laan and Rose (2011) and/or van der Laan and Rose (2018) as appropriate. The primary literature in statistical causal inference, machine learning, and non/semiparametric theory include many of the most recent advances in Targeted Learning and related areas. About the authors Jeremy Coyle Jeremy R. Coyle, Ph.D., is a consulting data scientist and statistical programmer, currently leading the software development effort that has produced the tlverse ecosystem of R packages and related software tools. Jeremy earned his Ph.D. in Biostatistics from UC Berkeley in 2016, primarily under the supervision of Alan Hubbard. Nima Hejazi Nima S. Hejazi is a Ph.D. candidate in biostatistics with a designated emphasis in computational and genomic biology, working jointly with Mark van der Laan and Alan Hubbard. Nima is affiliated with UC Berkeley’s Center for Computational Biology and NIH Biomedical Big Data training program. His research interests span causal inference, nonparametric inference and machine learning, targeted loss-based estimation, survival analysis, statistical computing, reproducible research, and high-dimensional biology. He is also passionate about software development for applied statistics, including software design, automated testing, and reproducible coding practices. For more information, see https://nimahejazi.org. Ivana Malenica Ivana Malenica is a Ph.D. student in biostatistics advised by Mark van der Laan. Ivana is currently a fellow at the Berkeley Institute for Data Science, after serving as a NIH Biomedical Big Data and Freeport-McMoRan Genomic Engine fellow. She earned her Master’s in Biostatistics and Bachelor’s in Mathematics, and spent some time at the Translational Genomics Research Institute. Very broadly, her research interests span non/semi-parametric theory, probability theory, machine learning, causal inference and high-dimensional statistics. Most of her current work involves complex dependent settings (dependence through time and network) and adaptive sequential designs. Rachael Phillips Rachael is a Ph.D. student in biostatistics, advised by Alan Hubbard and Mark van der Laan. She has an M.A. in Biostatistics, B.S. in Biology with a Chemistry minor and a B.A. in Mathematics with a Spanish minor. Rachael’s research focuses on narrowing the gap between the theory and application of modern statistics for real-world data science. Specifically, Rachael is motivated by issues arising in healthcare, and she leverages strategies rooted in causal inference and nonparametric estimation to build clinician-tailored, machine-driven solutions. Rachael is also passionate about free, online-mediated education and its corresponding pedagogy. Alan Hubbard Alan E. Hubbard is Professor of Biostatistics, former head of the Division of Biostatistics at UC Berkeley, and head of data analytics core at UC Berkeley’s SuperFund research program. His current research interests include causal inference, variable importance analysis, statistical machine learning, estimation of and inference for data-adaptive statistical target parameters, and targeted minimum loss-based estimation. Research in his group is generally motivated by applications to problems in computational biology, epidemiology, and precision medicine. Mark van der Laan Mark J. van der Laan, PhD, is Professor of Biostatistics and Statistics at UC Berkeley. His research interests include statistical methods in computational biology, survival analysis, censored data, adaptive designs, targeted maximum likelihood estimation, causal inference, data-adaptive loss-based learning, and multiple testing. His research group developed loss-based super learning in semiparametric models, based on cross-validation, as a generic optimal tool for the estimation of infinite-dimensional parameters, such as nonparametric density estimation and prediction with both censored and uncensored data. Building on this work, his research group developed targeted maximum likelihood estimation for a target parameter of the data-generating distribution in arbitrary semiparametric and nonparametric models, as a generic optimal methodology for statistical and causal inference. Most recently, Mark’s group has focused in part on the development of a centralized, principled set of software tools for targeted learning, the tlverse. For more information, see https://vanderlaan-lab.org. Acknowledgements 0.1 Recommended Learning Resources To effectively utilize this handbook, the reader need not be a fully trained statistician to begin understanding and applying these methods. However, it is highly recommended for the reader to have an understanding of basic statistical concepts such as confounding, probability distributions, confidence intervals, hypothesis tests, and regression. Advanced knowledge of mathematical statistics may be useful but is not necessary. Familiarity with the R programming language will be essential. We also recommend an understanding of introductory causal inference. For learning the R programming language we recommend the following (free) introductory resources: Software Carpentry’s Programming with R Software Carpentry’s R for Reproducible Scientific Analysis Garret Grolemund and Hadley Wickham’s R for Data Science For a general introduction to causal inference, we recommend Miguel A. Hernán and James M. Robins’ Causal Inference, forthcoming 2019 Jason A. Roy’s A Crash Course in Causality: Inferring Causal Effects from Observational Data on Coursera 0.2 Setup instructions 0.2.1 R and RStudio R and RStudio are separate downloads and installations. R is the underlying statistical computing environment. RStudio is a graphical integrated development environment (IDE) that makes using R much easier and more interactive. You need to install R before you install RStudio. 0.2.1.1 Windows 0.2.1.1.1 If you already have R and RStudio installed Open RStudio, and click on “Help” &gt; “Check for updates”. If a new version is available, quit RStudio, and download the latest version for RStudio. To check which version of R you are using, start RStudio and the first thing that appears in the console indicates the version of R you are running. Alternatively, you can type sessionInfo(), which will also display which version of R you are running. Go on the CRAN website and check whether a more recent version is available. If so, please download and install it. You can check here for more information on how to remove old versions from your system if you wish to do so. 0.2.1.1.2 If you don’t have R and RStudio installed Download R from the CRAN website. Run the .exe file that was just downloaded Go to the RStudio download page Under Installers select RStudio x.yy.zzz - Windows XP/Vista/7/8 (where x, y, and z represent version numbers) Double click the file to install it Once it’s installed, open RStudio to make sure it works and you don’t get any error messages. 0.2.1.2 macOS 0.2.1.2.1 If you already have R and RStudio installed Open RStudio, and click on “Help” &gt; “Check for updates”. If a new version is available, quit RStudio, and download the latest version for RStudio. To check the version of R you are using, start RStudio and the first thing that appears on the terminal indicates the version of R you are running. Alternatively, you can type sessionInfo(), which will also display which version of R you are running. Go on the CRAN website and check whether a more recent version is available. If so, please download and install it. 0.2.1.2.2 If you don’t have R and RStudio installed Download R from the CRAN website. Select the .pkg file for the latest R version Double click on the downloaded file to install R It is also a good idea to install XQuartz (needed by some packages) Go to the RStudio download page Under Installers select RStudio x.yy.zzz - Mac OS X 10.6+ (64-bit) (where x, y, and z represent version numbers) Double click the file to install RStudio Once it’s installed, open RStudio to make sure it works and you don’t get any error messages. 0.2.1.3 Linux Follow the instructions for your distribution from CRAN, they provide information to get the most recent version of R for common distributions. For most distributions, you could use your package manager (e.g., for Debian/Ubuntu run sudo apt-get install r-base, and for Fedora sudo yum install R), but we don’t recommend this approach as the versions provided by this are usually out of date. In any case, make sure you have at least R 3.3.1. Go to the RStudio download page Under Installers select the version that matches your distribution, and install it with your preferred method (e.g., with Debian/Ubuntu sudo dpkg -i rstudio-x.yy.zzz-amd64.deb at the terminal). Once it’s installed, open RStudio to make sure it works and you don’t get any error messages. These setup instructions are adapted from those written for Data Carpentry: R for Data Analysis and Visualization of Ecological Data. References "],
["motivation.html", "Motivation", " Motivation “One enemy of robust science is our humanity — our appetite for being right, and our tendency to find patterns in noise, to see supporting evidence for what we already believe is true, and to ignore the facts that do not fit.” — (“Let’s Think About Cognitive Bias” 2015) Scientific research is at a unique point in history. The need to improve rigor and reproducibility in our field is greater than ever; corroboration moves science forward, yet there is a growing alarm about results that cannot be reproduced and that report false discoveries (Baker 2016). Consequences of not meeting this need will result in further decline in the rate of scientific progression, the reputation of the sciences, and the public’s trust in its findings (Munafò et al. 2017; “How Scientists Fool Themselves – and How They Can Stop” 2015). “The key question we want to answer when seeing the results of any scientific study is whether we can trust the data analysis.” — Peng (2015) Unfortunately, at its current state the culture of data analysis and statistics actually enables human bias through improper model selection. All hypothesis tests and estimators are derived from statistical models, so to obtain valid estimates and inference it is critical that the statistical model contains the process that generated the data. Perhaps treatment was randomized or only depended on a small number of baseline covariates; this knowledge should and can be incorporated in the model. Alternatively, maybe the data is observational, and there is no knowledge about the data-generating process (DGP). If this is the case, then the statistical model should contain all data distributions. In practice; however, models are not selected based on knowledge of the DGP, instead models are often selected based on (1) the p-values they yield, (2) their convenience of implementation, and/or (3) an analysts loyalty to a particular model. This practice of “cargo-cult statistics — the ritualistic miming of statistics rather than conscientious practice,” (Stark and Saltelli 2018) is characterized by arbitrary modeling choices, even though these choices often result in different answers to the same research question. That is, “increasingly often, [statistics] is used instead to aid and abet weak science, a role it can perform well when used mechanically or ritually,” as opposed to its original purpose of safeguarding against weak science (Stark and Saltelli 2018). This presents a fundamental drive behind the epidemic of false findings that scientific research is suffering from (van der Laan and Starmans 2014). “We suggest that the weak statistical understanding is probably due to inadequate”statistics lite&quot; education. This approach does not build up appropriate mathematical fundamentals and does not provide scientifically rigorous introduction into statistics. Hence, students’ knowledge may remain imprecise, patchy, and prone to serious misunderstandings. What this approach achieves, however, is providing students with false confidence of being able to use inferential tools whereas they usually only interpret the p-value provided by black box statistical software. While this educational problem remains unaddressed, poor statistical practices will prevail regardless of what procedures and measures may be favored and/or banned by editorials.&quot; — Szucs and Ioannidis (2017) Our team at The University of California, Berkeley, is uniquely positioned to provide such an education. Spearheaded by Professor Mark van der Laan, and spreading rapidly by many of his students and colleagues who have greatly enriched the field, the aptly named “Targeted Learning” methodology targets the scientific question at hand and is counter to the current culture of “convenience statistics” which opens the door to biased estimation, misleading results, and false discoveries. Targeted Learning restores the fundamentals that formalized the field of statistics, such as the that facts that a statistical model represents real knowledge about the experiment that generated the data, and a target parameter represents what we are seeking to learn from the data as a feature of the distribution that generated it (van der Laan and Starmans 2014). In this way, Targeted Learning defines a truth and establishes a principled standard for estimation, thereby inhibiting these all-too-human biases (e.g., hindsight bias, confirmation bias, and outcome bias) from infiltrating analysis. “The key for effective classical [statistical] inference is to have well-defined questions and an analysis plan that tests those questions.” — Nosek et al. (2018) The objective for this handbook is to provide training to students, researchers, industry professionals, faculty in science, public health, statistics, and other fields to empower them with the necessary knowledge and skills to utilize the sound methodology of Targeted Learning — a technique that provides tailored pre-specified machines for answering queries, so that each data analysis is completely reproducible, and estimators are efficient, minimally biased, and provide formal statistical inference. Just as the conscientious use of modern statistical methodology is necessary to ensure that scientific practice thrives, it remains critical to acknowledge the role that robust software plays in allowing practitioners direct access to published results. We recall that “an article…in a scientific publication is not the scholarship itself, it is merely advertising of the scholarship. The actual scholarship is the complete software development environment and the complete set of instructions which generated the figures,” thus making the availability and adoption of robust statistical software key to enhancing the transparency that is an inherent aspect of science (Buckheit and Donoho 1995). For a statistical methodology to be readily accessible in practice, it is crucial that it is accompanied by robust user-friendly software (Pullenayegum et al. 2016; Stromberg and others 2004). The tlverse software ecosystem was developed to fulfill this need for the Targeted Learning methodology. Not only does this software facilitate computationally reproducible and efficient analyses, it is also a tool for Targeted Learning education since its workflow mirrors that of the methodology. In particular, the tlverse paradigm does not focus on implementing a specific estimator or a small set of related estimators. Instead, the focus is on exposing the statistical framework of Targeted Learning itself — all R packages in the tlverse ecosystem directly model the key objects defined in the mathematical and theoretical framework of Targeted Learning. What’s more, the tlverse R packages share a core set of design principles centered on extensibility, allowing for them to be used in conjunction with each other and built upon one other in a cohesive fashion. In this handbook, the reader will embark on a journey through the tlverse ecosystem. Guided by R programming exercises, case studies, and intuitive explanation readers will build a toolbox for applying the Targeted Learning statistical methodology, which will translate to real-world causal inference analyses. Some preliminaries are required prior to this learning endeavor – we have made available a list of recommended learning resources. References "],
["intro.html", "Chapter 1 The Roadmap for Targeted Learning 1.1 Learning Objectives 1.2 Introduction 1.3 The Roadmap 1.4 Summary of the Roadmap 1.5 Causal Target Parameters", " Chapter 1 The Roadmap for Targeted Learning 1.1 Learning Objectives By the end of this chapter you will be able to: Translate scientific questions to statistical questions. Define a statistical model based on the knowledge of the experiment that generated the data. Identify a causal parameter as a function of the observed data distribution. Explain the following causal and statistical assumptions and their implications: i.i.d., consistency, interference, positivity, SUTVA. 1.2 Introduction The roadmap of statistical learning is concerned with the translation from real-world data applications to a mathematical and statistical formulation of the relevant estimation problem. This involves data as a random variable having a probability distribution, scientific knowledge represented by a statistical model, a statistical target parameter representing an answer to the question of interest, and the notion of an estimator and sampling distribution of the estimator. 1.3 The Roadmap Following the roadmap is a process of five stages. Data as a random variable with a probability distribution, \\(O \\sim P_0\\). The statistical model \\(\\mathcal{M}\\) such that \\(P_0 \\in \\mathcal{M}\\). The statistical target parameter \\(\\Psi\\) and estimand \\(\\Psi(P_0)\\). The estimator \\(\\hat{\\Psi}\\) and estimate \\(\\hat{\\Psi}(P_n)\\). A measure of uncertainty for the estimate \\(\\hat{\\Psi}(P_n)\\). (1) Data as a random variable with a probability distribution, \\(O \\sim P_0\\) The data set we’re confronted with is the result of an experiment and we can view the data as a random variable, \\(O\\), because if we repeat the experiment we would have a different realization of this experiment. In particular, if we repeat the experiment many times we could learn the probability distribution, \\(P_0\\), of our data. So, the observed data \\(O\\) with probability distribution \\(P_0\\) are \\(n\\) independent identically distributed (i.i.d.) observations of the random variable \\(O; O_1, \\ldots, O_n\\). Note that while not all data are i.i.d., there are ways to handle non-i.i.d. data, such as establishing conditional independence, stratifying data to create sets of identically distributed data, etc. It is crucial that researchers be absolutely clear about what they actually know about the data-generating distribution for a given problem of interest. Unfortunately, communication between statisticians and researchers is often fraught with misinterpretation. The roadmap provides a mechanism by which to ensure clear communication between research and statistician – it truly helps with this communication! The empirical probability measure, \\(P_n\\) Once we have \\(n\\) of such i.i.d. observations we have an empirical probability measure, \\(P_n\\). The empirical probability measure is an approximation of the true probability measure \\(P_0\\), allowing us to learn from our data. For example, we can define the empirical probability measure of a set, \\(A\\), to be the proportion of observations which end up in \\(A\\). That is, \\[\\begin{equation*} P_n(A) = \\frac{1}{n}\\sum_{i=1}^{n} \\mathbb{I}(O_i \\in A) \\end{equation*}\\] In order to start learning something, we need to ask “What do we know about the probability distribution of the data?” This brings us to Step 2. (2) The statistical model \\(\\mathcal{M}\\) such that \\(P_0 \\in \\mathcal{M}\\) The statistical model \\(\\mathcal{M}\\) is defined by the question we asked at the end of . It is defined as the set of possible probability distributions for our observed data. Often \\(\\mathcal{M}\\) is very large (possibly infinite-dimensional), to reflect the fact that statistical knowledge is limited. In the case that \\(\\mathcal{M}\\) is infinite-dimensional, we deem this a nonparametric statistical model. Alternatively, if the probability distribution of the data at hand is described by a finite number of parameters, then the statistical model is parametric. In this case, we prescribe to the belief that the random variable \\(O\\) being observed has, e.g., a normal distribution with mean \\(\\mu\\) and variance \\(\\sigma^2\\). More formally, a parametric model may be defined \\[\\begin{equation*} \\mathcal{M} = \\{P_{\\theta} : \\theta \\in \\mathcal{R}^d \\} \\end{equation*}\\] Sadly, the assumption that the data-generating distribution has a specific, parametric forms is all-too-common, even when such is a leap of faith. This practice of oversimplification in the current culture of data analysis typically derails any attempt at trying to answer the scientific question at hand; alas, such statements as the ever-popular quip of Box that “All models are wrong but some are useful,” encourage the data analyst to make arbitrary choices even when that often force significant differences in answers to the same estimation problem. The Targeted Learning paradigm does not suffer from this bias since it defines the statistical model through a representation of the true data-generating distribution corresponding to the observed data. Now, on to Step 3: ``What are we trying to learn from the data?&quot; (3) The statistical target parameter \\(\\Psi\\) and estimand \\(\\Psi(P_0)\\) The statistical target parameter, \\(\\Psi\\), is defined as a mapping from the statistical model, \\(\\mathcal{M}\\), to the parameter space (i.e., a real number) \\(\\mathcal{R}\\). That is, \\(\\Psi: \\mathcal{M}\\rightarrow\\mathbb{R}\\). The estimand may be seen as a representation of the quantity that we wish to learn from the data, the answer to a well-specified (often causal) question of interest. In contrast to purely statistical estimands, causal estimands require identification from the observed data, based on causal models that include several untestable assumptions, described in more detail in the section on causal target parameters. For a simple example, consider a data set which contains observations of a survival time on every subject, for which our question of interest is “What’s the probability that someone lives longer than five years?” We have, \\[\\begin{equation*} \\Psi(P_0) = \\mathbb{P}(O &gt; 5) \\end{equation*}\\] This answer to this question is the estimand, \\(\\Psi(P_0)\\), which is the quantity we’re trying to learn from the data. Once we have defined \\(O\\), \\(\\mathcal{M}\\) and \\(\\Psi(P_0)\\) we have formally defined the statistical estimation problem. (4) The estimator \\(\\hat{\\Psi}\\) and estimate \\(\\hat{\\Psi}(P_n)\\) To obtain a good approximation of the estimand, we need an estimator, an a priori-specified algorithm defined as a mapping from the set of possible empirical distributions, \\(P_n\\), which live in a non-parametric statistical model, \\(\\mathcal{M}_{NP}\\) (\\(P_n \\in \\mathcal{M}_{NP}\\)), to the parameter space of the parameter of interest. That is, \\(\\hat{\\Psi} : \\mathcal{M}_{NP} \\rightarrow \\mathbb{R}^d\\). The estimator is a function that takes as input the observed data, a realization of \\(P_n\\), and gives as output a value in the parameter space, which is the estimate, \\(\\hat{\\Psi}(P_n)\\). Where the estimator may be seen as an operator that maps the observed data and corresponding empirical distribution to a value in the parameter space, the numerical output that produced such a function is the estimate. Thus, it is an element of the parameter space based on the empirical probability distribution of the observed data. If we plug in a realization of \\(P_n\\) (based on a sample size \\(n\\) of the random variable \\(O\\)), we get back an estimate \\(\\hat{\\Psi}(P_n)\\) of the true parameter value \\(\\Psi(P_0)\\). In order to quantify the uncertainty in our estimate of the target parameter (i.e., to construct statistical inference), an understanding of the sampling distribution of our estimator will be necessary. This brings us to Step 5. (5) A measure of uncertainty for the estimate \\(\\hat{\\Psi}(P_n)\\) Since the estimator \\(\\hat{\\Psi}\\) is a function of the empirical distribution \\(P_n\\), the estimator itself is a random variable with a sampling distribution. So, if we repeat the experiment of drawing \\(n\\) observations we would every time end up with a different realization of our estimate and our estimator has a sampling distribution. The sampling distribution of an estimator can be theoretically validated to be approximately normally distributed by a Central Limit Theorem (CLT). A class of Central Limit Theorems (CLTs) are statements regarding the convergence of the sampling distribution of an estimator to a normal distribution. In general, we will construct estimators whose limit sampling distributions may be shown to be approximately normal distributed as sample size increases. For large enough \\(n\\) we have, \\[\\begin{equation*} \\hat{\\Psi}(P_n) \\sim N \\left(\\Psi(P_0), \\frac{\\sigma^2}{n}\\right), \\end{equation*}\\] permitting statistical inference. Now, we can proceed to quantify the uncertainty of our chosen estimator by construction of hypothesis tests and confidence intervals. For example, we may construct a confidence interval at level \\((1 - \\alpha)\\) for our estimand, \\(\\Psi(P_0)\\): \\[\\begin{equation*} \\hat{\\Psi}(P_n) \\pm z_{1 - \\frac{\\alpha}{2}} \\left(\\frac{\\sigma}{\\sqrt{n}}\\right), \\end{equation*}\\] where \\(z_{1 - \\frac{\\alpha}{2}}\\) is the \\((1 - \\frac{\\alpha}{2})^\\text{th}\\) quantile of the standard normal distribution. Often, we will be interested in constructing 95% confidence intervals, corresponding to mass \\(\\alpha = 0.05\\) in either tail of the limit distribution; thus, we will typically take \\(z_{1 - \\frac{\\alpha}{2}} \\approx 1.96\\). Note: we will typically have to estimate the standard error, \\(\\frac{\\sigma}{\\sqrt{n}}\\). A 95% confidence interval means that if we were to take 100 different samples of size \\(n\\) and compute a 95% confidence interval for each sample then approximately 95 of the 100 confidence intervals would contain the estimand, \\(\\Psi(P_0)\\). More practically, this means that there is a 95% probability (or 95% confidence) that the confidence interval procedure will contain the true estimand. However, any single estimated confidence interval either will contain the true estimand or will not. 1.4 Summary of the Roadmap Data, \\(O\\), is viewed as a random variable that has a probability distribution. We often have \\(n\\) units of independent identically distributed units with probability distribution \\(P_0\\) (\\(O_1, \\ldots, O_n \\sim P_0\\)). We have statistical knowledge about the experiment that generated this data. In other words, we make a statement that the true data distribution \\(P_0\\) falls in a certain set called a statistical model, \\(\\mathcal{M}\\). Often these sets are very large because statistical knowledge is very limited so these statistical models are often infinite dimensional models. Our statistical query is, “What are we trying to learn from the data?” denoted by the statistical target parameter, \\(\\Psi\\), which maps the \\(P_0\\) into the estimand, \\(\\Psi(P_0)\\). At this point the statistical estimation problem is formally defined and now we will need statistical theory to guide us in the construction of estimators. There’s a lot of statistical theory we will review in this course that, in particular, relies on the Central Limit Theorem, allowing us to come up with estimators that are approximately normally distributed and also allowing us to come with statistical inference (i.e., confidence intervals and hypothesis tests). 1.5 Causal Target Parameters In many cases, we are interested in questions that ask questions regarding the effect of an intervention on a future outcome of interest. These questions can be represented as causal estimands and 1.5.1 The Causal Model After formalizing the data and the statistical model, we can define a causal model to express causal parameters of interest. Directed acyclic graphs (DAGs) are one useful tool to express what we know about the causal relations among variables. Ignoring exogenous \\(U\\) terms (explained below), we assume the following ordering of the variables in the observed data \\(O\\). While directed acyclic graphs (DAGs) like above provide a convenient means by which to visualize causal relations between variables, the same causal relations among variables can be represented via a set of structural equations, which define the non-parametric structural equation model (NPSEM): \\[\\begin{align*} W &amp;= f_W(U_W) \\\\ A &amp;= f_A(W, U_A) \\\\ Y &amp;= f_Y(W, A, U_Y), \\end{align*}\\] where \\(U_W\\), \\(U_A\\), and \\(U_Y\\) represent the unmeasured exogenous background characteristics that influence the value of each variable. In the NPSEM, \\(f_W\\), \\(f_A\\) and \\(f_Y\\) denote that each variable (for \\(W\\), \\(A\\) and \\(Y\\), respectively) is a function of its parents and unmeasured background characteristics, but note that there is no imposition of any particular functional constraints(e.g., linear, logit-linear, only one interaction, etc.). For this reason, they are called non-parametric structural equation models (NPSEMs). The DAG and set of nonparametric structural equations represent exactly the same information and so may be used interchangeably. The first hypothetical experiment we will consider is assigning exposure to the whole population and observing the outcome, and then assigning no exposure to the whole population and observing the outcome. On the nonparametric structural equations, this corresponds to a comparison of the outcome distribution in the population under two interventions: \\(A\\) is set to \\(1\\) for all individuals, and \\(A\\) is set to \\(0\\) for all individuals. These interventions imply two new nonparametric structural equation models. For the case \\(A = 1\\), we have \\[\\begin{align*} W &amp;= f_W(U_W) \\\\ A &amp;= 1 \\\\ Y(1) &amp;= f_Y(W, 1, U_Y), \\end{align*}\\] and for the case \\(A=0\\), \\[\\begin{align*} W &amp;= f_W(U_W) \\\\ A &amp;= 0 \\\\ Y(0) &amp;= f_Y(W, 0, U_Y). \\end{align*}\\] In these equations, \\(A\\) is no longer a function of \\(W\\) because we have intervened on the system, setting \\(A\\) deterministically to either of the values \\(1\\) or \\(0\\). The new symbols \\(Y(1)\\) and \\(Y(0)\\) indicate the outcome variable in our population if it were generated by the respective NPSEMs above; these are often called counterfactuals (since they run contrary-to-fact). The difference between the means of the outcome under these two interventions defines a parameter that is often called the “average treatment effect” (ATE), denoted \\[\\begin{equation}\\label{eqn:ate} ATE = \\mathbb{E}_X(Y(1)-Y(0)), \\end{equation}\\] where \\(\\mathbb{E}_X\\) is the mean under the theoretical (unobserved) full data \\(X = (W, Y(1), Y(0))\\). Note, we can define much more complicated interventions on NPSEM’s, such as interventions based upon rules (themselves based upon covariates), stochastic rules, etc. and each results in a different targeted parameter and entails different identifiability assumptions discussed below. 1.5.2 Identifiability Because we can never observe both \\(Y(0)\\) (the counterfactual outcome when \\(A=0\\)) and \\(Y(1)\\) (similarly, the counterfactual outcome when \\(A=1\\)), we cannot estimate directly. Instead, we have to make assumptions under which this quantity may be estimated from the observed data \\(O \\sim P_0\\) under the data-generating distribution \\(P_0\\). Fortunately, given the causal model specified in the NPSEM above, we can, with a handful of untestable assumptions, estimate the ATE, even from observational data. These assumptions may be summarized as follows The causal graph implies \\(Y(a) \\perp A\\) for all \\(a \\in \\mathcal{A}\\), which is the randomization assumption. In the case of observational data, the analogous assumption is strong ignorability or no unmeasured confounding \\(Y(a) \\perp A \\mid W\\) for all \\(a \\in \\mathcal{A}\\); Although not represented in the causal graph, also required is the assumption of no interference between units, that is, the outcome for unit \\(i\\) \\(Y_i\\) is not affected by exposure for unit \\(j\\) \\(A_j\\) unless \\(i=j\\); Consistency of the treatment mechanism is also required, i.e., the outcome for unit \\(i\\) is \\(Y_i(a)\\) whenever \\(A_i = a\\), an assumption also known as “no other versions of treatment”; It is also necessary that all observed units, across strata defined by \\(W\\), have a bounded (non-deterministic) probability of receiving treatment – that is, \\(0 &lt; \\mathbb{P}(A = a \\mid W) &lt; 1\\) for all \\(a\\) and \\(W\\)). This assumption is referred to as positivity or overlap. Remark: Together, (2) and (3), the assumptions of no interference and consistency, respectively, are jointly referred to as the stable unit treatment value assumption (SUTVA). Given these assumptions, the ATE may be re-written as a function of \\(P_0\\), specifically \\[\\begin{equation}\\label{eqn:estimand} ATE = \\mathbb{E}_0(Y(1) - Y(0)) = \\mathbb{E}_0 \\left(\\mathbb{E}_0[Y \\mid A = 1, W] - \\mathbb{E}_0[Y \\mid A = 0, W]\\right), \\end{equation}\\] or the difference in the predicted outcome values for each subject, under the contrast of treatment conditions (\\(A = 0\\) vs. \\(A = 1\\)), in the population, averaged over all observations. Thus, a parameter of a theoretical “full” data distribution can be represented as an estimand of the observed data distribution. Significantly, there is nothing about the representation in that requires parameteric assumptions; thus, the regressions on the right hand side may be estimated freely with machine learning. With different parameters, there will be potentially different identifiability assumptions and the resulting estimands can be functions of different components of \\(P_0\\). We discuss several more complex estimands in later sections of this handbook. "],
["tlverse.html", "Chapter 2 Welcome to the tlverse 2.1 Learning Objectives 2.2 What is the tlverse? 2.3 tlverse components 2.4 Installation", " Chapter 2 Welcome to the tlverse 2.1 Learning Objectives Understand the tlverse ecosystem conceptually Identify the core components of the tlverse Install tlverse R packages Understand the Targeted Learning roadmap Learn about the WASH Benefits example data 2.2 What is the tlverse? The tlverse is a new framework for doing Targeted Learning in R, inspired by the tidyverse ecosystem of R packages. By analogy to the tidyverse: The tidyverse is an opinionated collection of R packages designed for data science. All packages share an underlying design philosophy, grammar, and data structures. So, the tlverse is an opinionated collection of R packages for Targeted Learning sharing an underlying philosophy, grammar, and set of data structures 2.3 tlverse components These are the main packages that represent the core of the tlverse: sl3: Modern Super Learning with Pipelines What? A modern object-oriented re-implementation of the Super Learner algorithm, employing recently developed paradigms for R programming. Why? A design that leverages modern tools for fast computation, is forward-looking, and can form one of the cornerstones of the tlverse. tmle3: An Engine for Targeted Learning What? A generalized framework that simplifies Targeted Learning by identifying and implementing a series of common statistical estimation procedures. Why? A common interface and engine that accommodates current algorithmic approaches to Targeted Learning and is still flexible enough to remain the engine even as new techniques are developed. In addition to the engines that drive development in the tlverse, there are some supporting packages – in particular, we have two… origami: A Generalized Framework for Cross-Validation What? A generalized framework for flexible cross-validation Why? Cross-validation is a key part of ensuring error estimates are honest and preventing overfitting. It is an essential part of the both the Super Learner algorithm and Targeted Learning. delayed: Parallelization Framework for Dependent Tasks What? A framework for delayed computations (futures) based on task dependencies. Why? Efficient allocation of compute resources is essential when deploying large-scale, computationally intensive algorithms. A key principle of the tlverse is extensibility. That is, we want to support new Targeted Learning estimators as they are developed. The model for this is new estimators are implemented in additional packages using the core packages above. There are currently two featured examples of this: tmle3mopttx: Optimal Treatments in tlverse What? Learn an optimal rule and estimate the mean outcome under the rule Why? Optimal Treatment is a powerful tool in precision healthcare and other settings where a one-size-fits-all treatment approach is not appropriate. tmle3shift: Shift Interventions in tlverse What? Shift interventions for continuous treatments Why? Not all treatment variables are discrete. Being able to estimate the effects of continuous treatment represents a powerful extension of the Targeted Learning approach. 2.4 Installation The tlverse ecosystem of packages are currently hosted at https://github.com/tlverse, not yet on CRAN. You can use the devtools package to install them: install.packages(&quot;devtools&quot;) devtools::install_github(&quot;tlverse/tlverse&quot;) The tlverse depends on a large number of other packages that are also hosted on GitHub. Because of this, you may see the following error: Error: HTTP error 403. API rate limit exceeded for 71.204.135.82. (But here&#39;s the good news: Authenticated requests get a higher rate limit. Check out the documentation for more details.) Rate limit remaining: 0/60 Rate limit reset at: 2019-03-04 19:39:05 UTC To increase your GitHub API rate limit - Use `usethis::browse_github_pat()` to create a Personal Access Token. - Use `usethis::edit_r_environ()` and add the token as `GITHUB_PAT`. This just means that R tried to install too many packages from GitHub in too short of a window. To fix this, you need to tell R how to use GitHub as your user (you’ll need a GitHub user account). Follow these two steps: Use usethis::browse_github_pat() to create a Personal Access Token. Use usethis::edit_r_environ() and add the token as GITHUB_PAT. "],
["data.html", "Chapter 3 Datasets 3.1 WASH Benefits Example Dataset 3.2 International Stroke Trial Example Dataset 3.3 Veterans’ Administration Lung Cancer Trial Dataset", " Chapter 3 Datasets 3.1 WASH Benefits Example Dataset The data come from a study of the effect of water quality, sanitation, hand washing, and nutritional interventions on child development in rural Bangladesh (WASH Benefits Bangladesh): a cluster randomized controlled trial (“Temporary,” n.d.). The study enrolled pregnant women in their first or second trimester from the rural villages of Gazipur, Kishoreganj, Mymensingh, and Tangail districts of central Bangladesh, with an average of eight women per cluster. Groups of eight geographically adjacent clusters were block randomized, using a random number generator, into six intervention groups (all of which received weekly visits from a community health promoter for the first 6 months and every 2 weeks for the next 18 months) and a double-sized control group (no intervention or health promoter visit). The six intervention groups were: chlorinated drinking water; improved sanitation; hand-washing with soap; combined water, sanitation, and hand washing; improved nutrition through counseling and provision of lipid-based nutrient supplements; and combined water, sanitation, handwashing, and nutrition. In the handbook, we concentrate on child growth (size for age) as the outcome of interest. For reference, this trial was registered with ClinicalTrials.gov as NCT01590095. library(tidyverse) # read in data dat &lt;- read_csv(&quot;https://raw.githubusercontent.com/tlverse/tlverse-data/master/wash-benefits/washb_data.csv&quot;) dat # A tibble: 4,695 x 28 whz tr fracode month aged sex momage momedu momheight hfiacat Nlt18 &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; 1 0 Cont… N05265 9 268 male 30 Prima… 146. Food S… 3 2 -1.16 Cont… N05265 9 286 male 25 Prima… 149. Modera… 2 3 -1.05 Cont… N08002 9 264 male 25 Prima… 152. Food S… 1 4 -1.26 Cont… N08002 9 252 fema… 28 Prima… 140. Food S… 3 5 -0.59 Cont… N06531 9 336 fema… 19 Secon… 151. Food S… 2 6 -0.51 Cont… N06531 9 304 male 20 Secon… 154. Severe… 0 7 -2.46 Cont… N08002 9 336 fema… 19 Prima… 151. Food S… 2 8 -0.6 Cont… N06528 9 312 fema… 25 No ed… 142. Food S… 2 9 -0.23 Cont… N06528 9 322 male 30 Secon… 153. Food S… 1 10 -0.14 Cont… N06453 9 376 male 30 No ed… 156. Modera… 2 # … with 4,685 more rows, and 17 more variables: Ncomp &lt;dbl&gt;, watmin &lt;dbl&gt;, # elec &lt;dbl&gt;, floor &lt;dbl&gt;, walls &lt;dbl&gt;, roof &lt;dbl&gt;, asset_wardrobe &lt;dbl&gt;, # asset_table &lt;dbl&gt;, asset_chair &lt;dbl&gt;, asset_khat &lt;dbl&gt;, asset_chouki &lt;dbl&gt;, # asset_tv &lt;dbl&gt;, asset_refrig &lt;dbl&gt;, asset_bike &lt;dbl&gt;, asset_moto &lt;dbl&gt;, # asset_sewmach &lt;dbl&gt;, asset_mobile &lt;dbl&gt; For the purposes of this handbook, we start by treating the data as independent and identically distributed (i.i.d.) random draws from a very large target population. We could, with available options, account for the clustering of the data (within sampled geographic units), but, for simplification, we avoid these details in the handbook, although modifications of our methodology for biased samples, repeated measures, etc., are available. We have 28 variables measured, of which 1 variable is set to be the outcome of interest. This outcome, \\(Y\\), is the weight-for-height Z-score (whz in dat); the treatment of interest, \\(A\\), is the randomized treatment group (tr in dat); and the adjustment set, \\(W\\), consists simply of everything else. This results in our observed data structure being \\(n\\) i.i.d. copies of \\(O_i = (W_i, A_i, Y_i)\\), for \\(i = 1, \\ldots, n\\). Using the skimr package, we can quickly summarize the variables measured in the WASH Benefits data set: library(skimr) skim(dat) (#tab:skim_washb_data)Data summary Name dat Number of rows 4695 Number of columns 28 _______________________ Column type frequency: character 5 numeric 23 ________________________ Group variables None Variable type: character skim_variable n_missing complete_rate min max empty n_unique whitespace tr 0 1 3 15 0 7 0 fracode 0 1 2 6 0 20 0 sex 0 1 4 6 0 2 0 momedu 0 1 12 15 0 3 0 hfiacat 0 1 11 24 0 4 0 Variable type: numeric skim_variable n_missing complete_rate mean sd p0 p25 p50 p75 p100 hist whz 0 1.00 -0.59 1.03 -4.67 -1.28 -0.6 0.08 4.97 ▁▆▇▁▁ month 0 1.00 6.45 3.33 1.00 4.00 6.0 9.00 12.00 ▇▇▅▇▇ aged 0 1.00 266.32 52.17 42.00 230.00 266.0 303.00 460.00 ▁▂▇▅▁ momage 18 1.00 23.91 5.24 14.00 20.00 23.0 27.00 60.00 ▇▇▁▁▁ momheight 31 0.99 150.50 5.23 120.65 147.05 150.6 154.06 168.00 ▁▁▆▇▁ Nlt18 0 1.00 1.60 1.25 0.00 1.00 1.0 2.00 10.00 ▇▂▁▁▁ Ncomp 0 1.00 11.04 6.35 2.00 6.00 10.0 14.00 52.00 ▇▃▁▁▁ watmin 0 1.00 0.95 9.48 0.00 0.00 0.0 1.00 600.00 ▇▁▁▁▁ elec 0 1.00 0.60 0.49 0.00 0.00 1.0 1.00 1.00 ▆▁▁▁▇ floor 0 1.00 0.11 0.31 0.00 0.00 0.0 0.00 1.00 ▇▁▁▁▁ walls 0 1.00 0.72 0.45 0.00 0.00 1.0 1.00 1.00 ▃▁▁▁▇ roof 0 1.00 0.99 0.12 0.00 1.00 1.0 1.00 1.00 ▁▁▁▁▇ asset_wardrobe 0 1.00 0.17 0.37 0.00 0.00 0.0 0.00 1.00 ▇▁▁▁▂ asset_table 0 1.00 0.73 0.44 0.00 0.00 1.0 1.00 1.00 ▃▁▁▁▇ asset_chair 0 1.00 0.73 0.44 0.00 0.00 1.0 1.00 1.00 ▃▁▁▁▇ asset_khat 0 1.00 0.61 0.49 0.00 0.00 1.0 1.00 1.00 ▅▁▁▁▇ asset_chouki 0 1.00 0.78 0.41 0.00 1.00 1.0 1.00 1.00 ▂▁▁▁▇ asset_tv 0 1.00 0.30 0.46 0.00 0.00 0.0 1.00 1.00 ▇▁▁▁▃ asset_refrig 0 1.00 0.08 0.27 0.00 0.00 0.0 0.00 1.00 ▇▁▁▁▁ asset_bike 0 1.00 0.32 0.47 0.00 0.00 0.0 1.00 1.00 ▇▁▁▁▃ asset_moto 0 1.00 0.07 0.25 0.00 0.00 0.0 0.00 1.00 ▇▁▁▁▁ asset_sewmach 0 1.00 0.06 0.25 0.00 0.00 0.0 0.00 1.00 ▇▁▁▁▁ asset_mobile 0 1.00 0.86 0.35 0.00 1.00 1.0 1.00 1.00 ▁▁▁▁▇ A convenient summ ary of the r elevant variable s is give n just a bove, com plete with a small visu alization de scribing the mar ginal cha racteris tics of e ach covariate. Note t hat the *ass et* variables re flect soc io-econo mic statu s of the study participant s. Notice al so the uniform d istributi on of th e treatme nt groups (with twice as ma ny controls) ; this is, of co urse, by design. 3.2 International Stroke Trial Example Dataset The International Stroke Trial database contains individual patient data from the International Stroke Trial (IST), a multi-national randomized trial conducted between 1991 and 1996 (pilot phase between 1991 and 1993) that aimed to assess whether early administration of aspirin, heparin, both aspirin and heparin, or neither influenced the clinical course of acute ischaemic stroke (Sandercock et al. 1997). The IST dataset includes data on 19,435 patients with acute stroke, with 99% complete follow-up. De-identified data are available for download at https://datashare.is.ed.ac.uk/handle/10283/128. This study is described in more detail in Sandercock, Niewada, and Członkowska (2011). The example data for this handbook considers a sample of 5,000 patients and the binary outcome of recurrent ischemic stroke within 14 days after randomization. Also in this example data, we ensure that we have subjects with a missing outcome. library(tidyverse) # read in data ist &lt;- read_csv(&quot;https://raw.githubusercontent.com/tlverse/tlverse-handbook/master/data/ist_sample.csv&quot;) ist # A tibble: 5,000 x 26 RDELAY RCONSC SEX AGE RSLEEP RATRIAL RCT RVISINF RHEP24 RASP3 RSBP &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; 1 46 F F 85 N N N N Y N 150 2 33 F M 71 Y Y Y Y N Y 180 3 6 D M 88 N Y N N N N 140 4 8 F F 68 Y N Y Y N N 118 5 13 F M 60 N N Y N N N 140 6 16 F F 71 Y N Y N N N 160 7 6 F M 71 Y N N N N Y 130 8 15 F M 84 N N Y N Y N 160 9 9 D F 81 N N N N N Y 138 10 20 F F 70 Y N N N N N 170 # … with 4,990 more rows, and 15 more variables: RDEF1 &lt;chr&gt;, RDEF2 &lt;chr&gt;, # RDEF3 &lt;chr&gt;, RDEF4 &lt;chr&gt;, RDEF5 &lt;chr&gt;, RDEF6 &lt;chr&gt;, RDEF7 &lt;chr&gt;, # RDEF8 &lt;chr&gt;, STYPE &lt;chr&gt;, RXHEP &lt;chr&gt;, REGION &lt;chr&gt;, # MISSING_RATRIAL_RASP3 &lt;dbl&gt;, MISSING_RHEP24 &lt;dbl&gt;, RXASP &lt;dbl&gt;, # DRSISC &lt;dbl&gt; We have 26 variables measured, and the outcome of interest, \\(Y\\), indicates recurrent ischemic stroke within 14 days after randomization (DRSISC in ist); the treatment of interest, \\(A\\), is the randomized aspirin vs. no aspirin treatment allocation (RXASP in ist); and the adjustment set, \\(W\\), consists of all other variable measured at baseline. In this data, our outcome is occasionally missing, but we do not need to create a variable indicating this missingness (such as \\(\\Delta\\)) for analyses in the tlverse, since it is automatically detected when NA are present in the outcome. We can denote our observed data structure as \\(n\\) i.i.d. copies of \\(O_i = (W_i, A_i, \\Delta_i, \\Delta Y_i)\\), for \\(i = 1, \\ldots, n\\), where \\(\\Delta\\) denotes the indicator that the outcome is missing. Like before, we can summarize the variables measured in the IST sample data set with skimr: skim(ist) (#tab:skim_ist_data)Data summary Name ist Number of rows 5000 Number of columns 26 _______________________ Column type frequency: character 19 numeric 7 ________________________ Group variables None Variable type: character skim_variable n_missing complete_rate min max empty n_unique whitespace RCONSC 0 1 1 1 0 3 0 SEX 0 1 1 1 0 2 0 RSLEEP 0 1 1 1 0 2 0 RATRIAL 0 1 1 1 0 3 0 RCT 0 1 1 1 0 2 0 RVISINF 0 1 1 1 0 2 0 RHEP24 0 1 1 1 0 3 0 RASP3 0 1 1 1 0 3 0 RDEF1 0 1 1 1 0 3 0 RDEF2 0 1 1 1 0 3 0 RDEF3 0 1 1 1 0 3 0 RDEF4 0 1 1 1 0 3 0 RDEF5 0 1 1 1 0 3 0 RDEF6 0 1 1 1 0 3 0 RDEF7 0 1 1 1 0 3 0 RDEF8 0 1 1 1 0 3 0 STYPE 0 1 3 4 0 5 0 RXHEP 0 1 1 1 0 4 0 REGION 0 1 10 26 0 7 0 Variable type: numeric skim_variable n_missing complete_rate mean sd p0 p25 p50 p75 p100 hist RDELAY 0 1 20.14 12.43 1 9 19 29 48 ▇▆▆▃▂ AGE 0 1 71.93 11.65 16 65 74 81 99 ▁▁▃▇▂ RSBP 0 1 160.62 27.84 71 140 160 180 290 ▁▇▇▁▁ MISSING_RATRIAL_RASP3 0 1 0.05 0.22 0 0 0 0 1 ▇▁▁▁▁ MISSING_RHEP24 0 1 0.02 0.13 0 0 0 0 1 ▇▁▁▁▁ RXASP 0 1 0.50 0.50 0 0 0 1 1 ▇▁▁▁▇ DRSISC 10 1 0.02 0.15 0 0 0 0 1 ▇▁▁▁▁ 3.3 Veterans’ Administration Lung Cancer Trial Dataset This data corresponds to a study conducted by the US Veterans Administration. Male patients with advanced inoperable lung cancer were given either the standard therapy or a test chemotherapy. The primary goal of the study was to assess if the test chemotherapy improved survival. This data set has been published in Kalbfleisch and Prentice (2011) and it is available in the MASS and survival R packages. Time to death was recorded for 128 patients, and 9 patients left the study before death. Various covariates were also documented for each patient. library(tidyverse) # read in data vet &lt;- read_csv(&quot;https://raw.githubusercontent.com/tlverse/tlverse-handbook/master/data/veteran.csv&quot;) vet # A tibble: 137 x 9 X1 trt celltype time status karno diagtime age prior &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; 1 1 1 squamous 72 1 60 7 69 0 2 2 1 squamous 411 1 70 5 64 10 3 3 1 squamous 228 1 60 3 38 0 4 4 1 squamous 126 1 60 9 63 10 5 5 1 squamous 118 1 70 11 65 10 6 6 1 squamous 10 1 20 5 49 0 7 7 1 squamous 82 1 40 10 69 10 8 8 1 squamous 110 1 80 29 68 0 9 9 1 squamous 314 1 50 18 43 0 10 10 1 squamous 100 0 70 6 70 0 # … with 127 more rows A snapshot of the data set in shown below: skim(vet) (#tab:skim_vet_data)Data summary Name vet Number of rows 137 Number of columns 9 _______________________ Column type frequency: character 1 numeric 8 ________________________ Group variables None Variable type: character skim_variable n_missing complete_rate min max empty n_unique whitespace celltype 0 1 5 9 0 4 0 Variable type: numeric skim_variable n_missing complete_rate mean sd p0 p25 p50 p75 p100 hist X1 0 1 69.00 39.69 1 35 69 103 137 ▇▇▇▇▇ trt 0 1 1.50 0.50 1 1 1 2 2 ▇▁▁▁▇ time 0 1 121.63 157.82 1 25 80 144 999 ▇▁▁▁▁ status 0 1 0.93 0.25 0 1 1 1 1 ▁▁▁▁▇ karno 0 1 58.57 20.04 10 40 60 75 99 ▁▅▇▇▂ diagtime 0 1 8.77 10.61 1 3 5 11 87 ▇▁▁▁▁ age 0 1 58.31 10.54 34 51 62 66 81 ▃▂▅▇▁ prior 0 1 2.92 4.56 0 0 0 10 10 ▇▁▁▁▃ References "],
["sl3.html", "Chapter 4 Super (Machine) Learning 4.1 Learning Objectives 4.2 Motivation 4.3 Introduction 4.4 sl3 “Microwave Dinner” Implementation 4.5 Cross-validated Super Learner 4.6 Variable Importance Measures with sl3 4.7 Exercise 4.8 Concluding Remarks", " Chapter 4 Super (Machine) Learning Rachael Phillips Based on the sl3 R package by Jeremy Coyle, Nima Hejazi, Ivana Malenica, and Oleg Sofrygin. Updated: 2020-02-07 4.1 Learning Objectives By the end of this chapter you will be able to: Select a loss function that is appropriate for the functional parameter to be estimated. Assemble an ensemble of learners based on the properties that identify what features they support. Customize learner hyperparameters to incorporate a diversity of different settings. Select a subset of available covariates and pass only those variables to the modeling algorithm. Fit an ensemble with nested cross-validation to obtain an estimate of the performance of the ensemble itself. Obtain sl3 variable importance metrics. Interpret the discrete and continuous Super Learner fits. Rationalize the need to remove bias from the Super Learner to make an optimal bias–variance tradeoff for the parameter of interest. 4.2 Motivation A common task in statistical data analysis is estimator selection (e.g., for prediction). There is no universally optimal machine learning algorithm for density estimation or prediction. For some data, one needs learners that can model a complex function. For others, possibly as a result of noise or insufficient sample size, a simple, parametric model might fit best. The Super Learner, an ensemble learner, solves this issue, by allowing a combination of learners from the simplest (intercept-only) to most complex (neural nets, random forests, SVM, etc). It works by using cross-validation in a manner which guarantees that the resulting fit will be as good as possible, given the learners provided. 4.3 Introduction In Chapter 1, we introduced the Roadmap for Targeted Learning as a general template to translate real-world data applications into formal statistical estimation problems. The first steps of this roadmap define the statistical estimation problem, which establish Data as a realization of a random variable, or equivalently, an outcome of a particular experiment. A statistical model, representing the true knowledge about the data-generating experiment. A translation of the scientific question, which is often causal, into a target parameter. Note that if the target parameter is causal, step 3 also requires establishing identifiability of the target quantity from the observed data distribution, under possible non-testable assumptions that may not necessarily be reasonable. Still, the target quantity does have a valid statistical interpretation. See causal target parameters for more detail on causal models and identifiability. Now that we have defined the statistical estimation problem, we are ready to construct the TMLE; an asymptotically linear and efficient substitution estimator of this target quantity. The first step in this estimation procedure is an initial estimate of the data-generating distribution, or the relevant part of this distribution that is needed to evaluate the target parameter. For this initial estimation, we use the Super Learner (van der Laan, Polley, and Hubbard 2007). The Super Learner provides an important step in creating a robust estimator. It is a loss-function-based tool that uses cross-validation to obtain the best prediction of our target parameter, based on a weighted average of a library of machine learning algorithms. The library of machine learning algorithms consists of functions (“learners” in the sl3 nomenclature) that we think might be consistent with the true data-generating distribution (i.e. algorithms selected based on contextual knowledge of the experiment that generated the data). Also, the library should contain a large set of “default” algorithms that may range from a simple linear regression model to multi-step algorithms involving screening covariates, penalizations, optimizing tuning parameters, etc. The ensembling of the collection of algorithms with weights (“metalearning” in the sl3 nomenclature) has been shown to be adaptive and robust, even in small samples (Polley and van der Laan 2010). The Super Learner is proven to be asymptotically as accurate as the best possible prediction algorithm in the library (van der Laan and Dudoit 2003; van der Vaart, Dudoit, and van der Laan 2006). 4.3.1 Background A loss function \\(L\\) is defined as a function of the observed data and a candidate parameter value \\(\\psi\\), which has unknown true value \\(\\psi_0\\), \\(L(\\psi)(O)\\). We can estimate the loss by substituting the empirical distribution \\(P_n\\) for the true (but unknown) distribution of the observed data \\(P_0\\). A valid loss function will have expectation (risk) that is minimized at the true value of the parameter \\(\\psi_0\\). For example, the conditional mean minimizes the risk of the squared error loss. Thus, it is a valid loss function when estimating the conditional mean. The discrete Super Learner, or cross-validation selector, is the algorithm in the library that minimizes the cross-validated empirical risk. The cross-validated empirical risk of an algorithm is defined as the empirical mean over a validation sample of the loss of the algorithm fitted on the training sample, averaged across the splits of the data. The continuous/ensemble Super Learner, often referred to as Super Learner is a weighted average of the library of algorithms, where the weights are chosen to minimize the cross-validated empirical risk of the library. Restricting the weights to be positive and sum to one (i.e., a convex combination) has been shown to improve upon the discrete Super Learner (Polley and van der Laan 2010; van der Laan, Polley, and Hubbard 2007). This notion of weighted combinations was introduced in Wolpert (1992) for neural networks and adapted for regressions in Breiman (1996). Cross-validation is proven to be optimal for selection among estimators. This result was established through the oracle inequality for the cross-validation selector among a collection of candidate estimators (van der Laan and Dudoit 2003; van der Vaart, Dudoit, and van der Laan 2006). The only condition is that loss function is uniformly bounded, which is guaranteed in sl3. 4.3.1.1 General Overview of the Algorithm What is cross-validation and how does it work? There are many different cross-validation schemes, designed to accommodate different study designs and data structures. The figure below shows an example of 10-fold cross-validation. General step-by-step overview of the Super Learner algorithm: Break up the sample evenly into V-folds (say V=10). For each of these 10 folds, remove that portion of the sample (kept out as validation sample) and the remaining will be used to fit learners (training sample). Fit each learner on the training sample (note, some learners will have their own internal cross-validation procedure or other methods to select tuning parameters). For each observation in the corresponding validation sample, predict the outcome using each of the learners, so if there are \\(p\\) learners, then there would be \\(p\\) predictions. Take out another validation sample and repeat until each of the V-sets of data are removed. Compare the cross-validated fit of the learners across all observations based on specified loss function (e.g., squared error, negative log-likelihood, …) by calculating the corresponding average loss (risk). Either: choose the learner with smallest risk and apply that learner to entire data set (resulting SL fit), do a weighted average of the learners to minimize the cross-validated risk (construct an ensemble of learners), by re-fitting the learners on the original data set, and use the weights above to get the SL fit. This entire procedure can be itself cross-validated to get a consistent estimate of the future performance of the Super Learner, and we implement this procedure later in this chapter. 4.3.2 Super Learner for Prediction Say we observe a learning data set \\(X_i=(Y_i,W_i)\\), for \\(i=1, ..., n\\), where \\(Y_i\\) is the outcome of interest, \\(W_i\\) is a \\(p\\)-dimensional set of covariates, and our objective is to estimate the function \\(\\psi_0(W) = E(Y|W)\\). This function can be expressed as the minimizer of the expected loss: \\(\\psi_0(W) = \\text{argmin}_{\\psi} E[L(X,\\psi(W))]\\). Here, the loss function is represented as \\(L\\) (e.g., squared error loss, \\(L: (Y-\\psi(W))^2)\\)). For prediction, one can use the cross-validated risk to empirically determine the relative performance of the Super Learner . When we have tested different algorithms on actual data and looked at the performance (e.g., MSE of prediction), never does one algorithm always win. Below, we show the results of such a study, comparing the fits of several different learners, including the SL algorithms. For more detail on Super Learner we refer the reader to van der Laan, Polley, and Hubbard (2007) and Polley and van der Laan (2010). The optimality results for the cross-validation selector among a family of algorithms were established in van der Laan and Dudoit (2003) and extended in van der Vaart, Dudoit, and van der Laan (2006). 4.4 sl3 “Microwave Dinner” Implementation We begin by illustrating the core functionality of the super learner algorithm as implemented in sl3. For those who are interested in the internals of sl3, see this sl3 introductory tutorial. The sl3 implementation consists of the following steps: Load the necessary libraries and data Define the machine learning task Make a super learner by creating library of base learners and a metalearner Train the super learner on the machine learning task Obtain predicted values 4.4.1 WASH Benefits Study Example Using the WASH data, we are interested in predicting weight-for-height z-score whz using the available covariate data. More information on this dataset, and all other data that we will work with in this handbook, is contained in Chapter 3. Let’s begin! 0. Load the necessary libraries and data First, we will load the relevant R packages, set a seed, and load the data. If you would like to use newer sl3 functionality that is available in the devel branch of the sl3 GitHub repository, you need to install that version of the package (e.g. devtools::install_github(tlverse/sl3@devel)), re-start your R session, and then re-load the sl3 package. library(here) library(data.table) library(knitr) library(kableExtra) library(tidyverse) library(origami) library(SuperLearner) library(sl3) set.seed(7194) # my lucky seed! or is it 9174? or 4917? many lucky seeds, thanks lysdexia! # load data set and take a peek washb_data &lt;- fread(&quot;https://raw.githubusercontent.com/tlverse/tlverse-data/master/wash-benefits/washb_data.csv&quot;, stringsAsFactors = TRUE) head(washb_data) %&gt;% kable(digits = 4) %&gt;% kableExtra:::kable_styling(fixed_thead = T) %&gt;% scroll_box(width = &quot;100%&quot;, height = &quot;300px&quot;) whz tr fracode month aged sex momage momedu momheight hfiacat Nlt18 Ncomp watmin elec floor walls roof asset_wardrobe asset_table asset_chair asset_khat asset_chouki asset_tv asset_refrig asset_bike asset_moto asset_sewmach asset_mobile 0.00 Control N05265 9 268 male 30 Primary (1-5y) 146.40 Food Secure 3 11 0 1 0 1 1 0 1 1 1 0 1 0 0 0 0 1 -1.16 Control N05265 9 286 male 25 Primary (1-5y) 148.75 Moderately Food Insecure 2 4 0 1 0 1 1 0 1 0 1 1 0 0 0 0 0 1 -1.05 Control N08002 9 264 male 25 Primary (1-5y) 152.15 Food Secure 1 10 0 0 0 1 1 0 0 1 0 1 0 0 0 0 0 1 -1.26 Control N08002 9 252 female 28 Primary (1-5y) 140.25 Food Secure 3 5 0 1 0 1 1 1 1 1 1 0 0 0 1 0 0 1 -0.59 Control N06531 9 336 female 19 Secondary (&gt;5y) 150.95 Food Secure 2 7 0 1 0 1 1 1 1 1 1 1 0 0 0 0 0 1 -0.51 Control N06531 9 304 male 20 Secondary (&gt;5y) 154.20 Severely Food Insecure 0 3 1 1 0 1 1 0 0 0 0 1 0 0 0 0 0 1 1. Define the machine learning task To define the machine learning “task” (predict weight-for-height z-score whz using the available covariate data), we need to create an sl3_Task object. The sl3_Task keeps track of the roles the variables play in the machine learning problem, the data, and any metadata (e.g., observational-level weights, id, offset). Also, if we had missing outcomes, we would need to set drop_missing_outcome = TRUE when we create the task. In the next analysis, with the IST stroke trial data, we do have a missing outcome. In the following chapter, we estimate the missingness mechanism and account for it in the TMLE. # specify the outcome and covariates outcome &lt;- &quot;whz&quot; covars &lt;- colnames(washb_data)[-which(names(washb_data) == outcome)] # create the sl3 task washb_task &lt;- make_sl3_Task( data = washb_data, covariates = covars, outcome = outcome ) Warning in process_data(data, nodes, column_names = column_names, flag = flag, : Missing covariate data detected: imputing covariates. This warning is important. The task just imputed missing covariates for us. Specifically, for each covariate column with missing values, sl3 uses the median to impute missing continuous covariates, and the mode to impute binary and categorical covariates. Also, for each covariate column with missing values, sl3 adds an additional column indicating whether or not the value was imputed, which is particularly handy when the missingness in the data might be informative. Also, notice that we did not specify the number of folds, or the loss function in the task. The default cross-validation scheme is V-fold, with the number of folds \\(V=10\\). Let’s visualize our washb_task. washb_task A sl3 Task with 4695 obs and these nodes: $covariates [1] &quot;tr&quot; &quot;fracode&quot; &quot;month&quot; &quot;aged&quot; [5] &quot;sex&quot; &quot;momage&quot; &quot;momedu&quot; &quot;momheight&quot; [9] &quot;hfiacat&quot; &quot;Nlt18&quot; &quot;Ncomp&quot; &quot;watmin&quot; [13] &quot;elec&quot; &quot;floor&quot; &quot;walls&quot; &quot;roof&quot; [17] &quot;asset_wardrobe&quot; &quot;asset_table&quot; &quot;asset_chair&quot; &quot;asset_khat&quot; [21] &quot;asset_chouki&quot; &quot;asset_tv&quot; &quot;asset_refrig&quot; &quot;asset_bike&quot; [25] &quot;asset_moto&quot; &quot;asset_sewmach&quot; &quot;asset_mobile&quot; &quot;delta_momage&quot; [29] &quot;delta_momheight&quot; $outcome [1] &quot;whz&quot; $id NULL $weights NULL $offset NULL 2. Make a Super Learner Now that we have defined our machine learning problem with the task, we are ready to “make” the Super Learner. This requires specification of A library of base learning algorithms that we think might be consistent with the true data-generating distribution. A metalearner, to ensemble the base learners. We might also incorporate Feature selection, to pass only a subset of the predictors to the algorithm. Hyperparameter specification, to tune base learners. Learners have properties that indicate what features they support. We may use sl3_list_properties() to get a list of all properties supported by at least one learner. sl3_list_properties() [1] &quot;binomial&quot; &quot;categorical&quot; &quot;continuous&quot; [4] &quot;cv&quot; &quot;density&quot; &quot;ids&quot; [7] &quot;multivariate_outcome&quot; &quot;offset&quot; &quot;preprocessing&quot; [10] &quot;timeseries&quot; &quot;weights&quot; &quot;wrapper&quot; Since we have a continuous outcome, we may identify the learners that support this outcome type with sl3_list_learners(). sl3_list_learners(&quot;continuous&quot;) [1] &quot;Lrnr_arima&quot; &quot;Lrnr_bartMachine&quot; [3] &quot;Lrnr_bilstm&quot; &quot;Lrnr_caret&quot; [5] &quot;Lrnr_condensier&quot; &quot;Lrnr_dbarts&quot; [7] &quot;Lrnr_earth&quot; &quot;Lrnr_expSmooth&quot; [9] &quot;Lrnr_gam&quot; &quot;Lrnr_gbm&quot; [11] &quot;Lrnr_glm&quot; &quot;Lrnr_glm_fast&quot; [13] &quot;Lrnr_glmnet&quot; &quot;Lrnr_grf&quot; [15] &quot;Lrnr_h2o_glm&quot; &quot;Lrnr_h2o_grid&quot; [17] &quot;Lrnr_hal9001&quot; &quot;Lrnr_HarmonicReg&quot; [19] &quot;Lrnr_lstm&quot; &quot;Lrnr_mean&quot; [21] &quot;Lrnr_nnls&quot; &quot;Lrnr_optim&quot; [23] &quot;Lrnr_pkg_SuperLearner&quot; &quot;Lrnr_pkg_SuperLearner_method&quot; [25] &quot;Lrnr_pkg_SuperLearner_screener&quot; &quot;Lrnr_polspline&quot; [27] &quot;Lrnr_randomForest&quot; &quot;Lrnr_ranger&quot; [29] &quot;Lrnr_rpart&quot; &quot;Lrnr_rugarch&quot; [31] &quot;Lrnr_screener_corP&quot; &quot;Lrnr_screener_corRank&quot; [33] &quot;Lrnr_screener_randomForest&quot; &quot;Lrnr_solnp&quot; [35] &quot;Lrnr_stratified&quot; &quot;Lrnr_svm&quot; [37] &quot;Lrnr_tsDyn&quot; &quot;Lrnr_xgboost&quot; Now that we have an idea of some learners, we can construct them using the make_learner function. # choose base learners lrnr_glm &lt;- make_learner(Lrnr_glm) lrnr_mean &lt;- make_learner(Lrnr_mean) We can customize learner hyperparameters to incorporate a diversity of different settings. Documentation for the learners and their hyperparameters can be found in the sl3 Learners Reference. lrnr_ranger50 &lt;- make_learner(Lrnr_ranger, num.trees = 50) lrnr_hal_simple &lt;- make_learner(Lrnr_hal9001, max_degree = 2, n_folds = 2) lrnr_lasso &lt;- make_learner(Lrnr_glmnet) # alpha default is 1 lrnr_ridge &lt;- make_learner(Lrnr_glmnet, alpha = 0) lrnr_elasticnet &lt;- make_learner(Lrnr_glmnet, alpha = .5) We can also include learners from the SuperLearner R package. lrnr_bayesglm &lt;- Lrnr_pkg_SuperLearner$new(&quot;SL.bayesglm&quot;) Here is a fun trick to create customized learners over a grid of parameters. # I like to crock pot my super learners grid_params &lt;- list(cost = c(0.01, 0.1, 1, 10, 100, 1000), gamma = c(0.001, 0.01, 0.1, 1), kernel = c(&quot;polynomial&quot;, &quot;radial&quot;, &quot;sigmoid&quot;), degree = c(1, 2, 3)) grid &lt;- expand.grid(grid_params, KEEP.OUT.ATTRS = FALSE) params_default &lt;- list(nthread = getOption(&quot;sl.cores.learners&quot;, 1)) svm_learners &lt;- apply(grid, MARGIN = 1, function(params_tune) { do.call(Lrnr_svm$new, c(params_default, as.list(params_tune)))}) grid_params &lt;- list(max_depth = c(2, 4, 6, 8), eta = c(0.001, 0.01, 0.1, 0.2, 0.3), nrounds = c(20, 50)) grid &lt;- expand.grid(grid_params, KEEP.OUT.ATTRS = FALSE) params_default &lt;- list(nthread = getOption(&quot;sl.cores.learners&quot;, 1)) xgb_learners &lt;- apply(grid, MARGIN = 1, function(params_tune) { do.call(Lrnr_xgboost$new, c(params_default, as.list(params_tune)))}) Did you see Lrnr_caret when we called sl3_list_learners(c(&quot;binomial&quot;))? All we need to specify is the algorithm to use, which is passed as method to caret::train(). The default method for parameter selection criterion with is set to “CV” instead of the caret::train() default boot. The summary metric to used to select the optimal model is RMSE for continuous outcomes and Accuracy for categorical and binomial outcomes. # I have no idea how to tune a neural net (or BART machine..) lrnr_caret_nnet &lt;- make_learner(Lrnr_caret, algorithm = &quot;nnet&quot;) lrnr_caret_bartMachine &lt;- make_learner(Lrnr_caret, algorithm = &quot;bartMachine&quot;, method = &quot;boot&quot;, metric = &quot;Accuracy&quot;, tuneLength = 10) In order to assemble the library of learners, we need to “stack” them together. A Stack is a special learner and it has the same interface as all other learners. What makes a stack special is that it combines multiple learners by training them simultaneously, so that their predictions can be either combined or compared. stack &lt;- make_learner( Stack, lrnr_glm, lrnr_mean, lrnr_ridge, lrnr_lasso, xgb_learners[[10]] ) We can optionally select a subset of available covariates and pass only those variables to the modeling algorithm. Let’s consider screening covariates based on their randomForest variable importance ranking (ordered by mean decrease in accuracy). We select the top 5 most important covariates according to this ranking, and we decreased the ntree to 20. Before you think it – I will confess. Bob Ross and I both know that 20 trees makes for a lonely forest, and I shouldn’t even consider it, but these are the sacrifices I have to make for this chapter to build in under 50 minutes! screen_rf &lt;- make_learner(Lrnr_screener_randomForest, nVar = 5, ntree = 20) # which covariates are selected on the full data? screen_rf$train(washb_task) [1] &quot;Lrnr_screener_randomForest_5_20&quot; $selected [1] &quot;month&quot; &quot;aged&quot; &quot;momage&quot; &quot;momheight&quot; &quot;Ncomp&quot; To “pipe” only the selected covariates to the modeling algorithm, we need to make a Pipeline, which is a just set of learners to be fit sequentially, where the fit from one learner is used to define the task for the next learner. screen_rf_pipeline &lt;- make_learner(Pipeline, screen_rf, stack) Now our learners will be preceded by a screening step. We also consider the original stack, to compare how the feature selection methods perform in comparison to the methods without feature selection, and because Analogous to what we have seen before, we have to stack the pipeline and original stack together, so we may use them as base learners in our super learner. fancy_stack &lt;- make_learner(Stack, screen_rf_pipeline, stack) # we can visualize the stack dt_stack &lt;- delayed_learner_train(fancy_stack, washb_task) plot(dt_stack, color = FALSE, height = &quot;400px&quot;, width = &quot;100%&quot;) We will use the default metalearner, which uses Lrnr_solnp() to provide fitting procedures for a pairing of loss function and metalearner function. This default metalearner selects a loss and metalearner pairing based on the outcome type. Note that any learner can be used as a metalearner. We have made a library/stack of base learners, so we are ready to make the super learner. The super learner algorithm fits a metalearner on the validation-set predictions. sl &lt;- make_learner(Lrnr_sl, learners = fancy_stack ) We can also use Lrnr_cv to build a super learner, cross-validate a stack of learners to compare performance of the learners in the stack, or cross-validate any single learner (see “Cross-validation” section of this sl3 introductory tutorial). Furthermore, we can Define New sl3 Learners which can be used in all the places you could otherwise use any other sl3 learners, including Pipelines, Stacks, and the Super Learner. In the plot below, we visualize the steps for executing the Super Learner in the tlverse/delayed framework. For those like myself who are not particularly keen on understanding the intricacies of delayed, let’s focus on the main point of this figure: we can see there are 10 realizations of the stack which represent the 10 cross-validation folds and there is a separate hold-out (top branch of the figure) that will not be used to fit the Super Learner. dt_sl &lt;- delayed_learner_train(sl, washb_task) plot(dt_sl, color = FALSE, height = &quot;400px&quot;, width = &quot;100%&quot;) 3. Train the Super Learner on the machine learning task The Super Learner algorithm fits a metalearner on the validation-set predictions in a cross-validated manner, thereby avoiding overfitting. Now we are ready to “train” our Super Learner on our sl3_task object, washb_task. sl_fit &lt;- sl$train(washb_task) 4. Obtain predicted values Now that we have fit the super learner, we are ready to calculate the predicted outcome for each subject. # we did it! now we have super learner predictions sl_preds &lt;- sl_fit$predict() head(sl_preds) [1] -0.6552463 -0.7620363 -0.6536599 -0.6462727 -0.6185737 -0.6811842 We can also obtain a summary of the results. sl_fit_summary &lt;- sl_fit$print() [1] &quot;SuperLearner:&quot; List of 2 $ : chr &quot;Pipeline(Lrnr_screener_randomForest_5_20-&gt;Stack)&quot; $ : chr &quot;Stack&quot; [1] &quot;Lrnr_solnp_TRUE_TRUE_FALSE_1e-05&quot; $pars [1] 8.293560e-05 1.863897e-05 8.568024e-05 7.309641e-05 2.306510e-01 [6] 2.833343e-01 1.863897e-05 1.984075e-01 2.872964e-01 3.174670e-05 $convergence [1] 0 $values [1] 1.019909 1.009929 1.009919 1.009912 $lagrange [,1] [1,] -0.04655413 $hessian [,1] [,2] [,3] [,4] [,5] [,6] [1,] 1.0055866 0.13706318 0.10833574 0.14947677 0.17349836 0.43795340 [2,] 0.1370632 0.74007983 0.09002864 0.06616989 -0.01119723 0.08403612 [3,] 0.1083357 0.09002864 0.98977880 -0.05242687 0.14097932 0.39783768 [4,] 0.1494768 0.06616989 -0.05242687 0.87067622 0.10368371 0.36065304 [5,] 0.1734984 -0.01119723 0.14097932 0.10368371 0.29613698 0.10998158 [6,] 0.4379534 0.08403612 0.39783768 0.36065304 0.10998158 0.88516264 [7,] 0.1370632 -0.25992017 0.09002864 0.06616989 -0.01119723 0.08403612 [8,] 0.3471744 0.05814308 0.31366991 0.27536650 0.03497104 -0.01063976 [9,] 0.4200326 0.14954198 0.30784801 0.28501724 0.12736781 0.25255353 [10,] 0.1514691 0.03133613 0.12547494 0.09015151 0.32556055 0.03515649 [,7] [,8] [,9] [,10] [1,] 0.13706318 0.347174439 0.4200326 0.151469085 [2,] -0.25992017 0.058143078 0.1495420 0.031336129 [3,] 0.09002864 0.313669914 0.3078480 0.125474936 [4,] 0.06616989 0.275366498 0.2850172 0.090151510 [5,] -0.01119723 0.034971044 0.1273678 0.325560549 [6,] 0.08403612 -0.010639760 0.2525535 0.035156492 [7,] 0.74007983 0.058143078 0.1495420 0.031336129 [8,] 0.05814308 1.018137289 0.3512299 -0.007925275 [9,] 0.14954198 0.351229948 0.9203863 0.506528702 [10,] 0.03133613 -0.007925275 0.5065287 0.652145512 $ineqx0 NULL $nfuneval [1] 225 $outer.iter [1] 3 $elapsed Time difference of 0.06281233 secs $vscale [1] 1.009919 0.000010 1.000000 1.000000 1.000000 1.000000 1.000000 1.000000 [9] 1.000000 1.000000 1.000000 1.000000 $coefficients Pipeline(Lrnr_screener_randomForest_5_20-&gt;Stack)_Lrnr_glm_TRUE 0.0000000 Pipeline(Lrnr_screener_randomForest_5_20-&gt;Stack)_Lrnr_mean 0.0000000 Pipeline(Lrnr_screener_randomForest_5_20-&gt;Stack)_Lrnr_glmnet_NULL_deviance_10_0_100_TRUE 0.0000000 Pipeline(Lrnr_screener_randomForest_5_20-&gt;Stack)_Lrnr_glmnet_NULL_deviance_10_1_100_TRUE 0.0000000 Pipeline(Lrnr_screener_randomForest_5_20-&gt;Stack)_Lrnr_xgboost_20_1_4_0.1 0.2307227 Stack_Lrnr_glm_TRUE 0.2834224 Stack_Lrnr_mean 0.0000000 Stack_Lrnr_glmnet_NULL_deviance_10_0_100_TRUE 0.1984692 Stack_Lrnr_glmnet_NULL_deviance_10_1_100_TRUE 0.2873857 Stack_Lrnr_xgboost_20_1_4_0.1 0.0000000 $training_offset [1] FALSE $name [1] &quot;solnp&quot; [1] &quot;Cross-validated risk (MSE, squared error loss):&quot; learner 1: Pipeline(Lrnr_screener_randomForest_5_20-&gt;Stack)_Lrnr_glm_TRUE 2: Pipeline(Lrnr_screener_randomForest_5_20-&gt;Stack)_Lrnr_mean 3: Pipeline(Lrnr_screener_randomForest_5_20-&gt;Stack)_Lrnr_glmnet_NULL_deviance_10_0_100_TRUE 4: Pipeline(Lrnr_screener_randomForest_5_20-&gt;Stack)_Lrnr_glmnet_NULL_deviance_10_1_100_TRUE 5: Pipeline(Lrnr_screener_randomForest_5_20-&gt;Stack)_Lrnr_xgboost_20_1_4_0.1 6: Stack_Lrnr_glm_TRUE 7: Stack_Lrnr_mean 8: Stack_Lrnr_glmnet_NULL_deviance_10_0_100_TRUE 9: Stack_Lrnr_glmnet_NULL_deviance_10_1_100_TRUE 10: Stack_Lrnr_xgboost_20_1_4_0.1 11: SuperLearner coefficients mean_risk SE_risk fold_SD fold_min_risk fold_max_risk 1: 0.0000000 1.035485 0.02446142 0.06008226 0.9352596 1.119394 2: 0.0000000 1.065401 0.02503198 0.05999366 0.9689145 1.143488 3: 0.0000000 1.035503 0.02446220 0.06007976 0.9354275 1.118983 4: 0.0000000 1.035640 0.02446288 0.06036504 0.9352523 1.119315 5: 0.2307227 1.044729 0.02405570 0.06265341 0.9211017 1.117049 6: 0.2834224 1.018949 0.02372195 0.05817436 0.9095780 1.088981 7: 0.0000000 1.065401 0.02503198 0.05999366 0.9689145 1.143488 8: 0.1984692 1.014209 0.02361288 0.05599624 0.9196952 1.093245 9: 0.2873857 1.012309 0.02348067 0.05725410 0.9184286 1.095675 10: 0.0000000 1.035503 0.02371762 0.06206027 0.9341196 1.119005 11: NA 1.009925 0.02345064 0.05810586 0.9055711 1.087765 From the table of the printed Super Learner fit, we note that the Super Learner had a mean risk of 1.0099253 and that this ensemble weighted the ranger and glmnet learners highest while not weighting the mean learner highly. We can also see that the glmnet learner had the lowest cross-validated mean risk, thus making it the cross-validated selector (or the discrete Super Learner). The mean risk of the Super Learner is calculated using the hold-out set that we visualized in the dt_sl plot. 4.5 Cross-validated Super Learner We can cross-validate the Super Learner to see how well the Super Learner performs on unseen data, and obtain an estimate of the cross-validated risk of the Super Learner. This estimation procedure requires an “external” layer of cross-validation, also called nested cross-validation, which involves setting aside a separate holdout sample that we don’t use to fit the Super Learner. This external cross validation procedure may also incorporate 10 folds, which is the default in sl3. However, we will incorporate 2 outer/external folds of cross-validation for computational efficiency. We also need to specify a loss function to evaluate Super Learner. Documentation for the available loss functions can be found in the sl3 Loss Function Reference. washb_task_new &lt;- make_sl3_Task( data = washb_data, covariates = covars, outcome = outcome, folds = make_folds(washb_data, fold_fun = folds_vfold, V = 2) ) Warning in process_data(data, nodes, column_names = column_names, flag = flag, : Missing covariate data detected: imputing covariates. CVsl &lt;- CV_lrnr_sl(sl_fit, washb_task_new, loss_squared_error) CVsl %&gt;% kable(digits = 4) %&gt;% kableExtra:::kable_styling(fixed_thead = T) %&gt;% scroll_box(width = &quot;100%&quot;, height = &quot;300px&quot;) learner coefficients mean_risk SE_risk fold_SD fold_min_risk fold_max_risk Pipeline(Lrnr_screener_randomForest_5_20-&gt;Stack)_Lrnr_glm_TRUE 0.0410 1.0363 0.0245 0.0294 1.0155 1.0571 Pipeline(Lrnr_screener_randomForest_5_20-&gt;Stack)_Lrnr_mean 0.0000 1.0653 0.0250 0.0342 1.0411 1.0894 Pipeline(Lrnr_screener_randomForest_5_20-&gt;Stack)_Lrnr_glmnet_NULL_deviance_10_0_100_TRUE 0.0000 1.0367 0.0245 0.0303 1.0152 1.0581 Pipeline(Lrnr_screener_randomForest_5_20-&gt;Stack)_Lrnr_glmnet_NULL_deviance_10_1_100_TRUE 0.0095 1.0362 0.0245 0.0302 1.0149 1.0576 Pipeline(Lrnr_screener_randomForest_5_20-&gt;Stack)_Lrnr_xgboost_20_1_4_0.1 0.0986 1.0559 0.0242 0.0154 1.0450 1.0668 Stack_Lrnr_glm_TRUE 0.1660 1.0293 0.0238 0.0303 1.0079 1.0507 Stack_Lrnr_mean 0.0000 1.0653 0.0250 0.0342 1.0411 1.0894 Stack_Lrnr_glmnet_NULL_deviance_10_0_100_TRUE 0.2272 1.0183 0.0238 0.0337 0.9945 1.0421 Stack_Lrnr_glmnet_NULL_deviance_10_1_100_TRUE 0.3696 1.0160 0.0237 0.0365 0.9902 1.0418 Stack_Lrnr_xgboost_20_1_4_0.1 0.0881 1.0370 0.0237 0.0194 1.0233 1.0507 SuperLearner NA 1.0183 0.0237 0.0304 0.9968 1.0398 4.6 Variable Importance Measures with sl3 Variable importance can be interesting and informative. It can also be contradictory and confusing. Nevertheless, we like it, and so do collaborators, so we created a variable importance function in sl3! The sl3 varimp function returns a table with variables listed in decreasing order of importance (i.e. most important on the first row). The measure of importance in sl3 is based on a risk difference between the learner fit with a permuted covariate and the learner fit with the true covariate, across all covariates. In this manner, the larger the risk difference, the more important the variable is in the prediction. The intuition of this measure is that it calculates the risk (in terms of the average loss in predictive accuracy) of losing one covariate, while keeping everything else fixed, and compares it to the risk if the covariate was not lost. If this risk difference is zero then losing that covariate had no impact, and is thus not important by this measure. We do this across all of the covariates. As stated above, we don’t actually remove the covariate, we just permute/shuffle it, but the idea is that this shuffling distorts potentially meaningful information that was present in the covariate. This idea of permuting instead of removing saves a lot of time, and is also incorporated in the randomForest variable importance measures. Let’s explore the sl3 variable importance measurements for the washb data. washb_varimp &lt;- varimp(sl_fit, loss_squared_error) washb_varimp %&gt;% kable(digits = 4) %&gt;% kableExtra:::kable_styling(fixed_thead = T) %&gt;% scroll_box(width = &quot;100%&quot;, height = &quot;300px&quot;) X risk_diff aged 0.0367 momedu 0.0082 momheight 0.0044 asset_chair 0.0041 month 0.0028 asset_refrig 0.0027 Nlt18 0.0016 floor 0.0015 momage 0.0011 elec 0.0010 asset_mobile 0.0010 tr 0.0009 walls 0.0009 asset_sewmach 0.0008 asset_chouki 0.0004 asset_khat 0.0003 asset_wardrobe 0.0003 asset_table 0.0003 hfiacat 0.0001 delta_momheight 0.0001 asset_tv 0.0001 asset_moto 0.0000 roof 0.0000 sex -0.0001 asset_bike -0.0002 Ncomp -0.0003 delta_momage -0.0003 watmin -0.0010 fracode -0.0017 International Stroke Trial Example Using the IST data, we are interested in predicting recurrent stroke DRSISC using the available covariate data. MORE COMING SOON. STAY TUNED :) 4.7 Exercise 4.7.1 Predicting Myocardial Infarction with sl3 Follow the steps below to predict myocardial infarction (mi) using the available covariate data. We thank Prof. David Benkeser at Emory University for making the this Cardiovascular Health Study (CHS) data accessible. # load the data set db_data &lt;- url(&quot;https://raw.githubusercontent.com/benkeser/sllecture/master/chspred.csv&quot;) chspred &lt;- read_csv(file = db_data, col_names = TRUE) # take a quick peek head(chspred) %&gt;% kable(digits = 4) %&gt;% kableExtra:::kable_styling(fixed_thead = T) %&gt;% scroll_box(width = &quot;100%&quot;, height = &quot;300px&quot;) waist alcoh hdl beta smoke ace ldl bmi aspirin gend age estrgn glu ins cysgfr dm fetuina whr hsed race logcystat logtrig logcrp logcre health logkcal sysbp mi 110.1642 0.0000 66.4974 0 0 1 114.2162 27.9975 0 0 73.5179 0 159.9314 70.3343 75.0078 1 0.1752 1.1690 1 1 -0.3420 5.4063 2.0126 -0.6739 0 4.3926 177.1345 0 89.9763 0.0000 50.0652 0 0 0 103.7766 20.8931 0 0 61.7723 0 153.3888 33.9695 82.7433 1 0.5717 0.9011 0 0 -0.0847 4.8592 3.2933 -0.5551 1 6.2071 136.3742 0 106.1941 8.4174 40.5059 0 0 0 165.7158 28.4554 1 1 72.9312 0 121.7145 -17.3017 74.6989 0 0.3517 1.1797 0 1 -0.4451 4.5088 0.3013 -0.0115 0 6.7320 135.1993 0 90.0566 0.0000 36.1750 0 0 0 45.2035 23.9608 0 0 79.1191 0 53.9691 11.7315 95.7823 0 0.5439 1.1360 0 0 -0.4807 5.1832 3.0243 -0.5751 1 7.3972 139.0182 0 78.6143 2.9790 71.0642 0 1 0 131.3121 10.9656 0 1 69.0179 0 94.3153 9.7112 72.7109 0 0.4916 1.1028 1 0 0.3121 4.2190 -0.7057 0.0053 1 8.2779 88.0470 0 91.6593 0.0000 59.4963 0 0 0 171.1872 29.1317 0 1 81.8346 0 212.9066 -28.2269 69.2184 1 0.4621 0.9529 1 0 -0.2872 5.1773 0.9705 0.2127 1 5.9942 69.5943 0 Create an sl3 task, setting myocardial infarction mi as the outcome and using all available covariate data. Make a library of seven relatively fast base learning algorithms (i.e., do not consider BART or HAL). Customize hyperparameters for one of your learners. Feel free to use learners from sl3 or SuperLearner. You may use the same base learning library that is presented above. Incorporate feature selection with the SuperLearner screener screen.corP. Fit the metalearning step with non-negative least squares, Lrnr_nnls. With the metalearner and base learners, make the Super Learner and train it on the task. Print your Super Learner fit by calling print() with $. Cross-validate your Super Learner fit to see how well it performs on unseen data. Specify loss_squared_error as the loss function to evaluate the Super Learner. 4.8 Concluding Remarks The general ensemble learning approach of Super Learner can be applied to a diversity of estimation and prediction problems that can be defined by a loss function. We just discussed conditional mean estimation, outcome prediction and variable importance. In future updates of this chapter, we will delve into prediction of a conditional density, and the optimal individualized treatment rule. If we plug in the estimator returned by super learner into the target parameter mapping, then we would end up with an estimator that has the same bias as what we plugged in, and would not be asymptotically linear. It also would not be a plug-in estimator or efficient. An asymptotically linear estimator is important to have, since they converge to the estimand at \\(\\frac{1}{\\sqrt{n}}\\) rate, and thereby permit formal statistical inference (i.e. confidence intervals and \\(p\\)-values). Plug-in estimators of the estimand are desirable because they respect both the local and global constraints of the statistical model (e.g. bounds), and have they have better finite-sample properties. An efficient estimator is optimal in the sense that it has the lowest possible variance, and is thus the most precise. An estimator is efficient if and only if is asymptotically linear with influence curve equal to the canonical gradient. The canonical gradient is a mathematical object that is specific to the target estimand, and it provides information on the level of difficulty of the estimation problem. The canonical gradient is shown in the chapters that follow. Practitioner’s do not need to know how to calculate a canonical gradient in order to understand efficiency and use Targeted Maximum Likelihood Estimation (TMLE). Metaphorically, you do not need to be Yoda in order to be a Jedi. TMLE is a general strategy that succeeds in constructing efficient and asymptotically linear plug-in estimators. Super Learner is fantastic for pure prediction, and for obtaining an initial estimate in the first step of TMLE, but we need the second step of TMLE to have the desirable statistical properties mentioned above. In the chapters that follow, we focus on the targeted maximum likelihood estimator and the targeted minimum loss-based estimator, both referred to as TMLE. ## Appendix 4.8.1 Exercise 1 Solution Here is a potential solution to the (sl3 Exercise – Predicting Myocardial Infarction with sl3)(???). # make task chspred_task &lt;- make_sl3_Task( data = chspred, covariates = head(colnames(chspred), -1), outcome = &quot;mi&quot; ) # make learners glm_learner &lt;- Lrnr_glm$new() lasso_learner &lt;- Lrnr_glmnet$new(alpha = 1) ridge_learner &lt;- Lrnr_glmnet$new(alpha = 0) enet_learner &lt;- Lrnr_glmnet$new(alpha = 0.5) curated_glm_learner &lt;- Lrnr_glm_fast$new(formula = &quot;mi ~ smoke + beta + waist&quot;) mean_learner &lt;- Lrnr_mean$new() # That is one mean learner! glm_fast_learner &lt;- Lrnr_glm_fast$new() ranger_learner &lt;- Lrnr_ranger$new() svm_learner &lt;- Lrnr_svm$new() xgb_learner &lt;- Lrnr_xgboost$new() screen_cor &lt;- make_learner(Lrnr_screener_corP) glm_pipeline &lt;- make_learner(Pipeline, screen_cor, glm_learner) # stack learners together stack &lt;- make_learner( Stack, glm_pipeline, glm_learner, lasso_learner, ridge_learner, enet_learner, curated_glm_learner, mean_learner, glm_fast_learner, ranger_learner, svm_learner, xgb_learner ) # choose metalearner metalearner &lt;- make_learner(Lrnr_nnls) sl &lt;- Lrnr_sl$new( learners = stack, metalearner = metalearner ) sl_fit &lt;- sl$train(chspred_task) sl_fit$print() CVsl &lt;- CV_lrnr_sl(sl_fit, chspred_task, loss_squared_error) CVsl References "],
["tmle3.html", "Chapter 5 The TMLE Framework", " Chapter 5 The TMLE Framework Jeremy Coyle Based on the tmle3 R package. "],
["optimal-individualized-treatment-regimes.html", "Chapter 6 Optimal Individualized Treatment Regimes", " Chapter 6 Optimal Individualized Treatment Regimes Ivana Malenica Based on the tmle3mopttx R package by Ivana Malenica, Jeremy Coyle, and Mark van der Laan. "],
["stochastic-treatment-regimes.html", "Chapter 7 Stochastic Treatment Regimes 7.1 Extensions: Variable Importance Analysis with Stochastic Interventions 7.2 Exercises", " Chapter 7 Stochastic Treatment Regimes Completed in 2 iterations ``` tmle_fit A tmle3_Fit that took 1 step(s) type param init_est tmle_est se lower upper 1: TSM E[Y_{A=NULL}] 0.7692472 0.7702532 0.01889711 0.7332155 0.8072909 psi_transformed lower_transformed upper_transformed 1: 0.7702532 0.7332155 0.8072909 The print method of the resultant tmle_fit object conveniently displays the results from computing our TML estimator. 7.0.1 Statistical Inference for Targeted Maximum Likelihood Estimates Recall that the asymptotic distribution of TML estimators has been studied thoroughly: \\[\\psi_n - \\psi_0 = (P_n - P_0) \\cdot D(\\bar{Q}_n^*, g_n) + R(\\hat{P}^*, P_0),\\] which, provided the following two conditions: If \\(D(\\bar{Q}_n^*, g_n)\\) converges to \\(D(P_0)\\) in \\(L_2(P_0)\\) norm, and the size of the class of functions considered for estimation of \\(\\bar{Q}_n^*\\) and \\(g_n\\) is bounded (technically, \\(\\exists \\mathcal{F}\\) st \\(D(\\bar{Q}_n^*, g_n) \\in \\mathcal{F}\\) whp, where \\(\\mathcal{F}\\) is a Donsker class), readily admits the conclusion that \\(\\psi_n - \\psi_0 = (P_n - P_0) \\cdot D(P_0) + R(\\hat{P}^*, P_0)\\). Under the additional condition that the remainder term \\(R(\\hat{P}^*, P_0)\\) decays as \\(o_P \\left( \\frac{1}{\\sqrt{n}} \\right),\\) we have that \\[\\psi_n - \\psi_0 = (P_n - P_0) \\cdot D(P_0) + o_P \\left( \\frac{1}{\\sqrt{n}} \\right),\\] which, by a central limit theorem, establishes a Gaussian limiting distribution for the estimator: \\[\\sqrt{n}(\\psi_n - \\psi) \\to N(0, V(D(P_0))),\\] where \\(V(D(P_0))\\) is the variance of the efficient influence curve (canonical gradient) when \\(\\psi\\) admits an asymptotically linear representation. The above implies that \\(\\psi_n\\) is a \\(\\sqrt{n}\\)-consistent estimator of \\(\\psi\\), that it is asymptotically normal (as given above), and that it is locally efficient. This allows us to build Wald-type confidence intervals in a straightforward manner: \\[\\psi_n \\pm z_{\\alpha} \\cdot \\frac{\\sigma_n}{\\sqrt{n}},\\] where \\(\\sigma_n^2\\) is an estimator of \\(V(D(P_0))\\). The estimator \\(\\sigma_n^2\\) may be obtained using the bootstrap or computed directly via the following \\[\\sigma_n^2 = \\frac{1}{n} \\sum_{i = 1}^{n} D^2(\\bar{Q}_n^*, g_n)(O_i)\\] Having now re-examined these facts, let’s simply examine the results of computing our TML estimator: 7.1 Extensions: Variable Importance Analysis with Stochastic Interventions 7.1.1 Defining a grid of counterfactual interventions In order to specify a grid of shifts \\(\\delta\\) to be used in defining a set of stochastic intervention policies in an a priori manner, let us consider an arbitrary scalar \\(\\delta\\) that defines a counterfactual outcome \\(\\psi_n = Q_n(d(A, W), W)\\), where, for simplicity, let \\(d(A, W) = A + \\delta\\). A simplified expression of the auxiliary covariate for the TMLE of \\(\\psi\\) is \\(H_n = \\frac{g^{\\star}(a \\mid w)}{g(a \\mid w)}\\), where \\(g^{\\star}(a \\mid w)\\) defines the treatment mechanism with the stochastic intervention implemented. Then, to ascertain whether a given choice of the shift \\(\\delta\\) is admissable (in the sense of avoiding violations of the positivity assumption), let there be a bound \\(C(\\delta) = \\frac{g^{\\star}(a \\mid w)}{g(a \\mid w)} &lt; M\\), where \\(g^{\\star}(a \\mid w)\\) is a function of \\(\\delta\\) in part, and \\(M\\) is a potentially user-specified upper bound of \\(C(\\delta)\\). Then, \\(C(\\delta)\\) is a measure of the influence of a given observation, thereby providing a way to limit the maximum influence of a given observation (by way of the bound \\(M\\) placed on \\(C(\\delta)\\)) through a choice of the shift \\(\\delta\\). We formalize and extend the procedure to determine an acceptable set of values for the shift \\(\\delta\\) in the sequel. Specifically, let there be a shift \\(d(A, W) = A + \\delta(A, W)\\), where the shift \\(\\delta(A, W)\\) is defined as \\[\\begin{equation} \\delta(a, w) = \\begin{cases} \\delta, &amp; \\delta_{\\text{min}}(a,w) \\leq \\delta \\leq \\delta_{\\text{max}}(a,w) \\\\ \\delta_{\\text{max}}(a,w), &amp; \\delta \\geq \\delta_{\\text{max}}(a,w) \\\\ \\delta_{\\text{min}}(a,w), &amp; \\delta \\leq \\delta_{\\text{min}}(a,w) \\\\ \\end{cases}, \\end{equation}\\] where \\[\\delta_{\\text{max}}(a, w) = \\text{argmax}_{\\left\\{\\delta \\geq 0, \\frac{g(a - \\delta \\mid w)}{g(a \\mid w)} \\leq M \\right\\}} \\frac{g(a - \\delta \\mid w)}{g(a \\mid w)}\\] and \\[\\delta_{\\text{min}}(a, w) = \\text{argmin}_{\\left\\{\\delta \\leq 0, \\frac{g(a - \\delta \\mid w)}{g(a \\mid w)} \\leq M \\right\\}} \\frac{g(a - \\delta \\mid w)}{g(a \\mid w)}.\\] The above provides a strategy for implementing a shift at the level of a given observation \\((a_i, w_i)\\), thereby allowing for all observations to be shifted to an appropriate value – whether \\(\\delta_{\\text{min}}\\), \\(\\delta\\), or \\(\\delta_{\\text{max}}\\). For the purpose of using such a shift in practice, the present software provides the functions shift_additive_bounded and shift_additive_bounded_inv, which define a variation of this shift: \\[\\begin{equation} \\delta(a, w) = \\begin{cases} \\delta, &amp; C(\\delta) \\leq M \\\\ 0, \\text{otherwise} \\\\ \\end{cases}, \\end{equation}\\] which corresponds to an intervention in which the natural value of treatment of a given observational unit is shifted by a value \\(\\delta\\) in the case that the ratio of the intervened density \\(g^{\\star}(a \\mid w)\\) to the natural density \\(g(a \\mid w)\\) (that is, \\(C(\\delta)\\)) does not exceed a bound \\(M\\). In the case that the ratio \\(C(\\delta)\\) exceeds the bound \\(M\\), the stochastic intervention policy does not apply to the given unit and they remain at their natural value of treatment \\(a\\). 7.1.2 Initializing vimshift through its tmle3_Spec To start, we will initialize a specification for the TMLE of our parameter of interest (called a tmle3_Spec in the tlverse nomenclature) simply by calling tmle_shift. We specify the argument shift_grid = seq(-1, 1, by = 1) when initializing the tmle3_Spec object to communicate that we’re interested in assessing the mean counterfactual outcome over a grid of shifts -1, 0, 1 on the scale of the treatment \\(A\\) (note that the numerical choice of shift is an arbitrarily chosen set of values for this example). # what&#39;s the grid of shifts we wish to consider? delta_grid &lt;- seq(-1, 1, 1) # initialize a tmle specification tmle_spec &lt;- tmle_vimshift_delta( shift_grid = delta_grid, max_shifted_ratio = 2 ) As seen above, the tmle_vimshift specification object (like all tmle3_Spec objects) does not store the data for our specific analysis of interest. Later, we’ll see that passing a data object directly to the tmle3 wrapper function, alongside the instantiated tmle_spec, will serve to construct a tmle3_Task object internally (see the tmle3 documentation for details). 7.1.3 Targeted Estimation of Stochastic Interventions Effects One may walk through the step-by-step procedure for fitting the TML estimator of the mean counterfactual outcome under each shift in the grid, using the machinery exposed by the tmle3 R package. One may invoke the tmle3 wrapper function (a user-facing convenience utility) to fit the series of TML estimators (one for each parameter defined by the grid delta) in a single function call: tmle_fit &lt;- tmle3(tmle_spec, data, node_list, learner_list) Iter: 1 fn: 687.5117 Pars: 0.92367 0.07633 Iter: 2 fn: 687.5117 Pars: 0.92367 0.07633 solnp--&gt; Completed in 2 iterations tmle_fit A tmle3_Fit that took 1 step(s) type param init_est tmle_est se lower 1: TSM E[Y_{A=NULL}] 0.61618517 0.6119072 0.021225553 0.57030585 2: TSM E[Y_{A=NULL}] 0.71555149 0.7160000 0.020186704 0.67643479 3: TSM E[Y_{A=NULL}] 0.81227287 0.8154102 0.016156118 0.78374484 4: MSM_linear MSM(intercept) 0.71466984 0.7144391 0.018521293 0.67813807 5: MSM_linear MSM(slope) 0.09804385 0.1017515 0.005711439 0.09055733 upper psi_transformed lower_transformed upper_transformed 1: 0.6535085 0.6119072 0.57030585 0.6535085 2: 0.7555652 0.7160000 0.67643479 0.7555652 3: 0.8470757 0.8154102 0.78374484 0.8470757 4: 0.7507402 0.7144391 0.67813807 0.7507402 5: 0.1129458 0.1017515 0.09055733 0.1129458 Remark: The print method of the resultant tmle_fit object conveniently displays the results from computing our TML estimator. 7.1.4 Inference with Marginal Structural Models Since we consider estimating the mean counterfactual outcome \\(\\psi_n\\) under several values of the intervention \\(\\delta\\), taken from the aforementioned \\(\\delta\\)-grid, one approach for obtaining inference on a single summary measure of these estimated quantities involves leveraging working marginal structural models (MSMs). Summarizing the estimates \\(\\psi_n\\) through a working MSM allows for inference on the trend imposed by a \\(\\delta\\)-grid to be evaluated via a simple hypothesis test on a parameter of this working MSM. Letting \\(\\psi_{\\delta}(P_0)\\) be the mean outcome under a shift \\(\\delta\\) of the treatment, we have \\(\\vec{\\psi}_{\\delta} = (\\psi_{\\delta}: \\delta)\\) with corresponding estimators \\(\\vec{\\psi}_{n, \\delta} = (\\psi_{n, \\delta}: \\delta)\\). Further, let \\(\\beta(\\vec{\\psi}_{\\delta}) = \\phi((\\psi_{\\delta}: \\delta))\\). For a given MSM \\(m_{\\beta}(\\delta)\\), we have that \\[\\beta_0 = \\text{argmin}_{\\beta} \\sum_{\\delta}(\\psi_{\\delta}(P_0) - m_{\\beta}(\\delta))^2 h(\\delta),\\] which is the solution to \\[u(\\beta, (\\psi_{\\delta}: \\delta)) = \\sum_{\\delta}h(\\delta) \\left(\\psi_{\\delta}(P_0) - m_{\\beta}(\\delta) \\right) \\frac{d}{d\\beta} m_{\\beta}(\\delta) = 0.\\] This then leads to the following expansion \\[\\beta(\\vec{\\psi}_n) - \\beta(\\vec{\\psi}_0) \\approx -\\frac{d}{d\\beta} u(\\beta_0, \\vec{\\psi}_0)^{-1} \\frac{d}{d\\psi} u(\\beta_0, \\psi_0)(\\vec{\\psi}_n - \\vec{\\psi}_0),\\] where we have \\[\\frac{d}{d\\beta} u(\\beta, \\psi) = -\\sum_{\\delta} h(\\delta) \\frac{d}{d\\beta} m_{\\beta}(\\delta)^t \\frac{d}{d\\beta} m_{\\beta}(\\delta) -\\sum_{\\delta} h(\\delta) m_{\\beta}(\\delta) \\frac{d^2}{d\\beta^2} m_{\\beta}(\\delta),\\] which, in the case of an MSM that is a linear model (since \\(\\frac{d^2}{d\\beta^2} m_{\\beta}(\\delta) = 0\\)), reduces simply to \\[\\frac{d}{d\\beta} u(\\beta, \\psi) = -\\sum_{\\delta} h(\\delta) \\frac{d}{d\\beta} m_{\\beta}(\\delta)^t \\frac{d}{d\\beta} m_{\\beta}(\\delta),\\] and \\[\\frac{d}{d\\psi}u(\\beta, \\psi)(\\psi_n - \\psi_0) = \\sum_{\\delta} h(\\delta) \\frac{d}{d\\beta} m_{\\beta}(\\delta) (\\psi_n - \\psi_0)(\\delta),\\] which we may write in terms of the efficient influence function (EIF) of \\(\\psi\\) by using the first order approximation \\((\\psi_n - \\psi_0)(\\delta) = \\frac{1}{n}\\sum_{i = 1}^n \\text{EIF}_{\\psi_{\\delta}}(O_i)\\), where \\(\\text{EIF}_{\\psi_{\\delta}}\\) is the efficient influence function (EIF) of \\(\\vec{\\psi}\\). Now, say, \\(\\vec{\\psi} = (\\psi(\\delta): \\delta)\\) is d-dimensional, then we may write the efficient influence function of the MSM parameter \\(\\beta\\) as follows \\[\\text{EIF}_{\\beta}(O) = \\left(\\sum_{\\delta} h(\\delta) \\frac{d}{d\\beta} m_{\\beta}(\\delta) \\frac{d}{d\\beta} m_{\\beta}(\\delta)^t \\right)^{-1} \\cdot \\sum_{\\delta} h(\\delta) \\frac{d}{d\\beta} m_{\\beta}(\\delta) \\text{EIF}_{\\psi_{\\delta}}(O),\\] where the first term is of dimension \\(d \\times d\\) and the second term is of dimension \\(d \\times 1\\). In the above, we assume a linear working MSM; however, an analogous procedure may be applied for working MSMs based on GLMs. Inference for a parameter of an MSM may be obtained by straightforward application of the delta method (discussed previously) – that is, we may write the efficient influence function of the MSM parameter \\(\\beta\\) in terms of the EIFs of each of the corresponding point estimates. Based on this, inference from a working MSM is rather straightforward. To wit, the limiting distribution for \\(m_{\\beta}(\\delta)\\) may be expressed \\[\\sqrt{n}(\\beta_n - \\beta_0) \\to N(0, \\Sigma),\\] where \\(\\Sigma\\) is the empirical covariance matrix of \\(\\text{EIF}_{\\beta}(O)\\). tmle_fit$summary[4:5, ] type param init_est tmle_est se lower 1: MSM_linear MSM(intercept) 0.71466984 0.7144391 0.018521293 0.67813807 2: MSM_linear MSM(slope) 0.09804385 0.1017515 0.005711439 0.09055733 upper psi_transformed lower_transformed upper_transformed 1: 0.7507402 0.7144391 0.67813807 0.7507402 2: 0.1129458 0.1017515 0.09055733 0.1129458 7.1.4.1 Directly Targeting the MSM Parameter \\(\\beta\\) Note that in the above, a working MSM is fit to the individual TML estimates of the mean counterfactual outcome under a given value of the shift \\(\\delta\\) in the supplied grid. The parameter of interest \\(\\beta\\) of the MSM is asymptotically linear (and, in fact, a TML estimator) as a consequence of its construction from individual TML estimators. In smaller samples, it may be prudent to perform a TML estimation procedure that targets the parameter \\(\\beta\\) directly, as opposed to constructing it from several independently targeted TML estimates. An approach for constructing such an estimator is proposed in the sequel. Suppose a simple working MSM \\(\\mathbb{E}Y_{g^0_{\\delta}} = \\beta_0 + \\beta_1 \\delta\\), then a TML estimator targeting \\(\\beta_0\\) and \\(\\beta_1\\) may be constructed as \\[\\overline{Q}_{n, \\epsilon}(A,W) = \\overline{Q}_n(A,W) + \\epsilon (H_1(g), H_2(g),\\] for all \\(\\delta\\), where \\(H_1(g)\\) is the auxiliary covariate for \\(\\beta_0\\) and \\(H_2(g)\\) is the auxiliary covariate for \\(\\beta_1\\). To construct a targeted maximum likelihood estimator that directly targets the parameters of the working marginal structural model, we may use the tmle_vimshift_msm Spec (instead of the tmle_vimshift_delta Spec that appears above): # initialize a tmle specification tmle_msm_spec &lt;- tmle_vimshift_msm( shift_grid = delta_grid, max_shifted_ratio = 2 ) # fit the TML estimator and examine the results tmle_msm_fit &lt;- tmle3(tmle_msm_spec, data, node_list, learner_list) Iter: 1 fn: 687.0517 Pars: 0.92077 0.07923 Iter: 2 fn: 687.0517 Pars: 0.92077 0.07923 solnp--&gt; Completed in 2 iterations tmle_msm_fit A tmle3_Fit that took 1 step(s) type param init_est tmle_est se lower 1: MSM_linear MSM(intercept) 0.71488408 0.71451664 0.018568600 0.6781229 2: MSM_linear MSM(slope) 0.09764547 0.09781419 0.005805307 0.0864360 upper psi_transformed lower_transformed upper_transformed 1: 0.7509104 0.71451664 0.6781229 0.7509104 2: 0.1091924 0.09781419 0.0864360 0.1091924 7.1.5 Example with the WASH Benefits Data To complete our walk through, let’s turn to using stochastic interventions to investigate the data from the WASH Benefits trial. To start, let’s load the data, convert all columns to be of class numeric, and take a quick look at it washb_data &lt;- fread(&quot;https://raw.githubusercontent.com/tlverse/tlverse-data/master/wash-benefits/washb_data.csv&quot;, stringsAsFactors = TRUE) washb_data &lt;- washb_data[!is.na(momage), lapply(.SD, as.numeric)] head(washb_data, 3) whz tr fracode month aged sex momage momedu momheight hfiacat Nlt18 Ncomp 1: 0.00 1 4 9 268 2 30 2 146.40 1 3 11 2: -1.16 1 4 9 286 2 25 2 148.75 3 2 4 3: -1.05 1 20 9 264 2 25 2 152.15 1 1 10 watmin elec floor walls roof asset_wardrobe asset_table asset_chair 1: 0 1 0 1 1 0 1 1 2: 0 1 0 1 1 0 1 0 3: 0 0 0 1 1 0 0 1 asset_khat asset_chouki asset_tv asset_refrig asset_bike asset_moto 1: 1 0 1 0 0 0 2: 1 1 0 0 0 0 3: 0 1 0 0 0 0 asset_sewmach asset_mobile 1: 0 1 2: 0 1 3: 0 1 Next, we specify our NPSEM via the node_list object. For our example analysis, we’ll consider the outcome to be the weight-for-height Z-score (as in previous chapters), the intervention of interest to be the mother’s age at time of child’s birth, and take all other covariates to be potential confounders. node_list &lt;- list( W = names(washb_data)[!(names(washb_data) %in% c(&quot;whz&quot;, &quot;momage&quot;))], A = &quot;momage&quot;, Y = &quot;whz&quot; ) Were we to consider the counterfactual weight-for-height Z-score under shifts in the age of the mother at child’s birth, how would we interpret estimates of our parameter? To simplify our interpretation, consider a shift of just a year in the mother’s age (i.e., \\(\\delta = 1\\)); in this setting, a stochastic intervention would correspond to a policy advocating that potential mothers defer having a child for a single calendar year, possibly implemented through an encouragement design deployed in a clinical setting. For this example, we’ll use the variable importance strategy of considering a grid of stochastic interventions to evaluate the weight-for-height Z-score under a shift in the mother’s age down by two years (\\(\\delta = -2\\)) or up by two years (\\(\\delta = 2\\)). To do this, we simply initialize a Spec tmle_vimshift_delta just as we did in a previous example: # initialize a tmle specification for the variable importance parameter washb_vim_spec &lt;- tmle_vimshift_delta( shift_grid = c(-2, 2), max_shifted_ratio = 2 ) Prior to running our analysis, we’ll modify the learner_list object we had created such that the density estimation procedure we rely on will be only the random forest conditional density estimation procedure of Pospisil and Lee (2018), as the nonparametric conditional density approach based on the highly adaptive lasso (Díaz and van der Laan 2011; Benkeser and van der Laan 2016; Coyle and Hejazi 2018; Hejazi, Benkeser, and van der Laan 2019) is currently unable to accommodate large datasets. # learners used for conditional density regression (i.e., propensity score) lrn_rfcde &lt;- Lrnr_rfcde$new( n_trees = 250, node_size = 5, n_basis = 20, output_type = &quot;observed&quot; ) # we need to turn on cross-validation for the RFCDE learner lrn_cv_rfcde &lt;- Lrnr_cv$new( learner = lrn_rfcde, full_fit = TRUE ) # modify learner list, using existing SL for Q fit learner_list &lt;- list(Y = sl_lrn, A = lrn_cv_rfcde) Having made the above preparations, we’re now ready to estimate the counterfactual mean of the weight-for-height Z-score under a small grid of shifts in the mother’s age at child’s birth. Just as before, we do this through a simple call to our tmle3 wrapper function: washb_tmle_fit &lt;- tmle3(washb_vim_spec, washb_data, node_list, learner_list) washb_tmle_fit 7.2 Exercises 7.2.1 The Ideas in Action Set the sl3 library of algorithms for the Super Learner to a simple, interpretable library and use this new library to estimate the counterfactual mean of mother’s age at child’s birth (momage) under a shift \\(\\delta = 0\\). What does this counterfactual mean equate to in terms of the observed data? Using a grid of values of the shift parameter \\(\\delta\\) (e.g., \\(\\{-1, 0, +1\\}\\)), repeat the analysis on the variable chosen in the preceding question, summarizing the trend for this sequence of shifts using a marginal structural model. Repeat the preceding analysis, using the same grid of shifts, but instead directly targeting the parameters of the marginal structural model. Interpret the results – that is, what does the slope of the marginal structural model tell us about the trend across the chosen sequence of shifts? 7.2.2 Review of Key Concepts Describe two (equivalent) ways in which the causal effects of stochastic interventions may be interpreted. How does the marginal structural model we used to summarize the trend along the sequence of shifts previously help to contextualize the estimated effect for a single shift? That is, how does access to estimates across several shifts and the marginal structural model parameters allow us to more richly interpret our findings? What advantages, if any, are there to targeting directly the parameters of a marginal structural model? References "],
["r6.html", "Chapter 8 A Primer on the R6 Class System 8.1 Classes, Fields, and Methods 8.2 Object Oriented Programming: Python and R", " Chapter 8 A Primer on the R6 Class System A central goal of the Targeted Learning statistical paradigm is to estimate scientifically relevant parameters in realistic (usually nonparametric) models. The tlverse is designed using basic OOP principles and the R6 OOP framework. While we’ve tried to make it easy to use the tlverse packages without worrying much about OOP, it is helpful to have some intuition about how the tlverse is structured. Here, we briefly outline some key concepts from OOP. Readers familiar with OOP basics are invited to skip this section. 8.1 Classes, Fields, and Methods The key concept of OOP is that of an object, a collection of data and functions that corresponds to some conceptual unit. Objects have two main types of elements: fields, which can be thought of as nouns, are information about an object, and methods, which can be thought of as verbs, are actions an object can perform. Objects are members of classes, which define what those specific fields and methods are. Classes can inherit elements from other classes (sometimes called base classes) – accordingly, classes that are similar, but not exactly the same, can share some parts of their definitions. Many different implementations of OOP exist, with variations in how these concepts are implemented and used. R has several different implementations, including S3, S4, reference classes, and R6. The tlverse uses the R6 implementation. In R6, methods and fields of a class object are accessed using the $ operator. For a more thorough introduction to R’s various OOP systems, see http://adv-r.had.co.nz/OO-essentials.html, from Hadley Wickham’s Advanced R (Wickham 2014). 8.2 Object Oriented Programming: Python and R OO concepts (classes with inherentence) were baked into Python from the first published version (version 0.9 in 1991). In contrast, R gets its OO “approach” from its predecessor, S, first released in 1976. For the first 15 years, S had no support for classes, then, suddenly, S got two OO frameworks bolted on in rapid succession: informal classes with S3 in 1991, and formal classes with S4 in 1998. This process continues, with new OO frameworks being periodically released, to try to improve the lackluster OO support in R, with reference classes (R5, 2010) and R6 (2014). Of these, R6 behaves most like Python classes (and also most like OOP focused languages like C++ and Java), including having method definitions be part of class definitions, and allowing objects to be modified by reference. References "],
["references.html", "References", " References "]
]
